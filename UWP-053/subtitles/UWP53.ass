[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: uwp53SoundBoardDragAndDrop_high.mp4
Video File: uwp53SoundBoardDragAndDrop_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Scroll Position: 141
Active Line: 158
Video Position: 39648

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: yahei,微软雅黑,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,yahei,,0,0,0,,UWP 音板- 添加拖拽
Dialogue: 0,0:00:05.00,0:00:14.31,yahei,,0,0,0,,接下来要添加的一个特性就是从桌面上拖拽一个音效到设计平台上
Dialogue: 0,0:00:14.31,0:00:19.28,yahei,,0,0,0,,或者是软件中的网格视图，并播放音效
Dialogue: 0,0:00:19.65,0:00:26.02,yahei,,0,0,0,,我经常从创建一个小的便笺应用(scratch pad application）开始
Dialogue: 0,0:00:26.14,0:00:30.91,yahei,,0,0,0,,它能帮助我更好的理解怎样去应用拖拽
Dialogue: 0,0:00:30.91,0:00:39.25,yahei,,0,0,0,,当我理解了之后，我就可以把它应用到app整体中
Dialogue: 0,0:00:39.25,0:00:45.60,yahei,,0,0,0,,这样我能更好的理解app中复杂难懂的特性和概念
Dialogue: 0,0:00:45.80,0:00:51.36,yahei,,0,0,0,,更好的整理思路，多尝试一些方法供选择，当我完成了这一切
Dialogue: 0,0:00:51.44,0:00:56.40,yahei,,0,0,0,,或者说当我长大(?)了之后，我就可以开干（污误）应用到project里了
Dialogue: 0,0:00:56.52,0:01:00.42,yahei,,0,0,0,,就像我之前说的，我要先创建一个小的app
Dialogue: 0,0:01:00.42,0:01:03.34,Default,,0,0,0,,（之后你们也会得到这个关于拖拽的例子）
Dialogue: 0,0:01:03.34,0:01:08.86,yahei,,0,0,0,,可以看到这个例子虽然非常简单，但其中也包含了一些很重要的概念
Dialogue: 0,0:01:09.30,0:01:15.22,yahei,,0,0,0,,如果跑一下这个程序，能看到这里需要有一个StackPanel(堆叠面板)
Dialogue: 0,0:01:15.22,0:01:22.32,yahei,,0,0,0,,这有一块红色区域，接着就可以从桌面将各种条目拖拽到这块区域里
Dialogue: 0,0:01:22.32,0:01:25.36,yahei,,0,0,0,,来显示图像或者播放声效
Dialogue: 0,0:01:25.36,0:01:31.92,yahei,,0,0,0,,还可以让我从桌面复制文件到
Dialogue: 0,0:01:31.92,0:01:38.82,yahei,,0,0,0,,客户端里的app可用的工作文件夹中
Dialogue: 0,0:01:38.82,0:01:40.82,yahei,,0,0,0,,一般命名为working folder(工作文件夹)或者local folder(本地文件夹)
Dialogue: 0,0:01:40.82,0:01:46.68,yahei,,0,0,0,,举个例子，比如我要将这个图像控制拖拽到红色区域
Dialogue: 0,0:01:46.68,0:01:53.20,yahei,,0,0,0,,它就像现在这样在app的图像控件中显示了
Dialogue: 0,0:01:53.20,0:01:59.94,yahei,,0,0,0,,还有一点要注意的就是我复制粘贴这个文件到的位置
Dialogue: 0,0:01:59.94,0:02:04.70,yahei,,0,0,0,,也就是app中的本地存储器
Dialogue: 0,0:02:04.70,0:02:13.18,yahei,,0,0,0,,需要做的就是全选并复制这个位置链接并在文件管理器中粘贴
Dialogue: 0,0:02:13.36,0:02:21.76,yahei,,0,0,0,,可以看到这个过程中通过了许多文件夹
Dialogue: 0,0:02:21.76,0:02:27.52,yahei,,0,0,0,,因为我做了多次这一过程，所以它复制了图片好几次
Dialogue: 0,0:02:27.52,0:02:29.52,yahei,,0,0,0,,我还是先把这些都删掉吧
Dialogue: 0,0:02:29.52,0:02:34.54,yahei,,0,0,0,,然后再重新做一次
Dialogue: 0,0:02:34.54,0:02:41.74,yahei,,0,0,0,,我先将图片拖拽到app中，与此同时它也复制到了本地存储区域
Dialogue: 0,0:02:41.74,0:02:46.64,yahei,,0,0,0,,然后将这个本地副本显示在图像控件中
Dialogue: 0,0:02:46.64,0:02:54.94,yahei,,0,0,0,,我们可以这样添加音效，比如这个mp3文件，当我拖拽过来的时候它就会开始播放
Dialogue: 0,0:02:54.94,0:03:00.64,yahei,,0,0,0,,只播放了9秒，然后就逐渐淡出了
Dialogue: 0,0:03:00.64,0:03:05.28,yahei,,0,0,0,,我也会在接下来的例子中展示如何设置这个
Dialogue: 0,0:03:05.28,0:03:12.62,yahei,,0,0,0,,开始之前我们需要先注意几件事\N首先看一下这个xaml里有一个stackpanel
Dialogue: 0,0:03:12.62,0:03:18.82,yahei,,0,0,0,,还有用来显示拖拽图像的Image，和播放音效的MediaElement
Dialogue: 0,0:03:18.82,0:03:36.54,yahei,,0,0,0,,还有下面用来显示私有本地存储空间的完整URI的TextBox
Dialogue: 0,0:03:36.76,0:03:46.64,yahei,,0,0,0,,在里面的stackpanel中，我添加了两个特性：
Dialogue: 0,0:03:46.64,0:03:55.52,yahei,,0,0,0,,（啊是三个）\N第一个非常的重要！如果没有AllowDrop的话，\N即使其他的都有效，拖拽也是无效的
Dialogue: 0,0:03:55.52,0:03:58.56,yahei,,0,0,0,,将它设为“True”
Dialogue: 0,0:03:58.56,0:04:09.12,yahei,,0,0,0,,接着将Drop设为StackPanel_Drop，将DragOver设为StackPanel_DragOver
Dialogue: 0,0:04:09.12,0:04:15.64,yahei,,0,0,0,,这两部分很关键，像DragOver直接影响到了我们拖拽文件的过程
Dialogue: 0,0:04:15.84,0:04:23.28,yahei,,0,0,0,,当我们进行拖拽的时候\N可以在下方显示像“拖拽至此播放音效”这样的提示\N
Dialogue: 0,0:04:23.40,0:04:29.04,yahei,,0,0,0,,接着Drop会执行指令，它会抓取文件，并复制粘贴到本地存储
Dialogue: 0,0:04:29.04,0:04:32.48,yahei,,0,0,0,,显示或播放这一副本
Dialogue: 0,0:04:32.56,0:04:36.12,yahei,,0,0,0,,通过代码，我们来看看这是怎么运作的
Dialogue: 0,0:04:36.12,0:04:43.60,yahei,,0,0,0,,打开MainPage.xaml.cs，先来看这个DragOver
Dialogue: 0,0:04:43.60,0:04:56.24,yahei,,0,0,0,,当我复制文件时，其实只需要把它看成一个复制操作（copy operation）
Dialogue: 0,0:04:56.36,0:04:58.64,yahei,,0,0,0,,这也是比较常用的一种方法
Dialogue: 0,0:04:58.64,0:05:06.20,yahei,,0,0,0,,接下来我在DragEventArgs e上设置关于DragUIOverride的特性
Dialogue: 0,0:05:06.20,0:05:11.00,yahei,,0,0,0,,还可以设置提示字幕，并让它可见
Dialogue: 0,0:05:11.00,0:05:17.24,yahei,,0,0,0,,使文件内容可见，这样可以直接看到图片文件
Dialogue: 0,0:05:17.24,0:05:29.92,yahei,,0,0,0,,还有IsGlyphVisible=true\N我记得Glyph是说小图标，也就是这里面的复制操作
Dialogue: 0,0:05:29.92,0:05:40.72,yahei,,0,0,0,,这里面包含了两个叠放的文件，\N这个例子中将文件拖拽到红色堆叠面板时也要注意这点
Dialogue: 0,0:05:40.72,0:05:53.84,yahei,,0,0,0,,图片仍然可见，同时还可以看到提示\N“拖拽以创建自定义音效”和一个小符号
Dialogue: 0,0:05:53.84,0:05:58.56,yahei,,0,0,0,,拖拽进来后，整体都是能正常运行的\N这就是DragOver这部分啦o(*￣▽￣*)ブ
Dialogue: 0,0:05:58.56,0:06:01.60,yahei,,0,0,0,,接下来我们来看Drop这一部分
Dialogue: 0,0:06:01.60,0:06:08.80,yahei,,0,0,0,,我们首先要确认进行拖拽的是一个文件
Dialogue: 0,0:06:08.80,0:06:17.96,yahei,,0,0,0,,这些都是存储条目，而不是文字片段或一些从其他app中拖拽的东西
Dialogue: 0,0:06:17.96,0:06:31.84,yahei,,0,0,0,,只有当拖拽进堆叠面板的数据视图是一个存储条目，\N或者说是文件库的复制操作时，我们才可以继续调试
Dialogue: 0,0:06:32.12,0:06:39.44,yahei,,0,0,0,,然后我们需要拿到一个全部条目的引用列表\N（如果不止一个条目的话）
Dialogue: 0,0:06:39.44,0:06:53.04,yahei,,0,0,0,,在这里我们只有一个条目，所以我们需要\N确认这个拖拽操作中存在条目是存储用
Dialogue: 0,0:06:53.12,0:07:07.76,yahei,,0,0,0,,这样我们就可以提取第一个条目（item[0]），并确认它的内容类型\N图片，音效，文档，或者其他的什么
Dialogue: 0,0:07:07.92,0:07:16.92,yahei,,0,0,0,,这里有一个本地文件夹的引用 (reference)\N所以当下载软件时这个文件夹也会一同放进设备存储中
Dialogue: 0,0:07:16.92,0:07:20.40,yahei,,0,0,0,,接着在路径文本框（PathTextBox）中显示它
Dialogue: 0,0:07:20.64,0:07:29.88,yahei,,0,0,0,,然后需要确认文件类型，如果是png或者jpeg格式的话\N我们需要在图像控件中显示这张图片
Dialogue: 0,0:07:29.88,0:07:39.68,yahei,,0,0,0,,或者如果是wav或者mpeg格式的话\N我们需要通过媒体播放器来播放
Dialogue: 0,0:07:39.68,0:07:49.12,yahei,,0,0,0,,我们首先要将这个文件复制到本地存储区域，也就是代码的50行
Dialogue: 0,0:07:49.12,0:07:58.12,yahei,,0,0,0,,这是文件夹以及文件名，然后我们就有了这个文件的reference\N（如果文件名已经存在，新建一个特殊名字）
Dialogue: 0,0:07:58.12,0:08:08.00,yahei,,0,0,0,,然后我们要创建一个bitmapImage，将它的source设为这个新的文件，\N并将图像控件的source设为这个bitmapImage
Dialogue: 0,0:08:08.00,0:08:16.32,yahei,,0,0,0,,接下来设置音频这部分。其实和上一\N部分差不多，比如这里的50行和58行
Dialogue: 0,0:08:16.32,0:08:26.68,yahei,,0,0,0,,将拖拽的文档放进stackpanel（堆叠面板）中，\N并本地储存，就像57行这里表示的一样
Dialogue: 0,0:08:26.68,0:08:36.76,yahei,,0,0,0,,接着需要将媒体播放器的资源设为这个复制保存的本地的文件
Dialogue: 0,0:08:36.76,0:08:47.44,yahei,,0,0,0,,然后就出现一点不同啦(●'◡'●)\N虽然我这里写的和真正的app中有一点不同，我只是想试试而已
Dialogue: 0,0:08:47.44,0:08:57.60,yahei,,0,0,0,,可以看到这里将mdeiaPlayerStoryborad设为开始，而在MainPage.xaml中， \N我之前创建了一个脚本，它则能定义一个animation动画
Dialogue: 0,0:08:57.60,0:09:03.28,yahei,,0,0,0,,你可能觉得你知道，但其实你有可能对动画\N一无所知，毕竟它在xaml中的用法不同
Dialogue: 0,0:09:03.40,0:09:08.36,yahei,,0,0,0,,动画就是任何我们可能会在过程中改变赋值的东西
Dialogue: 0,0:09:08.36,0:09:15.60,yahei,,0,0,0,,比如改变这个部件的特性，我可以续半秒也可以续五个一秒\N（一言不发就暴力膜）
Dialogue: 0,0:09:15.60,0:09:23.88,yahei,,0,0,0,,或者先改变一次特性，三秒后再一次改变，十秒后最后改变一次
Dialogue: 0,0:09:23.88,0:09:35.28,yahei,,0,0,0,,在这个例子，我们不会做普通的改变xy位置的动画，而是要改变音量
Dialogue: 0,0:09:35.28,0:09:39.48,yahei,,0,0,0,,而这个需要用到创建的这个脚本（命名为mediaPlayerStoryboard）
Dialogue: 0,0:09:39.48,0:09:49.84,yahei,,0,0,0,,在这之中我们需要改变的特性就是MediaPlayer中的MediaElement.Volume
Dialogue: 0,0:09:49.84,0:09:54.20,yahei,,0,0,0,,就是这里定义过的这个MediaPlayer
Dialogue: 0,0:09:54.20,0:10:11.04,yahei,,0,0,0,,所以我们需要做的就是添加时间点，比如0秒，3秒或者10秒，\N然后将里面的音量修改为不同的值
Dialogue: 0,0:10:11.04,0:10:20.32,yahei,,0,0,0,,实际上，在这里需要做的就是将这里的时间点设为1.0至6.0秒
Dialogue: 0,0:10:20.32,0:10:44.72,yahei,,0,0,0,,然后在第七秒时...啊不对这里搞混了（无奈脸\N第二秒到第六秒音量为1，第六秒后到第九秒音量变为0
Dialogue: 0,0:10:44.72,0:11:00.08,yahei,,0,0,0,,然后我们来看看效果怎么样吧！\N可能在视频中效果不是很明显，但是你可以\N稍后在自己的电脑上用一个超过九秒的音频试试
Dialogue: 0,0:11:00.08,0:11:08.60,yahei,,0,0,0,,重申一下，这个特性在这节课中不是必要的，但在以后的课程中
Dialogue: 0,0:11:08.60,0:11:20.60,yahei,,0,0,0,,当我们需要
Dialogue: 0,0:11:20.60,0:11:29.08,yahei,,0,0,0,,我先将音效拖拽进来，当开始播放后，它会在两秒后从一半音量增加到全音量
Dialogue: 0,0:11:29.08,0:11:40.32,yahei,,0,0,0,,它会持续播放六秒，然后到第九秒之前，这段音频将会逐渐淡出
Dialogue: 0,0:11:40.32,0:11:42.36,yahei,,0,0,0,,就是这样的magic！o(*￣▽￣*)ブ
Dialogue: 0,0:11:42.36,0:11:55.36,yahei,,0,0,0,,现在我们大概知道了它的原理和用法，接下来要做的就是将\N它应用到更大规模的项目中去了（通过引用的方法）
Dialogue: 0,0:11:55.36,0:12:01.32,yahei,,0,0,0,,现在回到了MainPage.xaml，然后我们需要找到GridView控件
Dialogue: 0,0:12:01.32,0:12:10.80,yahei,,0,0,0,,当我拖拽一个音效时，我可以不用创建图标或长时间保存就可以直接播放
Dialogue: 0,0:12:10.80,0:12:20.20,yahei,,0,0,0,,这也是一个很好的练习，让你能更好的完成拖拽，将内容储存到本地空间
Dialogue: 0,0:12:20.20,0:12:25.12,yahei,,0,0,0,,并在每一次用户打开程序的几秒内展示它
Dialogue: 0,0:12:25.28,0:12:30.52,yahei,,0,0,0,,不过我不会在这里详细的讲，那样就更像一个全功能的app了
Dialogue: 0,0:12:30.52,0:12:35.24,yahei,,0,0,0,,接下来我需要将AllowDrop为True
Dialogue: 0,0:12:35.24,0:12:39.52,yahei,,0,0,0,,没有它，就没有未来（误）
Dialogue: 0,0:12:39.52,0:12:45.84,yahei,,0,0,0,,然后我们需要处理Drop和DragOver事件
Dialogue: 0,0:12:45.84,0:12:51.72,yahei,,0,0,0,,设置好了之后，我要按F12并用鼠标选中SoundGridView_Drop
Dialogue: 0,0:12:51.72,0:13:13.84,yahei,,0,0,0,,接着我要复制粘贴所有之前项目中的内容，\N不过记得要修改一下，删去无效的，添加有效的
Dialogue: 0,0:13:13.84,0:13:19.60,yahei,,0,0,0,,比如这里不会用到MediaPlayerStoryboard，所以直接去掉就好
Dialogue: 0,0:13:19.60,0:13:27.20,yahei,,0,0,0,,我之前好像也没有说过创建marker（标记）的事，我在这里将注释都写好了\N（不过我在这里就要注释删掉啦！）
Dialogue: 0,0:13:27.20,0:13:45.76,yahei,,0,0,0,,我们可以在一个音频文件的特定位置标记一个marker，\N然后创建一个事件，只在每次回放或者播放至marker时触发
Dialogue: 0,0:13:45.92,0:13:49.72,yahei,,0,0,0,,也就是说，我可以在视频中做注释
Dialogue: 0,0:13:49.72,0:13:58.40,yahei,,0,0,0,,举个例子，我可以在三秒时可以弹出一个有信息的文本框，\N继续播放一段，可以再弹出一些其他内容
Dialogue: 0,0:13:58.52,0:14:06.32,yahei,,0,0,0,,我们可以通过这种方式建立闭合字幕系统（closed captioning style system）\N是不是花样很多而且很酷！只不过我暂时不讲这块哦！
Dialogue: 0,0:14:06.32,0:14:14.44,yahei,,0,0,0,,不过这种通过便笺应用来学习媒体元件特性的方法还是很有效哒！
Dialogue: 0,0:14:14.44,0:14:20.16,yahei,,0,0,0,,这里我要把名字改为MyMediaElement
Dialogue: 0,0:14:20.16,0:14:25.52,yahei,,0,0,0,,看起来这里有很多无法识别的引用，所以我要按control + "."来看一下
Dialogue: 0,0:14:25.52,0:14:32.96,yahei,,0,0,0,,看起来是因为这里没有async关键词而导致的问题
Dialogue: 0,0:14:32.96,0:14:42.08,yahei,,0,0,0,,我之前在win8.0 和8.1 都说过这部分内容了，所以在这里我不想再重复
Dialogue: 0,0:14:42.08,0:14:49.32,yahei,,0,0,0,,当每次在method signiture中看到await或者async关键词时（就像我这里用的这样）
Dialogue: 0,0:14:49.32,0:14:55.60,yahei,,0,0,0,,其实它表达的意思就是：“啊 我这有一个长时间运行的算法“
Dialogue: 0,0:14:55.60,0:15:07.56,yahei,,0,0,0,,所以与其让这个长时间运行的method在程序运行时封锁接下来所有的代码运行
Dialogue: 0,0:15:07.56,0:15:22.16,yahei,,0,0,0,,我可以让它自己一边玩去，这边来跑剩下的所有内容；\N而当这个算法运行完，会有通知并将所有部件熔化（magic！）
Dialogue: 0,0:15:22.16,0:15:35.72,yahei,,0,0,0,,基于封锁类别的不同，我们有两种不同的方法将asynchrony（异步）引入程序
Dialogue: 0,0:15:35.72,0:15:46.28,yahei,,0,0,0,,数学密集型运算可以导致封锁的发生，而非数学密集型的也可以
Dialogue: 0,0:15:46.28,0:15:51.20,yahei,,0,0,0,,因为其中包含了lag time（滞后时间）
Dialogue: 0,0:15:51.20,0:16:00.12,yahei,,0,0,0,,比如我在互联网上发出请求，这时如果程序中没有async或await关键词
Dialogue: 0,0:16:00.16,0:16:07.16,yahei,,0,0,0,,我的程序就会一直等（运行完长时间算法），也不会执行其他部件内容
Dialogue: 0,0:16:07.16,0:16:18.80,yahei,,0,0,0,,程序也不会对任何用户界面的改变或者用户输入\N做出反应，直到从远程web服务器得到了回应
Dialogue: 0,0:16:18.80,0:16:28.20,yahei,,0,0,0,,所以这中间并不牵扯到任何消耗时间的计算，就只是滞后时间
Dialogue: 0,0:16:28.20,0:16:38.20,yahei,,0,0,0,,所以async关键词能帮我们解决这种滞后问题
Dialogue: 0,0:16:38.24,0:16:51.32,yahei,,0,0,0,,虽然我不在这里详细讲，但是在UWP API中，经常会有可能耗时长的操作
Dialogue: 0,0:16:51.32,0:16:56.36,yahei,,0,0,0,,对电脑来说，半秒或一秒就算很长的啦
Dialogue: 0,0:16:56.36,0:17:06.36,yahei,,0,0,0,,当你每次觉得将会有磁盘或网络访问延迟而导致运行时间延长时
Dialogue: 0,0:17:06.36,0:17:15.48,yahei,,0,0,0,,就需要用到async或者await关键词来解决这个问题了\N希望这个有帮助啦
Dialogue: 0,0:17:15.65,0:17:28.28,yahei,,0,0,0,,当在代码中看到了await关键词，一定要知道在调用时需要用到async算法
Dialogue: 0,0:17:28.40,0:17:40.74,yahei,,0,0,0,,还有就是如果算法中含有async关键词，就像这里我们调\N用的GetStorageItemsAsync这个算法（UWP API类型）
Dialogue: 0,0:17:40.91,0:17:50.40,yahei,,0,0,0,,async将会要求你在算法中，在async关键词的基础上添加await关键词
Dialogue: 0,0:17:50.74,0:18:04.62,yahei,,0,0,0,,你可以在其他channel9或者我自己的网站上\N找到更多关于这部分的讲解，现在我就先说这么多吧
Dialogue: 0,0:18:04.62,0:18:06.62,yahei,,0,0,0,,还是回到这个例子来
Dialogue: 0,0:18:06.62,0:18:09.71,yahei,,0,0,0,,实际上现在我们在做的就是修改复制粘贴过来的代码
Dialogue: 0,0:18:09.71,0:18:19.71,yahei,,0,0,0,,比如这里的BitmapImage，我需要按control+"."\N运用Windows.UI.Xaml.Media.Imaging这个语句来修改
Dialogue: 0,0:18:19.71,0:18:32.45,yahei,,0,0,0,,啊不对视频这部分其实都不需要嘛\N直接删掉就好了
Dialogue: 0,0:18:32.45,0:18:42.05,yahei,,0,0,0,,这里的PathTextBox也不需要，直接删掉
Dialogue: 0,0:18:44.05,0:18:48.85,yahei,,0,0,0,,然后这里再添加一个“}”
Dialogue: 0,0:18:50.85,0:19:01.77,yahei,,0,0,0,,你们可能像我一样也需要在前面用using语句\N添加Storage folder和Application data
Dialogue: 0,0:19:01.77,0:19:09.65,yahei,,0,0,0,,我们还剩一点点就基本完成这节课要讲的内容了
Dialogue: 0,0:19:09.65,0:19:18.17,yahei,,0,0,0,,这里不会用到脚本（storyboard），所以在这里写\NMyMediaElement.Play()，直接播放音效
Dialogue: 0,0:19:18.17,0:19:25.37,yahei,,0,0,0,,接下来我需要用到DragOver这部分代码，所以我直接去复制粘贴过来
Dialogue: 0,0:19:25.37,0:19:46.34,yahei,,0,0,0,,其实我在代码中添加了很多注释，包括介绍拖拽操作\N和通过添加拖拽装饰器来实现自定义图片的文章
Dialogue: 0,0:19:46.34,0:19:52.57,yahei,,0,0,0,,这部分也不需要复制过去，所以直接删掉
Dialogue: 0,0:19:52.57,0:20:03.20,yahei,,0,0,0,,关于这个关键词的注释也暂时不需要，也删掉
Dialogue: 0,0:20:03.20,0:20:07.94,yahei,,0,0,0,,然后我们来跑一下看看怎么样
Dialogue: 0,0:20:08.11,0:20:17.94,yahei,,0,0,0,,先试试这个牛有没有效（吓死我）\N然后在将歌拖拽过来
Dialogue: 0,0:20:17.94,0:20:32.28,yahei,,0,0,0,,嗯，是没问题的（excited！）\N如果我们换一首之前的歌呢？
Dialogue: 0,0:20:32.28,0:20:40.05,yahei,,0,0,0,,啊哈哈哈来的好突然\N如果我们拖拽一张图片呢？
Dialogue: 0,0:20:40.05,0:20:44.97,yahei,,0,0,0,,什么都不会发生，直接被无视了呢
Dialogue: 0,0:20:44.97,0:20:55.14,yahei,,0,0,0,,还有一个很重要的问题是我们如何在移动设备上实现这个呢？\N我们又不能在手机啊什么的上进行拖拽
Dialogue: 0,0:20:55.14,0:21:04.22,yahei,,0,0,0,,啊还没有在这上面测试过，先随便试一下\N哈！没问题
Dialogue: 0,0:21:04.22,0:21:17.25,yahei,,0,0,0,,虽然我们能听到音效，但是拖拽并没有起作用，\N而是在这个特殊环境下直接被无视了
Dialogue: 0,0:21:17.25,0:21:24.68,yahei,,0,0,0,,还挺酷的，让我们离创造完整音版\N又近了一步，可以拖拽并自动播放
Dialogue: 0,0:21:24.68,0:21:33.94,yahei,,0,0,0,,其实我们可以直接双击在groove music里打开它\N除非win10不喜欢这样...（啊好尴尬）
Dialogue: 0,0:21:33.94,0:21:44.17,yahei,,0,0,0,,这节课的目的就是为了展示怎样在app中添加这一特性
Dialogue: 0,0:21:44.40,0:21:57.94,yahei,,0,0,0,,接下来 我们还要设置自动搜索栏和一些小的修改\N然后就要过渡到怎样将app上传到巨硬商店里
Dialogue: 0,0:21:57.94,0:22:02.91,yahei,,0,0,0,,下节课见啦！
Dialogue: 0,0:22:02.91,0:22:04.91,yahei,,0,0,0,,巨硬大法好！
