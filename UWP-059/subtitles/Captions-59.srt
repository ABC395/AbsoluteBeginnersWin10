1
00:00:06,520 --> 00:00:08,689
<v ->Okay, so the first thing we're going to do in this</v>

2
00:00:08,690 --> 00:00:12,349
video is actually get that....

3
00:00:12,350 --> 00:00:15,689
the images working for the plan that I came up with

4
00:00:15,690 --> 00:00:17,149
in the previous lesson.

5
00:00:17,150 --> 00:00:19,849
And then we're going to turn our attention to getting

6
00:00:19,850 --> 00:00:24,849
the actual GPS coordinates

7
00:00:25,120 --> 00:00:27,649
for our device.

8
00:00:27,650 --> 00:00:29,649
Whether we're running on desktop, or more likely

9
00:00:29,650 --> 00:00:34,649
scenario running on a phone or a smaller device.

10
00:00:36,220 --> 00:00:39,679
Okay, so to begin with, what I'm going to do is actually

11
00:00:39,680 --> 00:00:44,559
just copy this folder of weather assets, you can see that

12
00:00:44,560 --> 00:00:47,259
I have essentially a copy.

13
00:00:47,260 --> 00:00:51,409
I've used the names, the exact names that they used

14
00:00:51,410 --> 00:00:55,759
on their icon list

15
00:00:55,760 --> 00:00:59,859
and I just have a graphic designer I know create some

16
00:00:59,860 --> 00:01:02,439
cute weather icons,

17
00:01:02,440 --> 00:01:04,989
so that again, they're royalty free.

18
00:01:04,990 --> 00:01:08,619
And now I can use these in my app.

19
00:01:08,620 --> 00:01:12,219
So I'm just going to drag the weather folder up.

20
00:01:12,220 --> 00:01:15,589
Had that same issue we had last time, that pesky issue.

21
00:01:15,590 --> 00:01:19,219
So let's go ahead and select everything,

22
00:01:19,220 --> 00:01:21,849
drag and drop, it's going to say "Hey, it's already there."

23
00:01:21,850 --> 00:01:24,879
Yes, copy it, okay great.

24
00:01:24,880 --> 00:01:28,199
So now all I need to do...

25
00:01:30,720 --> 00:01:34,109
is I need to...

26
00:01:34,110 --> 00:01:38,909
instead of pulling these icons from OpenWeatherMap,

27
00:01:38,910 --> 00:01:42,919
instead what I'll do is just change this URL.

28
00:01:42,920 --> 00:01:46,589
Just get rid of that, and whenever you're going to

29
00:01:46,590 --> 00:01:51,549
access local resources and you need a URI,

30
00:01:51,550 --> 00:01:56,549
you use the prefix "ms-appx:" and then three forward

31
00:01:58,020 --> 00:02:00,349
slashes like so, okay?

32
00:02:00,350 --> 00:02:03,989
So that will say "Hey, look in the Assets folder, look in

33
00:02:03,990 --> 00:02:08,039
"the Weather sub-folder, and look for that...

34
00:02:09,720 --> 00:02:14,719
"three alpha numeric character

35
00:02:14,980 --> 00:02:17,609
"name for the file."

36
00:02:17,610 --> 00:02:20,789
And if I named everything correctly, and I think I did,

37
00:02:20,790 --> 00:02:24,319
then we should see different icons used.

38
00:02:24,320 --> 00:02:28,739
So let's go and run the application again.

39
00:02:30,250 --> 00:02:32,279
And let's go ahead and...

40
00:02:32,280 --> 00:02:35,149
hey, hey, how cool is that?

41
00:02:35,150 --> 00:02:37,129
Alright, so that was the easy part.

42
00:02:37,130 --> 00:02:42,129
Let's move on, and now let's talk about utilizing

43
00:02:42,550 --> 00:02:47,549
the location capability of the device

44
00:02:48,020 --> 00:02:49,549
that we're working with.

45
00:02:49,550 --> 00:02:54,549
So in order to utilize some sensor or some hardware

46
00:02:55,120 --> 00:02:58,719
feature of the platform you're running on,

47
00:02:58,720 --> 00:03:01,889
you have to declare a capability, and you do that in the

48
00:03:01,890 --> 00:03:04,349
Package.appxmanifest.

49
00:03:04,350 --> 00:03:08,589
So let's open it up and let's go to "Capabilities" and say

50
00:03:08,590 --> 00:03:11,219
"I want the location capability."

51
00:03:11,220 --> 00:03:13,649
And you'll notice how this manifests itself the very first

52
00:03:13,650 --> 00:03:16,549
time that we run the application here locally

53
00:03:16,550 --> 00:03:20,789
on my desktop, and then also the first time that we actually

54
00:03:20,790 --> 00:03:23,289
try to run it in a phone emulator, the message

55
00:03:23,290 --> 00:03:24,579
that we'll get.

56
00:03:24,580 --> 00:03:26,519
It will have to be approved by the end user

57
00:03:26,520 --> 00:03:31,019
before we can actually use it.

58
00:03:31,020 --> 00:03:36,019
Now there's a lot to using the features that I'm going to

59
00:03:36,890 --> 00:03:37,989
show you right now.

60
00:03:37,990 --> 00:03:42,989
However, what I recommend...

61
00:03:43,100 --> 00:03:48,099
is that you actually search for this article.

62
00:03:48,450 --> 00:03:52,789
I didn't create a shortcut, but just search for

63
00:03:52,790 --> 00:03:56,949
"Windows 10, Get Current Location."

64
00:03:56,950 --> 00:03:59,349
Alright, you should come to this page in the Windows

65
00:03:59,350 --> 00:04:01,109
Dev Center.

66
00:04:01,110 --> 00:04:06,089
And this will give you code that you can use to check

67
00:04:06,090 --> 00:04:10,419
the current status and whether you're going to be allowed to

68
00:04:10,420 --> 00:04:14,749
actually utilize that capability, and if not it'll report

69
00:04:14,750 --> 00:04:17,489
back that you cannot use it.

70
00:04:17,490 --> 00:04:21,189
So there's a lot of extra code in here that is really

71
00:04:21,190 --> 00:04:23,489
a safety net for your application.

72
00:04:23,490 --> 00:04:27,189
You can also respond on updates, so while the phone,

73
00:04:27,190 --> 00:04:29,649
while you currently have it and you're running,

74
00:04:29,650 --> 00:04:33,079
and you're on the move, you're driving,

75
00:04:33,080 --> 00:04:37,849
you may want the location to be updated

76
00:04:37,850 --> 00:04:39,949
in real time, and in which case you can implement

77
00:04:39,950 --> 00:04:42,449
all this additional code to make that happen.

78
00:04:42,450 --> 00:04:45,489
We're going to take the simplest possible scenario,

79
00:04:45,490 --> 00:04:48,919
and so some of what I'm going to write here in a moment

80
00:04:48,920 --> 00:04:53,919
is just taking from kind of this right here, and ignoring

81
00:04:54,820 --> 00:04:58,294
a lot of the complexity that would be needed

82
00:04:58,295 --> 00:05:01,519
for a more full featured application.

83
00:05:01,520 --> 00:05:04,019
So to make this work, what I'm going to do is actually

84
00:05:04,020 --> 00:05:08,589
add another class called the LocationManager.

85
00:05:08,590 --> 00:05:11,659
And it's going to abstract the way a lot of the complexity

86
00:05:11,660 --> 00:05:16,659
of working with the GPS or the location features

87
00:05:16,920 --> 00:05:19,819
of Windows 10.

88
00:05:19,820 --> 00:05:24,819
So I'm going to call this LocationManager.

89
00:05:25,250 --> 00:05:29,619
And we can set public class, and we're going to go ahead

90
00:05:29,620 --> 00:05:33,819
and create a public static.

91
00:05:35,380 --> 00:05:37,249
Let's call it "void" for the moment, but I know I'm going to

92
00:05:37,250 --> 00:05:42,249
return something in a moment called GetPosition().

93
00:05:47,330 --> 00:05:49,409
Great.

94
00:05:49,410 --> 00:05:52,889
And what I'm going to do is...

95
00:05:52,890 --> 00:05:56,349
Okay, so what we're going to do, let me get rid of the webcam

96
00:05:56,350 --> 00:06:00,519
here so you can see the whole screen, let me move this over,

97
00:06:00,520 --> 00:06:02,749
beause were going to use some heavy duty coding here.

98
00:06:02,750 --> 00:06:05,689
Okay, what we need to work with is something called

99
00:06:05,690 --> 00:06:08,489
the Geolocator, it's going to give us everything we need.

100
00:06:08,490 --> 00:06:11,519
Now unfortunately as you can see, Geolocator's not found.

101
00:06:11,520 --> 00:06:14,049
I'm going to hit Control+"." in order to add a using

102
00:06:14,050 --> 00:06:17,319
statement to Windows.Devices.Geolocation.

103
00:06:17,320 --> 00:06:22,319
Great, and there's a method called RequestAccessAsync.

104
00:06:23,720 --> 00:06:27,119
And what this will just do is say "Hey, can I get access to

105
00:06:27,120 --> 00:06:30,619
"the Geolocator? Will it give me a latitude, a longitude

106
00:06:30,620 --> 00:06:32,589
"if I actually ask for it?"

107
00:06:32,590 --> 00:06:37,019
So it's going to return back to me a status.

108
00:06:37,020 --> 00:06:40,149
So we're going to call this accessStatus.

109
00:06:40,150 --> 00:06:42,789
And we see the async keyword and so I know I'm going to have

110
00:06:42,790 --> 00:06:45,019
to wait the "await" there and I know that I'm going to have to

111
00:06:45,020 --> 00:06:48,009
add the async keyword here.

112
00:06:48,010 --> 00:06:52,119
And I know that I'm going to have to return something here,

113
00:06:52,120 --> 00:06:54,419
currently it's void, we'll come back to that

114
00:06:54,420 --> 00:06:56,479
in just a moment.

115
00:06:56,480 --> 00:06:59,949
Alright, so the only status that I'm really concerned about

116
00:06:59,950 --> 00:07:04,189
is there's a Geolocation status,

117
00:07:04,190 --> 00:07:08,319
GeolocationAccessStatus.Allowed.

118
00:07:08,320 --> 00:07:11,049
If it's denied or unspecified, then that means

119
00:07:11,050 --> 00:07:12,749
we're not going to have any luck.

120
00:07:12,750 --> 00:07:15,299
So, if...

121
00:07:17,220 --> 00:07:22,219
if the accessStatus is not equal to allow,

122
00:07:22,420 --> 00:07:23,689
then I'm going to

123
00:07:23,690 --> 00:07:27,289
throw new Exception. I probably should take more

124
00:07:27,290 --> 00:07:31,189
care here and create a custom Exception

125
00:07:31,190 --> 00:07:33,349
and be able to pass back what the issue is,

126
00:07:33,350 --> 00:07:36,879
but I'm just going to go ahead and croak, just have the

127
00:07:36,880 --> 00:07:38,449
application die.

128
00:07:38,450 --> 00:07:40,449
Again, that's something I need to come back and make

129
00:07:40,450 --> 00:07:43,689
a little more elegant and test that in the future.

130
00:07:43,690 --> 00:07:46,089
But assuming that everything is okay, then we're going to

131
00:07:46,090 --> 00:07:47,779
continue on here.

132
00:07:47,780 --> 00:07:51,319
And I'm going to get

133
00:07:51,320 --> 00:07:56,319
an access to an instance of the Geolocator, so let's just go

134
00:07:56,390 --> 00:08:01,389
var geolocator= new Geolocator.

135
00:08:01,660 --> 00:08:06,659
And I'm going to use

136
00:08:07,220 --> 00:08:12,219
the object initializer syntax to set

137
00:08:12,450 --> 00:08:15,019
the desired accuracy meters.

138
00:08:15,020 --> 00:08:17,619
Just going to set it to zero, meaning "Hey, give me

139
00:08:17,620 --> 00:08:19,789
"what you can."

140
00:08:19,790 --> 00:08:24,452
I could specify and say "Hey, I prefer if it was 1 meter

141
00:08:24,453 --> 00:08:27,452
"accuracy, 10 meters, 100 meters."

142
00:08:27,453 --> 00:08:32,452
But this will just set it to the default value which is

143
00:08:32,953 --> 00:08:35,422
"give me whatever you can give me."

144
00:08:35,423 --> 00:08:40,422
Now that I have all that work done, I'm going to get a position

145
00:08:41,453 --> 00:08:46,452
and I'm going to say geolocator.GetGeopositionAsync().

146
00:08:50,003 --> 00:08:54,192
And then I'm going to return that position.

147
00:08:54,193 --> 00:08:58,182
Now the position object will be of type...

148
00:08:59,423 --> 00:09:00,592
Geoposition.

149
00:09:00,593 --> 00:09:03,292
So there's a Geoposition object, let's go ahead and get

150
00:09:03,293 --> 00:09:06,052
rid of void.

151
00:09:06,053 --> 00:09:10,992
And what I need to do is to return

152
00:09:10,993 --> 00:09:14,842
a Task which is a promise

153
00:09:14,843 --> 00:09:19,842
that in the future, I promise to give you a Geoposition.

154
00:09:20,133 --> 00:09:24,602
It doesn't seem to like that, but I think...

155
00:09:26,053 --> 00:09:27,502
Let's see.

156
00:09:29,023 --> 00:09:30,922
Oh, right.

157
00:09:30,923 --> 00:09:33,192
Doesn't like it because I forgot the await keyword.

158
00:09:33,193 --> 00:09:34,942
There we go, great.

159
00:09:34,943 --> 00:09:37,022
So that should be all we need to do

160
00:09:37,023 --> 00:09:40,122
to get the correct position.

161
00:09:40,123 --> 00:09:43,222
Once we have that position...

162
00:09:43,223 --> 00:09:46,322
So let's go...

163
00:09:46,323 --> 00:09:51,322
Let's go "var position = " and we'll call the

164
00:09:52,053 --> 00:09:57,052
LocationManager.GetPosition().

165
00:09:57,853 --> 00:10:01,022
And I know that this too is await-able.

166
00:10:01,023 --> 00:10:03,892
So we'll hit "await."

167
00:10:03,893 --> 00:10:06,522
And now that we have that we should be able to do

168
00:10:06,523 --> 00:10:11,322
something like this, and the get weather, let's go...

169
00:10:11,323 --> 00:10:16,322
position.Coordinate.Latitude.

170
00:10:20,953 --> 00:10:25,952
And then position.Coordinate.Longitude.

171
00:10:27,223 --> 00:10:29,042
Now it's giving me some green squigglies, let's see

172
00:10:29,043 --> 00:10:32,852
what we got going on here.

173
00:10:32,853 --> 00:10:37,132
Oh it's obsolete, yeah, I ran into this before.

174
00:10:37,133 --> 00:10:40,552
The issue here is that they thought that it might be

175
00:10:40,553 --> 00:10:44,422
unavailable after Windows 8.1, but I was unavailable to find

176
00:10:44,423 --> 00:10:47,522
what they're replacing it with in 10.

177
00:10:47,523 --> 00:10:50,522
I didn't see anything, in fact I found this code,

178
00:10:50,523 --> 00:10:53,442
this very code, in the Windows 10 documentation.

179
00:10:53,443 --> 00:10:55,422
So it might be something they just haven't

180
00:10:55,423 --> 00:10:56,492
gotten to quite yet.

181
00:10:56,493 --> 00:10:59,252
You might have a completely different experience,

182
00:10:59,253 --> 00:11:03,222
just be aware that the direction I'm leading you here,

183
00:11:03,223 --> 00:11:07,142
this could be obsoleted in the future, and you may have to

184
00:11:07,143 --> 00:11:09,482
change that line of code, okay?

185
00:11:09,483 --> 00:11:11,892
But for now, this is what we got.

186
00:11:11,893 --> 00:11:14,352
Alright, so now let's just set a break point here

187
00:11:14,353 --> 00:11:18,872
because I want to see it actually get to the spot.

188
00:11:22,553 --> 00:11:26,792
Now notice when I click the "Get Weather" button, I asked

189
00:11:26,793 --> 00:11:31,792
for access to the location feature of

190
00:11:31,953 --> 00:11:33,852
my local computer,

191
00:11:33,853 --> 00:11:37,822
and it says "do you want it to access your location?"

192
00:11:37,823 --> 00:11:40,192
And I can go to the Settings app if I want to modify it

193
00:11:40,193 --> 00:11:43,152
later, but for now I'm going to say "Yes."

194
00:11:43,153 --> 00:11:45,492
So now that I've given it access, it's going to go ahead

195
00:11:45,493 --> 00:11:47,842
and try to figure out what the position is.

196
00:11:47,843 --> 00:11:49,852
I'm going to hover my mouse over, looks like I'm

197
00:11:49,853 --> 00:11:54,852
32.98, and longitude negative 96, so that looks good.

198
00:11:55,443 --> 00:11:56,922
Now let's go ahead and run it.

199
00:11:56,923 --> 00:12:00,082
Dallas County - 78 - light rain. Very good.

200
00:12:00,083 --> 00:12:04,292
Okay so, we're in good shape there, what I want to do is

201
00:12:04,293 --> 00:12:07,792
stop the video right here, and I want to come back to this

202
00:12:07,793 --> 00:12:10,792
because I want to test this on the phone, and the phone

203
00:12:10,793 --> 00:12:14,902
emulator and change my position around the country, and see

204
00:12:14,903 --> 00:12:18,192
what it would look like if I was running this from Seattle,

205
00:12:18,193 --> 00:12:20,682
or from New York, or from Chicago,

206
00:12:20,683 --> 00:12:23,522
and so I can really test that functionality out and the

207
00:12:23,523 --> 00:12:25,652
phone emulator has a great feature that will allow us

208
00:12:25,653 --> 00:12:26,552
to do that.

209
00:12:26,553 --> 00:12:29,052
We'll look at that in the very next video, okay?

210
00:12:29,053 --> 00:12:32,402
See you there, thanks.  

