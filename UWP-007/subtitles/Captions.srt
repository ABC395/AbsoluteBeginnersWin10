1
00:00:04,726 --> 00:00:08,320
<v ->Hi, I'm Bob Tabor with www.LearnVisualStudio.NET.</v>

2
00:00:08,321 --> 00:00:11,616
In this lesson we're going to talk about XAML schemas

3
00:00:11,617 --> 00:00:13,589
and namespace declarations.

4
00:00:13,590 --> 00:00:17,450
So, up to now, we've kind of avoided all of this ugly code

5
00:00:17,451 --> 00:00:20,415
here at the very top of our MainPage.xaml.

6
00:00:20,416 --> 00:00:21,738
Take a moment to look that over.

7
00:00:21,739 --> 00:00:23,097
And I want to remind you of some things

8
00:00:23,098 --> 00:00:25,933
that we said at the very outset, when we began talking

9
00:00:25,934 --> 00:00:27,000
about XAML.

10
00:00:27,001 --> 00:00:30,509
We said that XAML is actually just a flavor of XML,

11
00:00:30,510 --> 00:00:34,132
or rather that XAML uses XML

12
00:00:34,133 --> 00:00:36,063
to implement its syntax.

13
00:00:36,064 --> 00:00:38,686
And then secondly, we said, in order to use XML,

14
00:00:38,687 --> 00:00:42,515
or at least use it properly, you have to create schemas.

15
00:00:42,516 --> 00:00:45,395
And a schema's like a contract that both the producer

16
00:00:45,396 --> 00:00:49,502
of the XML and the consumer of the XML agree upon

17
00:00:49,503 --> 00:00:51,219
so that they can work together.

18
00:00:51,220 --> 00:00:55,539
So if that's the case, then where do we find the schema

19
00:00:55,540 --> 00:00:59,069
for XAML, for the page that we're currently working on?

20
00:00:59,070 --> 00:01:01,213
Well, actually, you might have guessed it,

21
00:01:01,214 --> 00:01:03,858
that's lines number three through seven, specifically,

22
00:01:03,859 --> 00:01:07,031
here at the very top of our file.

23
00:01:07,038 --> 00:01:09,127
All right, there are actually five schemas

24
00:01:09,128 --> 00:01:11,421
that the MainPage.xaml adheres to.

25
00:01:11,422 --> 00:01:14,439
It promises that it will follow the rules set forth

26
00:01:14,440 --> 00:01:16,487
in those schemas.

27
00:01:16,488 --> 00:01:20,412
Now, you can see that not only do we define

28
00:01:20,413 --> 00:01:24,380
the schema itself, but we give the schema a namespace.

29
00:01:24,381 --> 00:01:28,241
And a namespace is just like we would use in a C# namespace.

30
00:01:28,242 --> 00:01:30,396
So we say that, for example, if you take a look at

31
00:01:30,397 --> 00:01:33,649
this example that I have right here.

32
00:01:33,650 --> 00:01:37,243
I'm saying that for this particular attribute

33
00:01:37,244 --> 00:01:40,435
of this object,

34
00:01:40,436 --> 00:01:43,614
this attribute is defined in

35
00:01:43,615 --> 00:01:45,866
the namespace

36
00:01:45,867 --> 00:01:49,044
associated with the letter "x",

37
00:01:49,045 --> 00:01:52,423
and that adheres to a schema defined here

38
00:01:52,424 --> 00:01:54,110
at this URL.

39
00:01:54,111 --> 00:01:54,964
Okay?

40
00:01:54,965 --> 00:01:59,964
So the namespace, it allows us to say that a given element

41
00:02:00,008 --> 00:02:04,798
or a given attribute is defined at a given,

42
00:02:06,389 --> 00:02:09,139
at a given schema location.

43
00:02:09,140 --> 00:02:12,019
And before I forget, just so you know,

44
00:02:12,020 --> 00:02:15,037
you won't see this in the code that you create

45
00:02:15,038 --> 00:02:17,427
or that's automatically generated for you.

46
00:02:17,428 --> 00:02:20,520
I added this because this is the way that you used to

47
00:02:20,521 --> 00:02:24,466
have to reference the name attribute of any control.

48
00:02:24,467 --> 00:02:26,183
You don't have to do that any more because I think

49
00:02:26,184 --> 00:02:29,479
they changed the schema, and so now the name attribute

50
00:02:29,480 --> 00:02:31,687
is actually part of the default schema,

51
00:02:31,688 --> 00:02:34,471
not part of this schema that defines

52
00:02:34,472 --> 00:02:36,796
the rules of XAML in general, okay?

53
00:02:36,797 --> 00:02:38,588
Just wanted to make that clear.

54
00:02:38,589 --> 00:02:40,721
Now that means that everything else in this document,

55
00:02:40,722 --> 00:02:44,348
everything that doesn't have any prefix in front of it,

56
00:02:44,349 --> 00:02:49,233
whether it be the "x", the "local", the "d", the "mc", and so on,

57
00:02:49,234 --> 00:02:52,710
that means it adheres to this default namespace

58
00:02:52,711 --> 00:02:55,451
that's defined here at the very top.

59
00:02:55,452 --> 00:02:58,747
So while I have that copied to my clipboard,

60
00:02:58,748 --> 00:03:01,445
I'll just, actually just Control + C copy it.

61
00:03:01,446 --> 00:03:05,371
And then let me open up a new Internet Explorer

62
00:03:05,372 --> 00:03:08,101
and paste it in and try to see what that schema looks like.

63
00:03:08,102 --> 00:03:10,970
Wait a second, I got a 404 error.

64
00:03:10,971 --> 00:03:11,962
Yeah.

65
00:03:11,963 --> 00:03:15,285
You know, actually the schemas

66
00:03:15,286 --> 00:03:17,844
are not really defined here

67
00:03:17,845 --> 00:03:19,080
in the sense that you can go out

68
00:03:19,081 --> 00:03:20,746
and you can look at the schemas.

69
00:03:20,747 --> 00:03:24,159
It's more of just a unique place,

70
00:03:24,160 --> 00:03:26,857
just like namespaces are unique names,

71
00:03:26,858 --> 00:03:29,310
just intended to disambiguate,

72
00:03:29,311 --> 00:03:31,358
the same thing is true with these schemas.

73
00:03:31,359 --> 00:03:33,236
You can't go out and look at them,

74
00:03:33,237 --> 00:03:36,819
but Microsoft, when they implemented their software,

75
00:03:36,820 --> 00:03:38,814
both Visual Studio and Blend

76
00:03:38,815 --> 00:03:41,854
and the XAML parser and compiler,

77
00:03:41,855 --> 00:03:45,054
they adhered to these unwritten rules,

78
00:03:45,055 --> 00:03:46,270
or they might be written somewhere,

79
00:03:46,271 --> 00:03:47,677
but we can't get to them, at least not

80
00:03:47,678 --> 00:03:49,405
from this particular URL.

81
00:03:49,406 --> 00:03:52,360
In fact, it's not really even a URL, it's more of a URI,

82
00:03:52,361 --> 00:03:56,285
a Uniform Resource Indicator that's used as a namespace,

83
00:03:56,286 --> 00:03:59,890
in a sense, to define schemas that we can use

84
00:03:59,891 --> 00:04:01,490
in our document, okay?

85
00:04:01,491 --> 00:04:03,783
I realize that that's kinda confusing,

86
00:04:03,784 --> 00:04:06,642
but there's really just one main takeaway of all this.

87
00:04:06,643 --> 00:04:10,172
And that is this, that everything in our document

88
00:04:10,173 --> 00:04:13,191
does follow a namespace, or rather a schema,

89
00:04:13,192 --> 00:04:17,414
an XML schema that's defined in one of these places.

90
00:04:17,415 --> 00:04:19,836
Now you might wonder what each of these schemas

91
00:04:19,837 --> 00:04:21,862
are used for.

92
00:04:21,863 --> 00:04:23,441
For example, what's really the difference

93
00:04:23,442 --> 00:04:27,249
between this topmost schema and the second schema?

94
00:04:27,250 --> 00:04:30,502
Well, the difference is really subtle, but essentially

95
00:04:30,503 --> 00:04:33,965
this schema defines

96
00:04:35,890 --> 00:04:38,174
all of the UI elements,

97
00:04:38,175 --> 00:04:41,235
so the grid view, the button, and all their attributes

98
00:04:41,236 --> 00:04:45,629
are defined in the namespace that adheres

99
00:04:45,630 --> 00:04:48,925
to the schema here at this location.

100
00:04:48,926 --> 00:04:50,311
Okay, this URI.

101
00:04:50,312 --> 00:04:54,012
Whereas, just all of the rules for XAML in general

102
00:04:54,013 --> 00:04:58,529
are defined here at this schema, okay?

103
00:04:59,485 --> 00:05:02,599
Next up you see that we have a local namespace.

104
00:05:02,600 --> 00:05:05,404
And this is actually not a schema, per se.

105
00:05:05,405 --> 00:05:08,145
It's actually a namespace just like we would use

106
00:05:08,146 --> 00:05:11,121
a using statement, so that we can reference classes.

107
00:05:11,122 --> 00:05:14,907
So say for example I create a Car class in my application.

108
00:05:14,908 --> 00:05:18,875
I would be able to reference it inside of my XAML

109
00:05:18,876 --> 00:05:23,030
because as long as I prefix that

110
00:05:23,031 --> 00:05:25,259
with local:car,

111
00:05:25,260 --> 00:05:29,302
I'd be able to reference it here in my XAML document, okay?

112
00:05:29,303 --> 00:05:33,152
Now the last two are actually used by designers.

113
00:05:33,153 --> 00:05:34,904
So you can see that this actually says something

114
00:05:34,905 --> 00:05:36,920
about expression/blend/2008.

115
00:05:36,921 --> 00:05:40,546
These are actually used to represent the design view

116
00:05:40,547 --> 00:05:42,492
that you see here.

117
00:05:42,616 --> 00:05:44,983
And that you would see if you opened up Microsoft Blend

118
00:05:44,984 --> 00:05:46,519
like we'll do later on.

119
00:05:46,520 --> 00:05:50,839
However, if you look at this little

120
00:05:50,840 --> 00:05:54,529
line number 8, it said that these are ignorable.

121
00:05:54,530 --> 00:05:58,934
So at runtime, we'll just ignore this namespace.

122
00:05:58,935 --> 00:06:00,172
We don't need it.

123
00:06:00,173 --> 00:06:02,486
Furthermore, the only reason why this ignorable

124
00:06:02,487 --> 00:06:06,561
attribute exists is because of this namespace.

125
00:06:06,562 --> 00:06:10,784
This openxmlformats.org/markup-compatibility, okay?

126
00:06:10,785 --> 00:06:14,134
So, yeah, you know, now that you kind of understand

127
00:06:14,135 --> 00:06:16,267
what these do, you can completely forget this.

128
00:06:16,268 --> 00:06:19,819
They have no actionable result

129
00:06:19,820 --> 00:06:21,557
until we get a little bit deeper

130
00:06:21,558 --> 00:06:23,370
into our software development.

131
00:06:23,371 --> 00:06:27,925
Like we'll have to use these namespace prefixes,

132
00:06:27,926 --> 00:06:30,965
especially the local one, and we may have to create one

133
00:06:30,966 --> 00:06:32,725
when we get into working with data,

134
00:06:32,726 --> 00:06:35,306
when we get to working with custom classes

135
00:06:35,307 --> 00:06:37,322
that we've created that represent data.

136
00:06:37,323 --> 00:06:39,156
But that's a little bit a ways off.

137
00:06:39,157 --> 00:06:42,527
Just know that you should never ever modify this code here

138
00:06:42,528 --> 00:06:45,503
at the very top of a XAML file unless you have

139
00:06:45,504 --> 00:06:47,497
a really good reason to do so.

140
00:06:47,498 --> 00:06:49,705
And you almost never will, okay?

141
00:06:49,706 --> 00:06:53,747
The moral of the story is that, yes, XAML is XML.

142
00:06:53,748 --> 00:06:56,371
These are the schemas that it adheres to.

143
00:06:56,372 --> 00:06:58,483
Don't make any changes to this.

144
00:06:58,484 --> 00:07:01,662
But it's what makes everything kind of work together

145
00:07:01,663 --> 00:07:05,053
seamlessly between Visual Studio and the parser

146
00:07:05,054 --> 00:07:07,027
and the compiler, okay?

147
00:07:07,028 --> 00:07:09,768
So, that's about it for talking about

148
00:07:09,769 --> 00:07:11,965
the syntax of XAML, that's all I have.

149
00:07:11,966 --> 00:07:13,832
But we're going to move on to, now,

150
00:07:13,833 --> 00:07:17,543
actually using XAML for the design of our application

151
00:07:17,544 --> 00:07:20,978
and how do we lay out our application using XAML.

152
00:07:20,979 --> 00:07:22,578
We'll start that in the very next lesson.

153
00:07:22,579 --> 00:07:23,442
So we'll see you there.

154
00:07:23,443 --> 00:07:24,780
Thanks.  

