1
00:00:04,110 --> 00:00:06,109
<v ->Alright, so you know I like to</v>

2
00:00:06,110 --> 00:00:08,729
get started by tackling the most difficult part

3
00:00:08,730 --> 00:00:10,889
of an application first.

4
00:00:10,890 --> 00:00:13,249
And in this case there is going to be a couple

5
00:00:13,250 --> 00:00:15,809
of rough spots along the way that I foresee

6
00:00:15,810 --> 00:00:18,989
and so I want to start tackling those first.

7
00:00:18,990 --> 00:00:21,589
I think the first thing that we're going to run into

8
00:00:21,590 --> 00:00:23,670
is just we need to make sure that we know how

9
00:00:23,671 --> 00:00:25,789
to make calls out to the Marvel API

10
00:00:25,790 --> 00:00:27,530
and get information back.

11
00:00:27,531 --> 00:00:30,109
And then, deserialize anything we get back

12
00:00:30,110 --> 00:00:32,190
into instances of classes,

13
00:00:32,191 --> 00:00:35,050
that we can then work with inside of our application.

14
00:00:35,051 --> 00:00:37,309
So here are the general steps that you're going

15
00:00:37,310 --> 00:00:39,569
to need to go through to work with the Marvel API

16
00:00:39,570 --> 00:00:41,269
in your own application.

17
00:00:41,270 --> 00:00:43,009
First of all you're going to need to sign up

18
00:00:43,010 --> 00:00:46,240
for a developer account, and you can see that

19
00:00:46,241 --> 00:00:51,201
I am already at the URL developer.marvel.com

20
00:00:51,202 --> 00:00:55,623
and you'll see a link here to get started

21
00:00:55,624 --> 00:00:57,403
and it will walk you through the process

22
00:00:57,404 --> 00:00:58,783
of creating your own account.

23
00:00:58,784 --> 00:01:01,202
Very simple, they don't ask for very much.

24
00:01:01,203 --> 00:01:05,053
They just want to keep tabs on

25
00:01:05,054 --> 00:01:09,039
who's using their API and why, okay?

26
00:01:09,040 --> 00:01:10,559
Cause they do have some restrictions

27
00:01:10,560 --> 00:01:15,059
on monetizing and I would just want

28
00:01:15,060 --> 00:01:17,258
you to read that and make sure you know

29
00:01:17,259 --> 00:01:18,119
what you are getting yourself into

30
00:01:18,120 --> 00:01:21,519
if you ever think about utilizing the Marvel API

31
00:01:21,520 --> 00:01:23,479
in an application that you intend to distribute

32
00:01:23,480 --> 00:01:24,959
in the Microsoft store.

33
00:01:24,960 --> 00:01:26,359
So, I'm not a lawyer, I'll leave that

34
00:01:26,360 --> 00:01:28,598
between you and Marvel.

35
00:01:28,599 --> 00:01:32,439
However, after you create your developer account,

36
00:01:32,440 --> 00:01:34,379
the next thing that you are going to want to do,

37
00:01:34,380 --> 00:01:36,519
is then kinda learn how to use it,

38
00:01:36,520 --> 00:01:39,579
and fortunately the interactive documentation

39
00:01:39,580 --> 00:01:41,439
is awesome.

40
00:01:41,440 --> 00:01:45,079
You can take a look at the various ways

41
00:01:45,080 --> 00:01:48,019
in which the API can be called, and what you can retrieve.

42
00:01:48,020 --> 00:01:52,039
And so, for example, you can get a list of characters

43
00:01:52,040 --> 00:01:53,519
or just get a single character,

44
00:01:53,520 --> 00:01:56,218
or get all the comics for a single character,

45
00:01:56,219 --> 00:01:58,098
or all the events, or series, or stories

46
00:01:58,099 --> 00:01:59,498
for a single character.

47
00:01:59,499 --> 00:02:02,049
You can get a list of comics.

48
00:02:02,050 --> 00:02:04,319
You know, you can filter them in certain ways.

49
00:02:04,320 --> 00:02:06,599
You can get a specific comic and find

50
00:02:06,600 --> 00:02:07,999
all the characters in that comic,

51
00:02:08,000 --> 00:02:11,478
and those who created that comic,

52
00:02:11,479 --> 00:02:14,478
and the events and the stories associated with that comic.

53
00:02:14,479 --> 00:02:16,178
Okay, so you get the idea.

54
00:02:16,179 --> 00:02:17,858
Now, what you see here,

55
00:02:17,859 --> 00:02:21,559
this high level overview of API calls,

56
00:02:21,560 --> 00:02:25,478
you can click into one, and you can learn a little bit more

57
00:02:25,479 --> 00:02:29,119
about what it does and what it gives you back.

58
00:02:29,120 --> 00:02:33,258
In this case, these are the, I guess you could say,

59
00:02:33,259 --> 00:02:34,259
this is the model.

60
00:02:34,260 --> 00:02:37,058
The classes and the properties of information

61
00:02:37,059 --> 00:02:39,599
that will be returned to you whenever you make a call

62
00:02:39,600 --> 00:02:43,659
into this particular API, alright?

63
00:02:43,660 --> 00:02:47,479
And you can even see that they have

64
00:02:47,480 --> 00:02:51,479
an interactive environment were you can test out

65
00:02:51,480 --> 00:02:53,059
the input of parameters.

66
00:02:53,060 --> 00:02:56,079
So in this case, for example, show me all characters

67
00:02:56,080 --> 00:02:58,619
that start with the letters S, P,

68
00:02:58,620 --> 00:03:01,438
but only give me ten characters back, alright?

69
00:03:01,439 --> 00:03:03,699
And then you can click the Try it out button,

70
00:03:03,700 --> 00:03:05,738
it will show you the request URL,

71
00:03:05,739 --> 00:03:08,119
so in this case it's that URL

72
00:03:08,120 --> 00:03:10,339
that we saw at the very top here,

73
00:03:10,340 --> 00:03:14,539
of /v1/public/characters,

74
00:03:14,540 --> 00:03:16,069
you know, appended on

75
00:03:16,070 --> 00:03:18,782
to their API URL

76
00:03:18,783 --> 00:03:22,402
gateway.marvel.com:80/v1

77
00:03:22,403 --> 00:03:26,081
and then you pass in as query string parameters

78
00:03:26,082 --> 00:03:30,141
those filter key value pairs,

79
00:03:30,142 --> 00:03:34,241
so namestartswith=Sp, limit=10, and then,

80
00:03:34,242 --> 00:03:36,602
you also need to supply an API key

81
00:03:36,603 --> 00:03:39,222
and we'll talk about that in just a moment.

82
00:03:39,223 --> 00:03:42,082
And then, you get back this long passage

83
00:03:42,083 --> 00:03:46,542
of JSON, and you can see there's some information here

84
00:03:46,543 --> 00:03:50,202
at the very top, which is just, you know,

85
00:03:50,203 --> 00:03:53,742
that we succeeded, and it gave us a success code of 200.

86
00:03:53,743 --> 00:03:56,162
If it failed we 'd be able to see that there are

87
00:03:56,163 --> 00:04:00,982
various reasons why it could potentially have failed.

88
00:04:00,983 --> 00:04:04,001
Attribution text and HTML that has to be added

89
00:04:04,002 --> 00:04:07,082
if you're using this in the context

90
00:04:07,083 --> 00:04:11,322
of a web application, again, that's between you and Marvel,

91
00:04:11,323 --> 00:04:13,743
you need to kind of work through that

92
00:04:13,744 --> 00:04:16,323
and understand what the legalities of this are.

93
00:04:16,324 --> 00:04:18,483
But then, ultimately, we get to the

94
00:04:18,484 --> 00:04:20,063
actual results themselves.

95
00:04:20,064 --> 00:04:24,302
In this case, we have ten characters that have

96
00:04:24,303 --> 00:04:28,402
been brought back with a total of 33

97
00:04:28,403 --> 00:04:30,083
that match the criteria.

98
00:04:30,084 --> 00:04:32,482
So, we say just bring back the first ten

99
00:04:32,483 --> 00:04:34,423
that start with the letters S, P.

100
00:04:34,424 --> 00:04:36,762
And you can see here this first character

101
00:04:36,763 --> 00:04:40,742
Spacker Dave and doesn't have a description,

102
00:04:40,743 --> 00:04:43,602
it does have a thumbnail image.

103
00:04:43,603 --> 00:04:47,523
In some of cases the characters just don't have

104
00:04:47,524 --> 00:04:48,663
a lot of information.

105
00:04:48,664 --> 00:04:50,783
They might be a fairly obscure character.

106
00:04:50,784 --> 00:04:53,342
In other cases, there might be a lot more information

107
00:04:53,343 --> 00:04:55,043
about a given character.

108
00:04:55,044 --> 00:04:57,362
Let's see, here we go,

109
00:04:57,363 --> 00:04:59,243
Speed is a good example.

110
00:04:59,244 --> 00:05:01,702
Description: Tommy Shephard might be the son

111
00:05:01,703 --> 00:05:03,663
of Scarlet Witch and The Vision. Hmm.

112
00:05:03,664 --> 00:05:07,962
Alright, thumbnail; a resource URL so you can get more

113
00:05:07,963 --> 00:05:09,682
information about this specific character.

114
00:05:09,683 --> 00:05:11,143
Then the number of comics that

115
00:05:11,144 --> 00:05:13,803
this character was in.

116
00:05:13,804 --> 00:05:16,002
So we have a collection of two items,

117
00:05:16,003 --> 00:05:18,143
two individual comic books

118
00:05:18,144 --> 00:05:21,202
that this character was featured in,

119
00:05:21,203 --> 00:05:23,382
the number of series that they were featured in,

120
00:05:23,383 --> 00:05:25,342
the number of stories that they were involved in,

121
00:05:25,343 --> 00:05:27,243
and so on, and then we move on,

122
00:05:27,244 --> 00:05:31,413
to the next character Speed Demon and so on, okay?

123
00:05:31,414 --> 00:05:34,123
So first of all,

124
00:05:34,124 --> 00:05:37,222
let's talk about this API key.

125
00:05:37,223 --> 00:05:38,982
When you sign up for a developer account,

126
00:05:38,983 --> 00:05:41,802
you're going to be able to view

127
00:05:41,803 --> 00:05:44,842
this My Developer Account link here at the top,

128
00:05:44,843 --> 00:05:46,401
and you're going to be given

129
00:05:46,402 --> 00:05:48,502
a public key and a private key.

130
00:05:48,503 --> 00:05:52,241
And any time that you make a call to the API,

131
00:05:52,242 --> 00:05:54,021
you're going to need to pass along

132
00:05:54,022 --> 00:05:56,581
either just the public key,

133
00:05:56,582 --> 00:05:59,603
as you saw we did a moment ago,

134
00:05:59,604 --> 00:06:01,582
or, some combination of public and

135
00:06:01,583 --> 00:06:03,461
private key hashed together.

136
00:06:03,462 --> 00:06:05,362
We'll talk about that in just a moment.

137
00:06:05,363 --> 00:06:07,701
Now if you're using this in a web application,

138
00:06:07,702 --> 00:06:11,511
you need to list the URLs that you plan

139
00:06:11,512 --> 00:06:16,482
on calling the API from.

140
00:06:16,483 --> 00:06:21,051
In this case, developer.marvel.com is one place

141
00:06:21,052 --> 00:06:23,181
we were able to use our public key

142
00:06:23,182 --> 00:06:27,921
to make a call into and grab data from the Marvel API.

143
00:06:27,922 --> 00:06:31,631
However, if you go to the How To section,

144
00:06:31,632 --> 00:06:34,150
under Authorization,

145
00:06:34,151 --> 00:06:37,010
you'll learn that this only works only

146
00:06:37,011 --> 00:06:39,410
for client side applications.

147
00:06:39,411 --> 00:06:41,030
If you were to create what they call

148
00:06:41,031 --> 00:06:44,411
a Server-Side Application, or in our case,

149
00:06:44,412 --> 00:06:47,450
like a client application, you're going to need to

150
00:06:47,451 --> 00:06:49,890
supply a little bit more information to them.

151
00:06:49,891 --> 00:06:51,570
In fact, what you're going to have to do,

152
00:06:51,571 --> 00:06:53,570
is provide a hash.

153
00:06:53,571 --> 00:06:57,190
And a hash is listed here as a MD5 digest of

154
00:06:57,191 --> 00:06:59,650
the time-stamp parameter, your private key,

155
00:06:59,651 --> 00:07:01,291
and your public key.

156
00:07:01,292 --> 00:07:04,669
So, a hash is basically an algorithmic computation

157
00:07:04,670 --> 00:07:08,029
based on a public key and a private key

158
00:07:08,030 --> 00:07:11,188
that's known to only two parties.

159
00:07:11,189 --> 00:07:15,928
So, basically, there are many different hash algorithms

160
00:07:15,929 --> 00:07:19,168
that are available, and md5 is actually

161
00:07:19,169 --> 00:07:22,388
one of the weaker algorithms,

162
00:07:22,389 --> 00:07:26,008
but the stronger the algorithm, the more computational power

163
00:07:26,009 --> 00:07:28,768
it requires to actually calculate the hash,

164
00:07:28,769 --> 00:07:30,248
so there's a trade-off there.

165
00:07:30,249 --> 00:07:31,668
But essentially what this is going to do,

166
00:07:31,669 --> 00:07:35,908
is ensure that nobody has tampered with the request

167
00:07:35,909 --> 00:07:40,549
from the client to the server, and

168
00:07:40,550 --> 00:07:44,394
you essentially take, again, the time-stamp,

169
00:07:44,395 --> 00:07:46,645
the private key, the public key.

170
00:07:46,646 --> 00:07:49,484
You run this md5 algorithm

171
00:07:49,485 --> 00:07:52,294
against those values,

172
00:07:52,295 --> 00:07:53,590
and you'll come out with a hash

173
00:07:53,591 --> 00:07:55,911
that'll be appended at the end of every call

174
00:07:55,912 --> 00:07:58,751
that we're going to make into the Marvel API.

175
00:07:58,752 --> 00:08:00,420
So, we just have to figure out how to do that

176
00:08:00,421 --> 00:08:01,732
in C#, and fortunately,

177
00:08:01,733 --> 00:08:05,392
there are classes in the Universal Windows Platform

178
00:08:05,393 --> 00:08:08,412
that will help us to accomplish that.

179
00:08:08,413 --> 00:08:11,092
Okay, so what we're going to do is

180
00:08:11,093 --> 00:08:14,712
go back here and in the Interactive Documentation,

181
00:08:14,713 --> 00:08:17,131
let's talk for a moment about what it is

182
00:08:17,132 --> 00:08:19,241
that our application will accomplish.

183
00:08:19,242 --> 00:08:21,732
What we're going to do is create

184
00:08:21,733 --> 00:08:25,442
the hero explorer application, which will just,

185
00:08:25,443 --> 00:08:29,722
show us randomly a number of

186
00:08:29,723 --> 00:08:31,654
characters from the Marvel universe,

187
00:08:31,655 --> 00:08:33,374
and so that we can click though and learn

188
00:08:33,375 --> 00:08:34,513
a little bit more about them.

189
00:08:34,514 --> 00:08:36,713
I mean, I never knew that there was a character

190
00:08:36,714 --> 00:08:40,373
named, what was it, Speed a moment ago. (laughs)

191
00:08:40,374 --> 00:08:42,793
That's interesting, I mean, if you're into the

192
00:08:42,794 --> 00:08:45,434
folklore of Marvel and most of us geeks

193
00:08:45,435 --> 00:08:49,054
have been at some point in our lives, right?

194
00:08:49,055 --> 00:08:52,014
So what we want to do is just say hey,

195
00:08:52,015 --> 00:08:55,133
I just want ten random characters

196
00:08:55,134 --> 00:08:57,693
from the Marvel database.

197
00:08:57,694 --> 00:09:01,753
And, what I'm going to do is generate an offset,

198
00:09:01,754 --> 00:09:05,693
so I know that there are approximately 1500 characters

199
00:09:05,694 --> 00:09:07,253
in the database.

200
00:09:07,254 --> 00:09:10,874
What I'll do is just randomly get a number from one

201
00:09:10,875 --> 00:09:15,633
to 1500, or 1490, and say hey, that's my offset.

202
00:09:15,634 --> 00:09:20,375
So, a random number might be 520 for example,

203
00:09:20,376 --> 00:09:23,335
and I'll say, beginning at number 520,

204
00:09:23,336 --> 00:09:26,074
return me the next ten records

205
00:09:26,075 --> 00:09:29,095
from the Marvel database.

206
00:09:29,096 --> 00:09:32,235
So I typed in the limit: 10, and the offset: 520,

207
00:09:32,236 --> 00:09:35,494
and let's see what we get back as the result of that.

208
00:09:35,495 --> 00:09:37,834
They're in alphabetical order, whoops, okay,

209
00:09:37,835 --> 00:09:39,915
sometimes this will happen where you get

210
00:09:39,916 --> 00:09:43,975
a 500 response code.

211
00:09:43,976 --> 00:09:46,375
That's a problem on their side,

212
00:09:46,376 --> 00:09:48,674
so you can try to run it again,

213
00:09:48,675 --> 00:09:51,915
or maybe change up some of the properties here.

214
00:09:51,916 --> 00:09:55,314
Let's go with 350 instead and try that out.

215
00:09:56,416 --> 00:09:59,055
Okay, and that seemed to work.

216
00:09:59,056 --> 00:10:01,375
So, I'm not really sure what the issue was,

217
00:10:01,376 --> 00:10:03,214
but you gotta just kinda work through

218
00:10:03,215 --> 00:10:05,014
some of these things, right?

219
00:10:05,015 --> 00:10:08,035
So in this case, we start with the letter E,

220
00:10:08,036 --> 00:10:12,014
so we are looking at Earthquake, never knew that character.

221
00:10:12,015 --> 00:10:16,864
Then there's the one after that.

222
00:10:16,865 --> 00:10:20,679
It's Echo, alright, and then the one after that,

223
00:10:22,710 --> 00:10:26,209
Eddie Brock, okay, and we could go on and on from there.

224
00:10:26,210 --> 00:10:28,329
Alright, so what we want to do at this point,

225
00:10:28,330 --> 00:10:30,229
now that we kinda have a game plan of

226
00:10:30,230 --> 00:10:33,170
how we are going to make a call into the API,

227
00:10:33,171 --> 00:10:35,000
what we need to do is

228
00:10:35,001 --> 00:10:39,260
take the resulting JSON,

229
00:10:39,261 --> 00:10:41,820
and convert it into C# classes

230
00:10:41,821 --> 00:10:43,199
like we did for the weather app,

231
00:10:43,200 --> 00:10:46,201
when we made calls in the OpenWeatherMap API.

232
00:10:46,202 --> 00:10:50,881
So what I want to do is get a good representative

233
00:10:50,882 --> 00:10:55,480
set of JSON that I can use

234
00:10:55,481 --> 00:10:57,589
to get the JSON to C#.

235
00:10:57,590 --> 00:11:00,730
If we get some results that don't

236
00:11:00,731 --> 00:11:04,490
have a lot of results in them,

237
00:11:04,491 --> 00:11:07,290
then we may not get the right results

238
00:11:07,291 --> 00:11:09,510
when we go to JSON to C#,

239
00:11:09,511 --> 00:11:11,790
and so, I guess what I'm trying to say is

240
00:11:11,791 --> 00:11:13,849
what I want to do is just type in like,

241
00:11:13,850 --> 00:11:17,889
Spider, whoops, Spiderman,

242
00:11:17,890 --> 00:11:21,085
and say give me just two results.

243
00:11:21,086 --> 00:11:23,585
Now I know that they'll have,

244
00:11:23,586 --> 00:11:25,345
it'll be fully fleshed out, right?

245
00:11:25,346 --> 00:11:28,506
And that will give me a good representative JSON sample,

246
00:11:28,507 --> 00:11:31,745
that then hand over to JSON to C#.

247
00:11:31,746 --> 00:11:33,185
Now let's get rid of the offset,

248
00:11:33,186 --> 00:11:35,905
and let's go and try that out.

249
00:11:35,906 --> 00:11:39,515
And, yes, see I get the name, a great description,

250
00:11:39,516 --> 00:11:41,316
I get a good thumbnail.

251
00:11:41,317 --> 00:11:44,516
So there are all of this information is populated,

252
00:11:44,517 --> 00:11:48,155
and I feel really good about taking this snippet of code,

253
00:11:48,156 --> 00:11:52,176
of all of this that's been returned.

254
00:11:52,177 --> 00:11:54,535
Highlighting it all, getting it onto my clipboard

255
00:11:54,536 --> 00:11:55,876
by hitting ctrl + C,

256
00:11:55,877 --> 00:12:00,706
and then going to json2csharp.com and pasting in my JSON,

257
00:12:00,707 --> 00:12:03,365
and then clicking Generate.

258
00:12:03,366 --> 00:12:06,466
And, again I just want to emphasize the reason

259
00:12:06,467 --> 00:12:08,625
why I wanted to get good representative sample

260
00:12:08,626 --> 00:12:12,526
of JSON for a character that had a lot of data,

261
00:12:12,527 --> 00:12:17,485
was because when json2csharp.com looks at that JSON,

262
00:12:17,486 --> 00:12:18,945
it's going to parse it all out,

263
00:12:18,946 --> 00:12:21,806
and figure out the classes to create.

264
00:12:21,807 --> 00:12:24,125
And so if it's missing information,

265
00:12:24,126 --> 00:12:27,086
then it will use something generic like object,

266
00:12:27,087 --> 00:12:29,865
instead of character, you know,

267
00:12:29,866 --> 00:12:33,245
it may omit certain classes where there

268
00:12:33,246 --> 00:12:36,205
just wasn't data in the representative JSON

269
00:12:36,206 --> 00:12:37,405
that we pasted in.

270
00:12:37,406 --> 00:12:39,266
Okay, hopefully that makes sense.

271
00:12:39,267 --> 00:12:42,206
So I'm going to copy all of this to my clipboard,

272
00:12:42,207 --> 00:12:45,285
and then I'm going to open up Visual Studio

273
00:12:45,286 --> 00:12:49,255
and actually create a new project,

274
00:12:50,249 --> 00:12:52,068
called HeroExplorer.

275
00:13:02,179 --> 00:13:05,538
And, one of the first things I'll do

276
00:13:05,539 --> 00:13:07,669
is I'm going to add a new folder,

277
00:13:10,795 --> 00:13:12,744
called Models,

278
00:13:12,745 --> 00:13:15,554
and in that folder, I'm going to add new class

279
00:13:15,555 --> 00:13:19,314
that I'm going to call,

280
00:13:19,315 --> 00:13:20,774
well here's what I'm going to do,

281
00:13:20,775 --> 00:13:24,874
let's go back here to the Marvel Developer Portal

282
00:13:24,875 --> 00:13:26,374
and go to the very top,

283
00:13:26,375 --> 00:13:29,074
and we can see the response classes.

284
00:13:29,075 --> 00:13:31,974
At the topmost level there's something called

285
00:13:31,975 --> 00:13:34,893
the CharacterDataWrapper and

286
00:13:34,894 --> 00:13:36,694
CharacterDataContainer,

287
00:13:36,695 --> 00:13:40,654
So the CharacterDataWrapper will contain data,

288
00:13:40,655 --> 00:13:44,014
and the CharacterDataContainer will contain results

289
00:13:44,015 --> 00:13:46,954
which is an array of Character class.

290
00:13:46,955 --> 00:13:50,954
So let's call this CharacterDataWrapper.

291
00:13:57,225 --> 00:14:01,724
Alright, and what I want to do is paste in

292
00:14:01,725 --> 00:14:03,744
everything that I have on my clipboard

293
00:14:03,745 --> 00:14:06,366
from json2csharp

294
00:14:06,367 --> 00:14:08,166
and I'm going to look through this closely

295
00:14:08,167 --> 00:14:12,285
and look for these instances where we have,

296
00:14:12,286 --> 00:14:14,626
for example, something very generically named,

297
00:14:14,627 --> 00:14:16,346
like "item", for example.

298
00:14:16,347 --> 00:14:20,305
I see that "item" is actually a single instance

299
00:14:20,306 --> 00:14:22,586
from this Comics class.

300
00:14:22,587 --> 00:14:24,386
So what I might do is this instead,

301
00:14:24,387 --> 00:14:27,866
I might rename this from item,

302
00:14:27,867 --> 00:14:31,366
to comic, so now, the Comics class will

303
00:14:31,367 --> 00:14:33,366
have a list of items called,

304
00:14:33,367 --> 00:14:35,546
a list of items of type: Comic.

305
00:14:35,547 --> 00:14:37,226
Same thing would be true for Series,

306
00:14:37,227 --> 00:14:40,865
now unfortunately Series, the pluralization of that word

307
00:14:40,866 --> 00:14:43,256
is a little tricky.

308
00:14:43,257 --> 00:14:45,497
So I might say,

309
00:14:47,218 --> 00:14:49,368
I might call this a SeriesList,

310
00:14:49,369 --> 00:14:51,619
and then name this a Series,

311
00:14:54,929 --> 00:14:56,692
and then name this

312
00:14:56,693 --> 00:14:59,864
a SeriesList will have a list of Series.

313
00:14:59,865 --> 00:15:02,423
Alright, same thing with Stories.

314
00:15:02,424 --> 00:15:05,343
So this would become a Story class.

315
00:15:05,344 --> 00:15:10,343
And we would have a list of Story called

316
00:15:11,085 --> 00:15:13,084
items in our Stories class.

317
00:15:13,085 --> 00:15:15,744
And then, we'll do the same thing with Events,

318
00:15:15,745 --> 00:15:18,364
so we'll just name this Event,

319
00:15:18,365 --> 00:15:23,174
and then we'll have a list of Events called Items.

320
00:15:24,555 --> 00:15:28,354
But as we get down here to these bottom items,

321
00:15:28,355 --> 00:15:32,673
what I want to do is actually reuse the names of things

322
00:15:32,674 --> 00:15:34,294
that Marvel used.

323
00:15:34,295 --> 00:15:37,094
So, we're going to call this top-most object

324
00:15:37,095 --> 00:15:39,673
not a rootObject, but instead we are going to call it

325
00:15:39,674 --> 00:15:42,134
the CharacterDataWrapper, alright?

326
00:15:42,135 --> 00:15:47,134
And then we're also going to use CharacterDataContainer,

327
00:15:48,835 --> 00:15:50,474
here.

328
00:15:53,327 --> 00:15:57,642
And, furthermore, I can see that each

329
00:15:57,643 --> 00:16:00,803
of the individual characters is of type Character,

330
00:16:00,804 --> 00:16:02,243
so I'm going to change that as well.

331
00:16:02,244 --> 00:16:05,783
It's not a result, it's a Character, right?

332
00:16:05,784 --> 00:16:09,223
And so we should have a list of Character,

333
00:16:09,224 --> 00:16:13,343
and this should give us--

334
00:16:13,344 --> 00:16:16,323
change from data to CharacterDataContainer.

335
00:16:16,324 --> 00:16:18,223
Now I just want to kind of look through this

336
00:16:18,224 --> 00:16:19,602
and make sure everything is good,

337
00:16:19,603 --> 00:16:21,123
like this shouldn't be Series anymore,

338
00:16:21,124 --> 00:16:24,812
this should be SeriesList, alright?

339
00:16:24,813 --> 00:16:29,303
And I'll take my time and kind of work my way through this,

340
00:16:29,304 --> 00:16:31,098
and I need to be pretty careful here

341
00:16:31,099 --> 00:16:35,178
because once I go to deserialize some JSON

342
00:16:35,179 --> 00:16:38,338
into these classes, it needs to work.

343
00:16:38,339 --> 00:16:39,998
(laughs) It will be difficult to

344
00:16:39,999 --> 00:16:42,838
hunt down what's not working.

345
00:16:42,839 --> 00:16:45,838
Okay, so far so good.

346
00:16:45,839 --> 00:16:49,618
And, I think the next thing that we are going to do here,

347
00:16:49,619 --> 00:16:51,678
is, well actually let's stop,

348
00:16:51,679 --> 00:16:56,258
and what I want to do is actually create a class.

349
00:16:56,259 --> 00:16:59,328
So here, let me just set this top-most level.

350
00:16:59,329 --> 00:17:02,666
Add a new class and, I need a way to access

351
00:17:02,667 --> 00:17:05,446
the Marvel API progammatically

352
00:17:05,447 --> 00:17:08,646
and so what I am going to do is create

353
00:17:08,647 --> 00:17:12,886
a MarvelFacade,

354
00:17:12,887 --> 00:17:15,047
and facade is a special name

355
00:17:15,048 --> 00:17:18,347
in software development that

356
00:17:18,348 --> 00:17:22,686
is a design pattern for creating a layer of code

357
00:17:22,687 --> 00:17:26,467
over a dependency that you don't have control over.

358
00:17:26,468 --> 00:17:28,547
So we want to create a nice friendly way to

359
00:17:28,548 --> 00:17:31,886
call into the Marvel API from C#,

360
00:17:31,887 --> 00:17:34,346
and behind the scenes the MarvelFacade will

361
00:17:34,347 --> 00:17:38,677
be delegated the responsibility of going out

362
00:17:38,678 --> 00:17:43,156
retrieving results, parsing them, putting them into

363
00:17:43,157 --> 00:17:47,746
our model class and then delivering them back, alright?

364
00:17:47,747 --> 00:17:50,307
And so, the MarvelFacade will also

365
00:17:50,308 --> 00:17:53,707
have private helper methods to create,

366
00:17:53,708 --> 00:17:57,807
construct that URL that will wind up passing into

367
00:17:57,808 --> 00:18:01,586
Marvel, that will include not only the API call itself

368
00:18:01,587 --> 00:18:04,946
plus any filtering parameters, but then also

369
00:18:04,947 --> 00:18:09,507
it'll contain the MD5 hash that we need to pass along

370
00:18:09,508 --> 00:18:14,147
with the public and, private keys,

371
00:18:14,148 --> 00:18:15,846
and then also the time-stamp.

372
00:18:15,847 --> 00:18:20,566
Alright, so let's make this a public static--

373
00:18:20,567 --> 00:18:22,706
well, there let's make it a public class,

374
00:18:22,707 --> 00:18:25,766
and then we'll create a single method

375
00:18:25,767 --> 00:18:30,228
called public static void for now,

376
00:18:30,229 --> 00:18:34,807
GetCharacterList(), alright.

377
00:18:34,808 --> 00:18:39,757
And I know i'm going to need to make a call into

378
00:18:39,758 --> 00:18:44,369
HTTPClient, so I'm going

379
00:18:44,370 --> 00:18:46,688
to add that to my project

380
00:18:46,689 --> 00:18:50,168
by going into the Manage NuGet Packages.

381
00:18:50,169 --> 00:18:54,028
And I'm going to search for--

382
00:18:54,029 --> 00:18:58,269
what am I searching for here? HTTPClient.

383
00:18:58,270 --> 00:18:59,429
Alright.

384
00:18:59,430 --> 00:19:02,099
And we'll go ahead and install that.

385
00:19:07,149 --> 00:19:11,528
Alright, we're good.

386
00:19:11,529 --> 00:19:13,729
And, I think that's all that I'm going to do,

387
00:19:13,730 --> 00:19:16,969
just to kind of keep these videos kind of scoped,

388
00:19:16,970 --> 00:19:19,989
small, and not too long.

389
00:19:19,990 --> 00:19:23,729
So, let's stop right here and in the next video,

390
00:19:23,730 --> 00:19:28,248
we're going to actually make a call out to Marvel

391
00:19:28,249 --> 00:19:32,408
and grab characters in JSON and then,

392
00:19:32,409 --> 00:19:36,828
deserialize them into our CharacterDataWrapper model.

393
00:19:36,829 --> 00:19:39,336
Alright, so we'll see you in the next video.  

