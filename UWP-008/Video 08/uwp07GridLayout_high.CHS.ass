[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Last Style Storage: Default
Audio File: uwp07GridLayout_high.mp4
Video File: uwp07GridLayout_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.250000
Scroll Position: 52
Active Line: 54
Video Position: 8050

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: my_style,Arial,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.62,my_style,,0,0,0,,网格布局控件\N\N翻译：Kinraod  校对：???
Dialogue: 0,0:00:05.62,0:00:09.70,my_style,,0,0,0,,嗨我是来自www.LearnVisualStudio.NET的Bob Tabor
Dialogue: 0,0:00:09.70,0:00:12.24,my_style,,0,0,0,,这节课我要开始讲Layout（布局）
Dialogue: 0,0:00:12.24,0:00:19.92,my_style,,0,0,0,,也就是将各种视觉元素在软件UI中定位的过程
Dialogue: 0,0:00:20.18,0:00:25.30,my_style,,0,0,0,,有许多XAML控件为布局而生
Dialogue: 0,0:00:25.42,0:00:28.48,my_style,,0,0,0,,我会在本系列教程里讲到那些用得比较多的
Dialogue: 0,0:00:28.48,0:00:31.94,my_style,,0,0,0,,在Win10以前，布局非常简单
Dialogue: 0,0:00:31.94,0:00:37.26,my_style,,0,0,0,,因为你只需要为固定的窗体大小布局
Dialogue: 0,0:00:37.26,0:00:40.30,my_style,,0,0,0,,比如像手机或桌面端这样的独立硬件
Dialogue: 0,0:00:40.30,0:00:45.46,my_style,,0,0,0,,然而当我们把这套用于做（基于所运行设备的）自适应缩放布局时
Dialogue: 0,0:00:45.46,0:00:50.14,my_style,,0,0,0,,就开始遇到困难了
Dialogue: 0,0:00:50.14,0:00:55.82,my_style,,0,0,0,,这就是在Windows平台上开发App的一个新的重要特性
Dialogue: 0,0:00:56.10,0:00:58.60,my_style,,0,0,0,,我们先从最简单的开始讲
Dialogue: 0,0:00:58.60,0:01:01.78,my_style,,0,0,0,,然后在后续课程中慢慢接触更有难度的东西
Dialogue: 0,0:01:02.02,0:01:04.36,my_style,,0,0,0,,正式开讲之前我还想说一点
Dialogue: 0,0:01:04.38,0:01:08.44,my_style,,0,0,0,,因为XAML控件是为布局服务的
Dialogue: 0,0:01:08.74,0:01:11.74,my_style,,0,0,0,,所以几乎所有控件都有一个Content Property(内容属性)
Dialogue: 0,0:01:11.76,0:01:15.08,my_style,,0,0,0,,比如Button(按钮)控件就有一个内容属性
Dialogue: 0,0:01:15.08,0:01:20.34,my_style,,0,0,0,,同时这个内容属性只能被设置为另一个对象的实例
Dialogue: 0,0:01:20.34,0:01:26.26,my_style,,0,0,0,,换句话说……呃我先复制粘贴一个TextBlock(文本块)到这
Dialogue: 0,0:01:26.58,0:01:36.62,my_style,,0,0,0,,我可以在这用文本块的属性创建一个按钮
Dialogue: 0,0:01:36.62,0:01:41.60,my_style,,0,0,0,,然后我又加了一个Image(图像)控件在这个按钮控件里
Dialogue: 0,0:01:41.60,0:01:47.96,my_style,,0,0,0,,但当我尝试把多于一个控件放进内容属性里时就会有这条提示：
Dialogue: 0,0:01:47.96,0:01:51.22,my_style,,0,0,0,,“内容属性只能被设置一次”
Dialogue: 0,0:01:51.36,0:01:56.52,my_style,,0,0,0,,然而布局控件本应容纳多个控件
Dialogue: 0,0:01:56.52,0:02:00.00,my_style,,0,0,0,,所以结果就是它们都没有内容属性
Dialogue: 0,0:02:00.00,0:02:03.06,my_style,,0,0,0,,它们一般由一个子属性来代替
Dialogue: 0,0:02:03.06,0:02:10.78,my_style,,0,0,0,,这是一种能容纳XAML控件的特殊集合类，称为‘UI元素集合’
Dialogue: 0,0:02:11.06,0:02:18.10,my_style,,0,0,0,,当我们把新的XAML控件实例添加进布局控件定义时
Dialogue: 0,0:02:18.10,0:02:23.08,my_style,,0,0,0,,实际上是在调用布局控件的'添加'方法
Dialogue: 0,0:02:23.10,0:02:26.46,my_style,,0,0,0,,它们属于UI元素集合或者说集合属性
Dialogue: 0,0:02:26.46,0:02:29.92,my_style,,0,0,0,,所以再强调一次，XAML有很多高明之处
Dialogue: 0,0:02:29.92,0:02:36.38,my_style,,0,0,0,,这使得XAML可以根据代码风格推断我们的意图，从而使代码简洁明了
Dialogue: 0,0:02:36.72,0:02:40.30,my_style,,0,0,0,,好了 那么我们从Grid(网格)控件开始这一课
Dialogue: 0,0:02:40.30,0:02:45.32,my_style,,0,0,0,,像所有的网格一样，你可以通过定义行和列来创建网格控件
Dialogue: 0,0:02:45.32,0:02:53.50,my_style,,0,0,0,,你App里用到的每个控件都能指定自己被放在哪行哪列
Dialogue: 0,0:02:53.70,0:02:59.08,my_style,,0,0,0,,当你用初始模板创建新App时不会有多少引导
Dialogue: 0,0:02:59.08,0:03:00.40,my_style,,0,0,0,,就像你刚才看到的那样
Dialogue: 0,0:03:00.40,0:03:01.86,my_style,,0,0,0,,我先删掉这段...
Dialogue: 0,0:03:01.86,0:03:04.98,my_style,,0,0,0,,一开始你只有这么点儿东西
Dialogue: 0,0:03:04.98,0:03:08.94,my_style,,0,0,0,,只有一个找不到行列定义的空网格
Dialogue: 0,0:03:09.04,0:03:15.52,my_style,,0,0,0,,但默认情况下 总有一个行定义和一个列定义
Dialogue: 0,0:03:15.52,0:03:18.62,my_style,,0,0,0,,即使没有在XAML中显式定义它们
Dialogue: 0,0:03:18.62,0:03:28.36,my_style,,0,0,0,,它们定义出的单元格占据了当前网格控件中的所有空间
Dialogue: 0,0:03:28.36,0:03:38.64,my_style,,0,0,0,,在"Grid"和"/Grid"之间的元素就被放置在这个隐式定义的单元格中
Dialogue: 0,0:03:39.18,0:03:43.60,my_style,,0,0,0,,我们来示范性地做个有两行的网格控件
Dialogue: 0,0:03:43.60,0:03:48.98,my_style,,0,0,0,,来介绍两种创建行并设置其高度的方法
Dialogue: 0,0:03:48.98,0:03:52.20,my_style,,0,0,0,,呃...实际上我早就做好了这个
Dialogue: 0,0:03:52.20,0:03:56.40,my_style,,0,0,0,,你们可以到Row Definition项目下打开它然后跟着做
Dialogue: 0,0:03:56.54,0:03:59.50,my_style,,0,0,0,,或者粗暴点直接把这段代码打上去
Dialogue: 0,0:03:59.86,0:04:04.12,my_style,,0,0,0,,我希望你注意到这儿有两个矩形
Dialogue: 0,0:04:04.12,0:04:07.70,my_style,,0,0,0,,上面有一个，下面有一个
Dialogue: 0,0:04:07.84,0:04:13.50,my_style,,0,0,0,,它们是通过这儿的行定义对象来定义的
Dialogue: 0,0:04:13.76,0:04:21.18,my_style,,0,0,0,,在网格控件里有两个通过属性元素语法定义的行定义集合
Dialogue: 0,0:04:21.36,0:04:26.00,my_style,,0,0,0,,同时有定义他们高度属性的行定义实例
Dialogue: 0,0:04:26.26,0:04:29.44,my_style,,0,0,0,,在这儿第一个的高度属性设置为'Auto'
Dialogue: 0,0:04:29.44,0:04:33.50,my_style,,0,0,0,,第二个行定义对象高度设置为'*'
Dialogue: 0,0:04:33.82,0:04:36.26,my_style,,0,0,0,,这里有两个矩形对象
Dialogue: 0,0:04:36.26,0:04:43.54,my_style,,0,0,0,,注意一下 我们在这儿设置矩形放在哪行
Dialogue: 0,0:04:43.54,0:04:52.10,my_style,,0,0,0,,它想被放到行0里 呐我们看最上面一行是行0
Dialogue: 0,0:04:52.20,0:05:01.86,my_style,,0,0,0,,然后第二个矩形想被放到行1里 就是这行
Dialogue: 0,0:05:02.56,0:05:07.78,my_style,,0,0,0,,嗯我们看到如何把这俩矩形放置到不同的行中
Dialogue: 0,0:05:07.78,0:05:16.84,my_style,,0,0,0,,和如何用以0为基底的计数制来使用行和列
Dialogue: 0,0:05:16.84,0:05:21.64,my_style,,0,0,0,,第二个重点是这个奇怪的语法'Grid.Row'
Dialogue: 0,0:05:21.64,0:05:26.26,my_style,,0,0,0,,'Grid.Row'也可以是'Grid.Column'
Dialogue: 0,0:05:26.26,0:05:29.44,my_style,,0,0,0,,我们称之为Attached Properties(附属属性)
Dialogue: 0,0:05:29.62,0:05:38.44,my_style,,0,0,0,,附属属性允许对象(本例中是矩形)通过指定属性的值
Dialogue: 0,0:05:38.44,0:05:42.80,my_style,,0,0,0,,(这个例子中是行属性但是应用到列属性上是一样的)
Dialogue: 0,0:05:42.98,0:05:48.62,my_style,,0,0,0,,来指定它的本身类结构中没有定义的属性的值
Dialogue: 0,0:05:48.62,0:05:54.68,my_style,,0,0,0,,所以在矩形定义里没有Grid.Row属性或者行属性
Dialogue: 0,0:05:54.68,0:05:57.66,my_style,,0,0,0,,这些都是在网格对象里被定义的
Dialogue: 0,0:05:58.20,0:06:01.18,my_style,,0,0,0,,至于为什么附属属性存在嘛
Dialogue: 0,0:06:01.28,0:06:06.72,my_style,,0,0,0,,我现在不打算在XAML入门教程里谈这种高难度问题
Dialogue: 0,0:06:06.72,0:06:08.38,my_style,,0,0,0,,我准备跳过这个问题
Dialogue: 0,0:06:08.38,0:06:11.04,my_style,,0,0,0,,如果你想更深入地了解XAML核心机制
Dialogue: 0,0:06:11.04,0:06:20.36,my_style,,0,0,0,,那就去MSDN搜‘Attached Properties’以及相关的'Dependency Properties'主题
Dialogue: 0,0:06:20.36,0:06:24.60,my_style,,0,0,0,,一般来说 附属属性可以让XAML更简单
Dialogue: 0,0:06:24.60,0:06:29.88,my_style,,0,0,0,,我们还是别管这个问题了 课后自己去浏览相关主题吧
Dialogue: 0,0:06:29.88,0:06:34.80,my_style,,0,0,0,,我希望你在这个例子中注意的第三点是两种不同的行高
Dialogue: 0,0:06:34.80,0:06:38.66,my_style,,0,0,0,,第一个高度我们设置为'Auto' 第二个设置为'*'
Dialogue: 0,0:06:38.96,0:06:45.54,my_style,,0,0,0,,有三种语法可以用来确定行和列的大小
Dialogue: 0,0:06:45.54,0:06:48.34,my_style,,0,0,0,,我故意用了'Persuaing'这个词(爆伯这真的是个词吗词典都翻不到)
Dialogue: 0,0:06:48.34,0:06:52.02,my_style,,0,0,0,,在XAML布局中，高和宽是相关联的
Dialogue: 0,0:06:52.02,0:06:54.74,my_style,,0,0,0,,它们会被许多因素影响
Dialogue: 0,0:06:54.74,0:06:59.98,my_style,,0,0,0,,布局引擎和运行库会综合考虑这些影响因素
Dialogue: 0,0:06:59.98,0:07:06.64,my_style,,0,0,0,,以确定元素在页面上的实际布局位置
Dialogue: 0,0:07:06.82,0:07:17.26,my_style,,0,0,0,,举个例子，'Auto'表示行高需要足够高以容纳放置在此行里的控件
Dialogue: 0,0:07:17.30,0:07:24.48,my_style,,0,0,0,,如果最高的控件... 额这个例子里的矩形高被明确设定为100像素
Dialogue: 0,0:07:24.48,0:07:32.26,my_style,,0,0,0,,如果最高的边有100像素 那么这就是此行的实际高度 100像素
Dialogue: 0,0:07:32.26,0:07:35.66,my_style,,0,0,0,,如果我们把它改成50像素
Dialogue: 0,0:07:35.66,0:07:41.84,my_style,,0,0,0,,可以看到行高变成了50像素
Dialogue: 0,0:07:41.84,0:07:43.16,my_style,,0,0,0,,我们还是把它改回100...
Dialogue: 0,0:07:45.42,0:07:52.70,my_style,,0,0,0,,所以'Auto'意思是高度与行内控件相关联
Dialogue: 0,0:07:52.70,0:07:55.68,my_style,,0,0,0,,对于行和列或者不管其他什么鬼来说都是一样的
Dialogue: 0,0:07:56.24,0:08:01.02,my_style,,0,0,0,,第二种 这个'*'也叫做Star Sizing\N(用星号确定尺寸大小-简称'星号标尺')
Dialogue: 0,0:08:01.02,0:08:07.46,my_style,,0,0,0,,意思是行高会占据所有空余可用的高度
Dialogue: 0,0:08:07.70,0:08:11.48,my_style,,0,0,0,,来看个如何使用星号标尺的例子
Dialogue: 0,0:08:11.48,0:08:20.04,my_style,,0,0,0,,我在面板上新建了有三个行的项目 额...用了星号标尺
Dialogue: 0,0:08:22.88,0:08:31.86,my_style,,0,0,0,,可以看到 我们像这样定义了三个行
Dialogue: 0,0:08:32.20,0:08:38.76,my_style,,0,0,0,,注意 在每个行高的'*'前都有数字
Dialogue: 0,0:08:39.34,0:08:45.20,my_style,,0,0,0,,这行在说'给我一份空间'
Dialogue: 0,0:08:45.20,0:08:47.50,my_style,,0,0,0,,这行说'给我两份空间'
Dialogue: 0,0:08:47.50,0:08:50.66,my_style,,0,0,0,,这行说'给我三份空间’
Dialogue: 0,0:08:50.76,0:08:54.04,my_style,,0,0,0,,三行的加起来是六份
Dialogue: 0,0:08:54.04,0:09:01.06,my_style,,0,0,0,,所以每个'*'等于1/6的当前可用高度
Dialogue: 0,0:09:01.06,0:09:08.88,my_style,,0,0,0,,因此在这个例子里'3*'就代表了一半的可用高度
Dialogue: 0,0:09:09.02,0:09:13.00,my_style,,0,0,0,,你看 一半的可用高度
Dialogue: 0,0:09:13.46,0:09:16.60,my_style,,0,0,0,,我希望你注意下左手边
Dialogue: 0,0:09:16.60,0:09:21.36,my_style,,0,0,0,,这儿有许多可视化工具用来改变控件尺寸
Dialogue: 0,0:09:21.54,0:09:26.68,my_style,,0,0,0,,比如可以从星号标尺改成自动标尺或像素标尺
Dialogue: 0,0:09:26.82,0:09:33.86,my_style,,0,0,0,,还可以像这样在这儿直接输入确定值来设置高度属性
Dialogue: 0,0:09:35.24,0:09:37.74,my_style,,0,0,0,,除了自动标尺和星号标尺
Dialogue: 0,0:09:37.74,0:09:42.26,my_style,,0,0,0,,你还可以用Margin(余量)来按像素确定宽和高
Dialogue: 0,0:09:42.46,0:09:45.60,my_style,,0,0,0,,事实上 当只有数字的时候
Dialogue: 0,0:09:45.60,0:09:49.64,my_style,,0,0,0,,数字就代表了那么多像素的宽或者高
Dialogue: 0,0:09:49.64,0:09:56.94,my_style,,0,0,0,,但一般来说在布局中使用固定像素确定宽和高并不合适
Dialogue: 0,0:09:56.94,0:10:02.28,my_style,,0,0,0,,因为在不同尺寸的屏幕上它会变大或变小
Dialogue: 0,0:10:02.28,0:10:10.44,my_style,,0,0,0,,毕竟有许多不同型号的手机、平板和桌面端（对应着不同的窗体）
Dialogue: 0,0:10:10.54,0:10:15.20,my_style,,0,0,0,,因此不应该确定固定的数字
Dialogue: 0,0:10:15.20,0:10:19.74,my_style,,0,0,0,,不然布局在不同界面上就会看着不对劲
Dialogue: 0,0:10:19.74,0:10:25.16,my_style,,0,0,0,,因此 推荐你在布局时使用关联布局比如自动标尺和星号标尺
Dialogue: 0,0:10:25.42,0:10:29.84,my_style,,0,0,0,,这个例子里还有另一点需要你注意
Dialogue: 0,0:10:29.84,0:10:34.32,my_style,,0,0,0,,在XAML控件中 宽和高假定为100%
Dialogue: 0,0:10:34.32,0:10:36.84,my_style,,0,0,0,,除非有别的明确定义（特别是对矩形而言）
Dialogue: 0,0:10:36.84,0:10:39.90,my_style,,0,0,0,,这对很多不同控件都成立
Dialogue: 0,0:10:39.90,0:10:43.42,my_style,,0,0,0,,但也不是所有控件 比如按钮控件就不遵循这个规则
Dialogue: 0,0:10:43.42,0:10:53.92,my_style,,0,0,0,,对于矩形和图形控件而言 它们会占据100%的可用宽高
Dialogue: 0,0:10:54.24,0:10:59.04,my_style,,0,0,0,,还需要指出的一点是 网格可以拥有一个集合的列定义
Dialogue: 0,0:10:59.20,0:11:02.84,my_style,,0,0,0,,呃再给你看个例子...这里
Dialogue: 0,0:11:03.50,0:11:09.28,my_style,,0,0,0,,这里有个3×3的网格 3个行定义
Dialogue: 0,0:11:09.28,0:11:18.18,my_style,,0,0,0,,然后这儿用属性限定语法来定义此包含三个列的列定义集合
Dialogue: 0,0:11:18.96,0:11:25.86,my_style,,0,0,0,,更进一步 我在每个单元格里放了个文本块
Dialogue: 0,0:11:26.54,0:11:31.80,my_style,,0,0,0,,可惜 没法从设计视图看到这些数字
Dialogue: 0,0:11:31.80,0:11:34.50,my_style,,0,0,0,,它没有被正确显示出来
Dialogue: 0,0:11:34.50,0:11:40.88,my_style,,0,0,0,,但如果我们运行这个App就能看到在不同单元格里有不同数字
Dialogue: 0,0:11:41.06,0:11:43.14,my_style,,0,0,0,,缩小点 可以看到1-9
Dialogue: 0,0:11:46.52,0:11:49.12,my_style,,0,0,0,,你还需要注意一点 举个例子
Dialogue: 0,0:11:49.12,0:11:55.90,my_style,,0,0,0,,在第一个也就是左上角那个单元格里 我没有设置行和列
Dialogue: 0,0:11:55.90,0:12:01.38,my_style,,0,0,0,,默认情况下 如果你不提供行列信息 它就会是0
Dialogue: 0,0:12:01.38,0:12:08.58,my_style,,0,0,0,,所以我们实际上假设了我们把这个文本块放在行0列0
Dialogue: 0,0:12:08.84,0:12:14.26,my_style,,0,0,0,,更进一步 把下一个文本块中设置网格列为1
Dialogue: 0,0:12:14.26,0:12:18.00,my_style,,0,0,0,,但没有设置行 这意味着它为0
Dialogue: 0,0:12:18.00,0:12:21.66,my_style,,0,0,0,,我在这例子里做了很多遍这样的操作
Dialogue: 0,0:12:22.34,0:12:26.34,my_style,,0,0,0,,依靠默认值可以使代码更简洁
Dialogue: 0,0:12:26.34,0:12:29.20,my_style,,0,0,0,,但必须了解的是 这里用了一个转换
Dialogue: 0,0:12:29.94,0:12:35.06,my_style,,0,0,0,,我还有个叫做'对齐&余量'的例子要给你看
Dialogue: 0,0:12:35.10,0:12:36.34,my_style,,0,0,0,,拖下来一点...
Dialogue: 0,0:12:36.66,0:12:40.68,my_style,,0,0,0,,这些例子看上去应该很清晰明了
Dialogue: 0,0:12:40.68,0:12:44.76,my_style,,0,0,0,,但关于对齐和余量 还有些更优秀的特性
Dialogue: 0,0:12:44.76,0:12:52.48,my_style,,0,0,0,,首先 这个例子介绍了在给定网格单元格中垂直对齐和水平对齐如何发挥作用
Dialogue: 0,0:12:52.48,0:12:56.44,my_style,,0,0,0,,这对我们下节课将要讲到的StackPannel同样适用
Dialogue: 0,0:12:56.98,0:13:04.92,my_style,,0,0,0,,垂直对齐和水平对齐将控件拉向其边界
Dialogue: 0,0:13:04.92,0:13:11.20,my_style,,0,0,0,,与之相反 余量将控件推离其边界
Dialogue: 0,0:13:11.20,0:13:19.90,my_style,,0,0,0,,因此这种情况下 可以看到水平对齐将蓝色矩形拉到左手边
Dialogue: 0,0:13:19.90,0:13:22.22,my_style,,0,0,0,,同时把它拉向顶端
Dialogue: 0,0:13:23.30,0:13:30.10,my_style,,0,0,0,,仔细看这个关于余量例子
Dialogue: 0,0:13:30.10,0:13:31.66,my_style,,0,0,0,,最下面 这个白色的
Dialogue: 0,0:13:31.66,0:13:37.68,my_style,,0,0,0,,水平对齐将其拉向左边
Dialogue: 0,0:13:37.68,0:13:40.74,my_style,,0,0,0,,同时垂直对齐将其拉向底端
Dialogue: 0,0:13:40.74,0:13:47.40,my_style,,0,0,0,,然后我们设置余量为'50,0,0,50'
Dialogue: 0,0:13:47.40,0:13:54.88,my_style,,0,0,0,,可以看到余量现在把这个矩形推离左侧边界50像素
Dialogue: 0,0:13:55.06,0:14:00.84,my_style,,0,0,0,,这样就可以为左侧留出空间
Dialogue: 0,0:14:00.84,0:14:09.78,my_style,,0,0,0,,余量同时也把白色矩形推离底端50像素
Dialogue: 0,0:14:11.16,0:14:15.86,my_style,,0,0,0,,第二点要注意的是余量的不寻常定义方式
Dialogue: 0,0:14:15.86,0:14:18.88,my_style,,0,0,0,,我们已经讲过了这个了 所以这节课不准备在这上面纠结
Dialogue: 0,0:14:19.14,0:14:23.72,my_style,,0,0,0,,余量以一串逗号分隔的数字表示
Dialogue: 0,0:14:23.72,0:14:26.48,my_style,,0,0,0,,这种转换是从串联型表单借鉴来的
Dialogue: 0,0:14:26.48,0:14:30.96,my_style,,0,0,0,,数字代表了余量像素值
Dialogue: 0,0:14:30.96,0:14:34.08,my_style,,0,0,0,,从左手边开始顺时针方式记录
Dialogue: 0,0:14:34.08,0:14:39.56,my_style,,0,0,0,,所以顺序是 左 上 右 下
Dialogue: 0,0:14:40.26,0:14:48.20,my_style,,0,0,0,,之前我说过在需要高度和宽度时用关联布局比如自动标尺和星号标尺比较好
Dialogue: 0,0:14:48.20,0:14:51.92,my_style,,0,0,0,,那么为什么余量却要用像素来定义呢？
Dialogue: 0,0:14:51.92,0:15:00.90,my_style,,0,0,0,,呃...通常呢 余量是极小的空白值或者两个相关联控件的间隙
Dialogue: 0,0:15:01.16,0:15:05.76,my_style,,0,0,0,,因此它可以在不影响整体布局的情况下确定位置
Dialogue: 0,0:15:05.76,0:15:10.70,my_style,,0,0,0,,如果你想在两个矩形中间留出小空隙
Dialogue: 0,0:15:10.70,0:15:14.84,my_style,,0,0,0,,对大小不一的尺寸来说50像素都够了
Dialogue: 0,0:15:14.84,0:15:20.16,my_style,,0,0,0,,如果还不行 你还可以借助本教程后期将介绍的其他手段做些改进
Dialogue: 0,0:15:20.16,0:15:22.66,my_style,,0,0,0,,好 我们来回顾下到目前为止都讲了些什么
Dialogue: 0,0:15:22.66,0:15:25.20,my_style,,0,0,0,,这节课我们讲了布局控件
Dialogue: 0,0:15:25.20,0:15:31.68,my_style,,0,0,0,,讲了它们如何在你的App中或者在其他可视化XAML控件间确定位置
Dialogue: 0,0:15:31.82,0:15:38.62,my_style,,0,0,0,,这节课我们讲了网格控件和如何定义行列
Dialogue: 0,0:15:38.62,0:15:42.36,my_style,,0,0,0,,如何运用星号标尺和自动标尺定义它们的相对大小关系
Dialogue: 0,0:15:42.56,0:15:49.34,my_style,,0,0,0,,如何通过设置给定项目(这个例子中是矩形或者其他像它的项目)的附属属性
Dialogue: 0,0:15:49.34,0:15:54.82,my_style,,0,0,0,,如'Grid.Row'或者'Grid.Column'
Dialogue: 0,0:15:54.92,0:15:57.98,my_style,,0,0,0,,来确定其应该被放置在哪行哪列
Dialogue: 0,0:15:57.98,0:16:04.22,my_style,,0,0,0,,我们还讲了如何对给定空间内的控件设置对齐和余量
Dialogue: 0,0:16:04.48,0:16:07.82,my_style,,0,0,0,,网格控件很赞 但它只是一个工具
Dialogue: 0,0:16:07.82,0:16:14.40,my_style,,0,0,0,,你可以试着把它和其他布局控件比如我们下节课要学的堆栈布局合在一起用
Dialogue: 0,0:16:14.40,0:16:16.26,my_style,,0,0,0,,那我们下期再见
Dialogue: 0,0:16:16.26,0:16:18.26,my_style,,0,0,0,,
