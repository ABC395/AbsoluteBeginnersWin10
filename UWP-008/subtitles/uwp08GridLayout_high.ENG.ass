[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Last Style Storage: Default
Audio File: uwp07GridLayout_high.mp4
Video File: uwp07GridLayout_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.250000
Active Line: 5
Video Position: 29404

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: my_style,Arial,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:05.62,0:00:09.70,my_style,,0,0,0,,Hi I'm Bob Tabor with www.LearnVisualStudio.NET
Dialogue: 0,0:00:09.70,0:00:12.24,my_style,,0,0,0,,In this lesson I wanna begin talking about layout
Dialogue: 0,0:00:12.24,0:00:19.92,my_style,,0,0,0,,or rather the process of positioning visual controls and other elements on your application's user interface
Dialogue: 0,0:00:20.18,0:00:25.30,my_style,,0,0,0,,And there are several different XAML controls that exist for the purpose of layout
Dialogue: 0,0:00:25.42,0:00:28.48,my_style,,0,0,0,,and we'll cover most of the popular ones in this series of lessons
Dialogue: 0,0:00:28.48,0:00:31.94,my_style,,0,0,0,,Now in the past, Layout was relatively simple
Dialogue: 0,0:00:31.94,0:00:37.26,my_style,,0,0,0,,after all you were tipped only laying out in an application for a single form factor
Dialogue: 0,0:00:37.26,0:00:40.30,my_style,,0,0,0,,a single device like a phone or desktop application
Dialogue: 0,0:00:40.30,0:00:45.46,my_style,,0,0,0,,However there are few new rankles in adduce to as we begin to build up applications
Dialogue: 0,0:00:45.46,0:00:50.14,my_style,,0,0,0,,that can adaptbaly re-size based on the device that we run our app on
Dialogue: 0,0:00:50.14,0:00:55.82,my_style,,0,0,0,,And this is one of the new key features in App development on the Windows platform
Dialogue: 0,0:00:56.10,0:00:58.60,my_style,,0,0,0,,We'll start with the easiest stuff in this lesson
Dialogue: 0,0:00:58.60,0:01:01.78,my_style,,0,0,0,,Then we'll build up to the more challenging stuff in the following lessons
Dialogue: 0,0:01:02.02,0:01:04.36,my_style,,0,0,0,,Now before we begin I wanna point out one thing
Dialogue: 0,0:01:04.38,0:01:08.44,my_style,,0,0,0,,Regarding all XAML controls that are intended for the purpose of layout
Dialogue: 0,0:01:08.74,0:01:11.74,my_style,,0,0,0,,most controls have a content property
Dialogue: 0,0:01:11.76,0:01:15.08,my_style,,0,0,0,,so your button control has a content property, for example
Dialogue: 0,0:01:15.08,0:01:20.34,my_style,,0,0,0,,And the content property can only be set to an instance of another object
Dialogue: 0,0:01:20.34,0:01:26.26,my_style,,0,0,0,,So, in other words, I can put a TextBlock when we just copy and paste code here to what I've got
Dialogue: 0,0:01:26.58,0:01:36.62,my_style,,0,0,0,,I can create... here... a button... with a TextBlcok property
Dialogue: 0,0:01:36.62,0:01:41.60,my_style,,0,0,0,,then I also add an Image inside of that button control as well
Dialogue: 0,0:01:41.60,0:01:47.96,my_style,,0,0,0,,So whenever I tempt to put more than one control inside the content property I get this air by handle over
Dialogue: 0,0:01:47.96,0:01:51.22,my_style,,0,0,0,,It says "the property 'Content' can only be set once"
Dialogue: 0,0:01:51.36,0:01:56.52,my_style,,0,0,0,,However layout controls are intended to host more than one control
Dialogue: 0,0:01:56.52,0:02:00.00,my_style,,0,0,0,,So as a result, they don't have a content property
Dialogue: 0,0:02:00.00,0:02:03.06,my_style,,0,0,0,,Instead they usually have a children property
Dialogue: 0,0:02:03.06,0:02:10.78,my_style,,0,0,0,,that's of a special data type - a Collection data type that can hold XAML controls called UI Element Collection
Dialogue: 0,0:02:11.06,0:02:18.10,my_style,,0,0,0,,XAML... As we add new instances of controls inside of the definition of our layout control
Dialogue: 0,0:02:18.10,0:02:23.08,my_style,,0,0,0,,we are actually calling the add method of our layout controls'
Dialogue: 0,0:02:23.10,0:02:26.46,my_style,,0,0,0,,UI Element Collections or rather just the collection property
Dialogue: 0,0:02:26.46,0:02:29.92,my_style,,0,0,0,,So here again XAML has a lot of complexity for us
Dialogue: 0,0:02:29.92,0:02:36.38,my_style,,0,0,0,,and makes our code very concise by inferring your intent by how we write our XAML
Dialogue: 0,0:02:36.72,0:02:40.30,my_style,,0,0,0,,Alright, so we gonna begin in lesson looking at the Grid control
Dialogue: 0,0:02:40.30,0:02:45.32,my_style,,0,0,0,,like any Grid, it allows you to define both rows and columns to create itself
Dialogue: 0,0:02:45.32,0:02:53.50,my_style,,0,0,0,,and then each of the controls that are used by your application can request \Nwhich row and which column that they wanna be placed inside of
Dialogue: 0,0:02:53.70,0:02:59.08,my_style,,0,0,0,,So whenever you create a new app using the blank app template you are provided very little guidance
Dialogue: 0,0:02:59.08,0:03:00.40,my_style,,0,0,0,,that you saw here a moment ago
Dialogue: 0,0:03:00.40,0:03:01.86,my_style,,0,0,0,,Let me just get rid of that...
Dialogue: 0,0:03:01.86,0:03:04.98,my_style,,0,0,0,,That's pretty much all you are given to get started
Dialogue: 0,0:03:04.98,0:03:08.94,my_style,,0,0,0,,You get a single empty Grid with no rows and no columns to find
Dialogue: 0,0:03:09.04,0:03:15.52,my_style,,0,0,0,,However, by default, there's always one row definition and one column definition
Dialogue: 0,0:03:15.52,0:03:18.62,my_style,,0,0,0,,even if it's not implicitly defined in your XAML
Dialogue: 0,0:03:18.62,0:03:28.36,my_style,,0,0,0,,And these take up the full vertical and horizontal space available to represent one large cell in the Grid
Dialogue: 0,0:03:28.36,0:03:38.64,my_style,,0,0,0,,Now any items that are placed between that opening and closing Grid element\N are understood be inside of that single implicitly defined cell
Dialogue: 0,0:03:39.18,0:03:43.60,my_style,,0,0,0,,So I want to create a quick example of a Grid that defines two rows
Dialogue: 0,0:03:43.60,0:03:48.98,my_style,,0,0,0,,just illustrate two primary ways of creating rows and setting there heights
Dialogue: 0,0:03:48.98,0:03:52.20,my_style,,0,0,0,,And so actually I've already taking the opportunity to create this
Dialogue: 0,0:03:52.20,0:03:56.40,my_style,,0,0,0,,Someone who go to the project called "Row definition" you should be able to open this up and follow along
Dialogue: 0,0:03:56.54,0:03:59.50,my_style,,0,0,0,,or you can just possibly type this in as well
Dialogue: 0,0:03:59.86,0:04:04.12,my_style,,0,0,0,,So here you can see that I want you to notice how that I have two rectangles:
Dialogue: 0,0:04:04.12,0:04:07.70,my_style,,0,0,0,,there's a upper rectangle and a lower rectangle
Dialogue: 0,0:04:07.84,0:04:13.50,my_style,,0,0,0,,And those are defined through series of row definition objects, here
Dialogue: 0,0:04:13.76,0:04:21.18,my_style,,0,0,0,,So you can see that I have inside of the Grid that has the property element syntax that define a collection of Row Definitions
Dialogue: 0,0:04:21.36,0:04:26.00,my_style,,0,0,0,,with instances of Row Definition created with their height property set
Dialogue: 0,0:04:26.26,0:04:29.44,my_style,,0,0,0,,And here the first one has its height property set to Auto
Dialogue: 0,0:04:29.44,0:04:33.50,my_style,,0,0,0,,and its second row definition object has its height set to Star
Dialogue: 0,0:04:33.82,0:04:36.26,my_style,,0,0,0,,And then we have two rectangle objects
Dialogue: 0,0:04:36.26,0:04:43.54,my_style,,0,0,0,,and notice that here we're setting the row that this rectangle object wants to put itself inside of
Dialogue: 0,0:04:43.54,0:04:52.10,my_style,,0,0,0,,It wants to put inside... itself inside of the row 0, so we can see that this is the first row, row 0, so 0 based
Dialogue: 0,0:04:52.20,0:05:01.86,my_style,,0,0,0,,And then the second rectangle wants to put itself inside of the Grid row equals 1, so it puts itself here - in this row
Dialogue: 0,0:05:02.56,0:05:07.78,my_style,,0,0,0,,So the first thing we notice is how the rectangles are putting themselves into the various Grid rows
Dialogue: 0,0:05:07.78,0:05:16.84,my_style,,0,0,0,,And then also how you reference both rows and columns using a 0 based numbering skill that we saw here
Dialogue: 0,0:05:16.84,0:05:21.64,my_style,,0,0,0,,And the second thing I want you notice is this wired syntax "Grid.Row"
Dialogue: 0,0:05:21.64,0:05:26.26,my_style,,0,0,0,,"Grid.Row" will also be setting "Grid.Column" in another example here
Dialogue: 0,0:05:26.26,0:05:29.44,my_style,,0,0,0,,And these are called Attached Properties
Dialogue: 0,0:05:29.62,0:05:38.44,my_style,,0,0,0,,And An Attached Property enable an object - in this case a rectangle - to assign the value for property
Dialogue: 0,0:05:38.44,0:05:42.80,my_style,,0,0,0,,in this case the row property but it could apply to the column property as well
Dialogue: 0,0:05:42.98,0:05:48.62,my_style,,0,0,0,,to assign the value for property that its own class structure doesn't define
Dialogue: 0,0:05:48.62,0:05:54.68,my_style,,0,0,0,,So nowhere in the rectangle definition is there a Grid.Row property or even a row property
Dialogue: 0,0:05:54.68,0:05:57.66,my_style,,0,0,0,,These are all defined inside of the Grid object
Dialogue: 0,0:05:58.20,0:06:01.18,my_style,,0,0,0,,And the reason why Attached property exist
Dialogue: 0,0:06:01.28,0:06:06.72,my_style,,0,0,0,,is really an advanced XAML topic that's not ac-curable at this point in your introduction to XAMLs
Dialogue: 0,0:06:06.72,0:06:08.38,my_style,,0,0,0,,So I'm going to skip that topic
Dialogue: 0,0:06:08.38,0:06:11.04,my_style,,0,0,0,,if you want to get deeper into the internals of XAML
Dialogue: 0,0:06:11.04,0:06:20.36,my_style,,0,0,0,,then you should search MSDN for articles about both Attached Properties \Nas well as the loosely related topic of Dependency Properties
Dialogue: 0,0:06:20.36,0:06:24.60,my_style,,0,0,0,,but in a lot shells Attached Property keep your XAML simple
Dialogue: 0,0:06:24.60,0:06:29.88,my_style,,0,0,0,,Let's just leave it that and you can go off and explore that topic little bit a lot on your own later on
Dialogue: 0,0:06:29.88,0:06:34.80,my_style,,0,0,0,,So the third thing that I want you to notice about in this example are the two different row heights
Dialogue: 0,0:06:34.80,0:06:38.66,my_style,,0,0,0,,the first height we set 'Auto' and the second row height we set '*'
Dialogue: 0,0:06:38.96,0:06:45.54,my_style,,0,0,0,,there are 3 syntax s that you can use to help per-sway the sizing for each row and each column
Dialogue: 0,0:06:45.54,0:06:48.34,my_style,,0,0,0,,I use the term "per-sway" intentionally
Dialogue: 0,0:06:48.34,0:06:52.02,my_style,,0,0,0,,with XAML layout, heights and widths are relative
Dialogue: 0,0:06:52.02,0:06:54.74,my_style,,0,0,0,,They can be influenced by a number of different factors
Dialogue: 0,0:06:54.74,0:06:59.98,my_style,,0,0,0,,All of these factors are considered by the layout engine and Runtime
Dialogue: 0,0:06:59.98,0:07:06.64,my_style,,0,0,0,,to determine the actual placement of items on your given page or your screen
Dialogue: 0,0:07:06.82,0:07:17.26,my_style,,0,0,0,,So for example, this term "Auto" means that the height for the row should be tall enough\N to accommodate all the controls that are placed inside of that row
Dialogue: 0,0:07:17.30,0:07:24.48,my_style,,0,0,0,,If the tallest control... in this case you can see this rectangle as its height explicitly set to 100 pixels
Dialogue: 0,0:07:24.48,0:07:32.26,my_style,,0,0,0,,If the tallest side is 100 pixels tall then that's the actual height of the row, 100 pixels
Dialogue: 0,0:07:32.26,0:07:35.66,my_style,,0,0,0,,If we go change this to 50 pixels
Dialogue: 0,0:07:35.66,0:07:41.84,my_style,,0,0,0,,you can see that the height of row changes now we have the height to 50 instead
Dialogue: 0,0:07:41.84,0:07:43.16,my_style,,0,0,0,,let's change it back to 100
Dialogue: 0,0:07:45.42,0:07:52.70,my_style,,0,0,0,,So therefore "Auto" means that the height is relative to the controls that are inside of that
Dialogue: 0,0:07:52.70,0:07:55.68,my_style,,0,0,0,,even row or column or whatever the case might be
Dialogue: 0,0:07:56.24,0:08:01.02,my_style,,0,0,0,,Secondly you see this asterisk is also known as Star Sizing
Dialogue: 0,0:08:01.02,0:08:07.46,my_style,,0,0,0,,It means that the height of the row should take up all of the rest of the available height available
Dialogue: 0,0:08:07.70,0:08:11.48,my_style,,0,0,0,,So here's a quick example of another way to use Star sizing
Dialogue: 0,0:08:11.48,0:08:20.04,my_style,,0,0,0,,I created a project that has 3 rows and in a content panels here we get to Star sizing
Dialogue: 0,0:08:22.88,0:08:31.86,my_style,,0,0,0,,So again you can see that we have 3 rows that are defined... just down here... like so
Dialogue: 0,0:08:32.20,0:08:38.76,my_style,,0,0,0,,Notice that the heights of each one of them... Putting the number before the "*"
Dialogue: 0,0:08:39.34,0:08:45.20,my_style,,0,0,0,,I'm saying of all the available space give me one share of all the available space
Dialogue: 0,0:08:45.20,0:08:47.50,my_style,,0,0,0,,or two shares of all the available space
Dialogue: 0,0:08:47.50,0:08:50.66,my_style,,0,0,0,,or in this case three shares of all the available space
Dialogue: 0,0:08:50.76,0:08:54.04,my_style,,0,0,0,,So the sum of all these rows adds up to 6
Dialogue: 0,0:08:54.04,0:09:01.06,my_style,,0,0,0,,So each one star is equivalent to 1/6 of the height that's currently available
Dialogue: 0,0:09:01.06,0:09:08.88,my_style,,0,0,0,,So therefore 3 stars would get half of the height that's available as a picked in the output of this example
Dialogue: 0,0:09:09.02,0:09:13.00,my_style,,0,0,0,,You should see it gets... half of the available height
Dialogue: 0,0:09:13.46,0:09:16.60,my_style,,0,0,0,,I also want you to notice off to the left hand side
Dialogue: 0,0:09:16.60,0:09:21.36,my_style,,0,0,0,,that there are some visual tools that we can use to... to change the... the sizing
Dialogue: 0,0:09:21.54,0:09:26.68,my_style,,0,0,0,,so for example I can change from stars sizing to Auto or to pixel
Dialogue: 0,0:09:26.82,0:09:33.86,my_style,,0,0,0,,I can also just type in the given value here and that will set the height property in this particular case
Dialogue: 0,0:09:35.24,0:09:37.74,my_style,,0,0,0,,Besides Auto and Star sizing
Dialogue: 0,0:09:37.74,0:09:42.26,my_style,,0,0,0,,you can also specify widths and heights as well as margins in terms of pixels
Dialogue: 0,0:09:42.46,0:09:45.60,my_style,,0,0,0,,So in fact, when only numbers are present
Dialogue: 0,0:09:45.60,0:09:49.64,my_style,,0,0,0,,it represents that number of pixels or the width or height
Dialogue: 0,0:09:49.64,0:09:56.94,my_style,,0,0,0,,but generally it's not a good idea to use exact pixels in layouts for widths and heights
Dialogue: 0,0:09:56.94,0:10:02.28,my_style,,0,0,0,,because it'll likely heard that various screens will be larger or smaller
Dialogue: 0,0:10:02.28,0:10:10.44,my_style,,0,0,0,,So there are several different types of phones or several different form factors for tablets and desktops...things of that nature
Dialogue: 0,0:10:10.54,0:10:15.20,my_style,,0,0,0,,And so you don't want to specify exact numbers
Dialogue: 0,0:10:15.20,0:10:19.74,my_style,,0,0,0,,or else it's not gonna look correct on different form factors
Dialogue: 0,0:10:19.74,0:10:25.16,my_style,,0,0,0,,Instead, it's preferable to use relative layout like Auto and Star sizing for layout
Dialogue: 0,0:10:25.42,0:10:29.84,my_style,,0,0,0,,Now the one other thing that I want you to notice from this example is that
Dialogue: 0,0:10:29.84,0:10:34.32,my_style,,0,0,0,,In XAML control, widths and heights are assumed to be 100%
Dialogue: 0,0:10:34.32,0:10:36.84,my_style,,0,0,0,,unless otherwise specified, especially for rectangles
Dialogue: 0,0:10:36.84,0:10:39.90,my_style,,0,0,0,,That's pretty much true for many different controls
Dialogue: 0,0:10:39.90,0:10:43.42,my_style,,0,0,0,,not all controls, like the button control doesn't treated this way
Dialogue: 0,0:10:43.42,0:10:53.92,my_style,,0,0,0,,but the rectangle, the image control... These are all assumed to be 100% of whatever space that's available widths and heights
Dialogue: 0,0:10:54.24,0:10:59.04,my_style,,0,0,0,,I also want to point out that a Grid can have a collection of column definitions
Dialogue: 0,0:10:59.20,0:11:02.84,my_style,,0,0,0,,And what I want to do...show you another example here
Dialogue: 0,0:11:03.50,0:11:09.28,my_style,,0,0,0,,And so there you can see that we have a 3 by 3 Grid, 3 row definitions
Dialogue: 0,0:11:09.28,0:11:18.18,my_style,,0,0,0,,and then we see there are also with property-only syntax defining a column definition's collection that contains 3 columns
Dialogue: 0,0:11:18.96,0:11:25.86,my_style,,0,0,0,,Further more you can see that I put a TextBlock inside of each one of the cells
Dialogue: 0,0:11:26.54,0:11:31.80,my_style,,0,0,0,,Now unfortunately you can't see the numbers here on the designer
Dialogue: 0,0:11:31.80,0:11:34.50,my_style,,0,0,0,,It's not represented done correctly
Dialogue: 0,0:11:34.50,0:11:40.88,my_style,,0,0,0,,but if we were to run the application, you'll be able to see that we get different number in each cell
Dialogue: 0,0:11:41.06,0:11:43.14,my_style,,0,0,0,,Smaller, we see 1-9
Dialogue: 0,0:11:46.52,0:11:49.12,my_style,,0,0,0,,And one thing that I want you to notice for example
Dialogue: 0,0:11:49.12,0:11:55.90,my_style,,0,0,0,,in this very first cell the upper left hand corners that I'm not setting a row nor am I setting a column
Dialogue: 0,0:11:55.90,0:12:01.38,my_style,,0,0,0,,So by default if you don't supply that information it's assumed to be 0
Dialogue: 0,0:12:01.38,0:12:08.58,my_style,,0,0,0,,So we are assuming that we are putting this particular TextBlock in row 0, column 0
Dialogue: 0,0:12:08.84,0:12:14.26,my_style,,0,0,0,,Further more if you take a look at this next TextBlock and setting the Grid column equals 1
Dialogue: 0,0:12:14.26,0:12:18.00,my_style,,0,0,0,,but I'm not setting the row meaning that I'm assuming that be 0
Dialogue: 0,0:12:18.00,0:12:21.66,my_style,,0,0,0,,and I do that here several times throughout this example
Dialogue: 0,0:12:22.34,0:12:26.34,my_style,,0,0,0,,So relying on the defaults keeps you code gain more precise
Dialogue: 0,0:12:26.34,0:12:29.20,my_style,,0,0,0,,but you have to be understand there's a convention being used here
Dialogue: 0,0:12:29.94,0:12:35.06,my_style,,0,0,0,,Alright I have another example that I want to show you called Alignment & Margins
Dialogue: 0,0:12:35.10,0:12:36.34,my_style,,0,0,0,,let's bring this down...
Dialogue: 0,0:12:36.66,0:12:40.68,my_style,,0,0,0,,Most of these examples should be pretty obvious to be stared at for a few moments
Dialogue: 0,0:12:40.68,0:12:44.76,my_style,,0,0,0,,but there are several finer distinctions that I wanna make about alignments and margins
Dialogue: 0,0:12:44.76,0:12:52.48,my_style,,0,0,0,,First of all, this example illustrates how vertical alignment and horizontal alignment work even in a given Grid cell
Dialogue: 0,0:12:52.48,0:12:56.44,my_style,,0,0,0,,And this is whole true in a stack panel as well we'll talk about in the next lesson
Dialogue: 0,0:12:56.98,0:13:04.92,my_style,,0,0,0,,The vertical or horizontal alignment property attributes pull controls towards their boundaries
Dialogue: 0,0:13:04.92,0:13:11.20,my_style,,0,0,0,,So by contrast, the margin attributes push controls away from their boundaries
Dialogue: 0,0:13:11.20,0:13:19.90,my_style,,0,0,0,,So in this case here, you can see that the horizontal alignment were pulling this blue rectangle towards the left hand side
Dialogue: 0,0:13:19.90,0:13:22.22,my_style,,0,0,0,,and were pulling it towards the top hand side
Dialogue: 0,0:13:23.30,0:13:30.10,my_style,,0,0,0,,However if we take a look at the example that has some margins to find
Dialogue: 0,0:13:30.10,0:13:31.66,my_style,,0,0,0,,Here to very bottom, this white one
Dialogue: 0,0:13:31.66,0:13:37.68,my_style,,0,0,0,,So here again, we are pulling the horizontal alignment towards the left
Dialogue: 0,0:13:37.68,0:13:40.74,my_style,,0,0,0,,and pulling the vertical alignment towards the bottom
Dialogue: 0,0:13:40.74,0:13:47.40,my_style,,0,0,0,,And then we are setting the margins equal to "50,0,0,50"
Dialogue: 0,0:13:47.40,0:13:54.88,my_style,,0,0,0,,so you can see that the margin will now push the rectangle away from the left hand boundary by 50
Dialogue: 0,0:13:55.06,0:14:00.84,my_style,,0,0,0,,So you can see here that... we can that... spacing the left hand side
Dialogue: 0,0:14:00.84,0:14:09.78,my_style,,0,0,0,,And the margin is pushing the white rectangle away from the bottom boundary by 50 pixels as well
Dialogue: 0,0:14:11.16,0:14:15.86,my_style,,0,0,0,,Now for second observation that I wanna make is the odd way which margins are defined
Dialogue: 0,0:14:15.86,0:14:18.88,my_style,,0,0,0,,We already talked about this so we're not get horrible on this in this lesson
Dialogue: 0,0:14:19.14,0:14:23.72,my_style,,0,0,0,,Margins are represented as a series of numeric values that are separated from... by commas
Dialogue: 0,0:14:23.72,0:14:26.48,my_style,,0,0,0,,and this convention was borrowed from cascaded style sheets
Dialogue: 0,0:14:26.48,0:14:30.96,my_style,,0,0,0,,So the numbers represent the margin pixel values
Dialogue: 0,0:14:30.96,0:14:34.08,my_style,,0,0,0,,in a clockwise fashion starting at the left hand side
Dialogue: 0,0:14:34.08,0:14:39.56,my_style,,0,0,0,,So in this case left-top-right-bottom, alright
Dialogue: 0,0:14:40.26,0:14:48.20,my_style,,0,0,0,,A bit earlier I said that it's generally a better idea to use relative sizes like Auto or Star sizing whatever you want to find heights and widths
Dialogue: 0,0:14:48.20,0:14:51.92,my_style,,0,0,0,,So why is then that margins are defined in exact pixels ?
Dialogue: 0,0:14:51.92,0:15:00.90,my_style,,0,0,0,,Well, usually margins are just small values or white spacing or padding between two relative values
Dialogue: 0,0:15:01.16,0:15:05.76,my_style,,0,0,0,,And so they can be fixed without negatively impacting the overall layout of the page，you mean
Dialogue: 0,0:15:05.76,0:15:10.70,my_style,,0,0,0,,If you want a small amount of space between two rectangles
Dialogue: 0,0:15:10.70,0:15:14.84,my_style,,0,0,0,,50 pixels will be enough whether you have a large or small size
Dialogue: 0,0:15:14.84,0:15:20.16,my_style,,0,0,0,,And if it's not you can change it through other techniques that will demonstrate later on in this series
Dialogue: 0,0:15:20.16,0:15:22.66,my_style,,0,0,0,,So let's recap what we've talked about so far
Dialogue: 0,0:15:22.66,0:15:25.20,my_style,,0,0,0,,In this lesson we talked about layout controls
Dialogue: 0,0:15:25.20,0:15:31.68,my_style,,0,0,0,,and how they allow you to find areas of your application, where other visual XAML controls will be hosted
Dialogue: 0,0:15:31.82,0:15:38.62,my_style,,0,0,0,,In this lesson we specifically learned about the Grid and how to define columns and rows
Dialogue: 0,0:15:38.62,0:15:42.36,my_style,,0,0,0,,how to define their relative sizes using Star or Auto
Dialogue: 0,0:15:42.56,0:15:49.34,my_style,,0,0,0,,And then how to specify which row and column are given control would request to be inside of
Dialogue: 0,0:15:49.34,0:15:54.82,my_style,,0,0,0,,by setting attached properties "Grid.Row" or "Grid.Column" on that given item
Dialogue: 0,0:15:54.92,0:15:57.98,my_style,,0,0,0,,or the rectangle in this particular case or whatever like it
Dialogue: 0,0:15:57.98,0:16:04.22,my_style,,0,0,0,,We also talked about how to set the alignment and the margins of those controls inside of the given cell and more
Dialogue: 0,0:16:04.48,0:16:07.82,my_style,,0,0,0,,So Grids are great but they're really just one tool
Dialogue: 0,0:16:07.82,0:16:14.40,my_style,,0,0,0,,You can likely use them along with other layout controls like this StackPanel which we'll learn about in the very next lesson
Dialogue: 0,0:16:14.40,0:16:16.26,my_style,,0,0,0,,So see you there, thank you.
Dialogue: 0,0:16:16.26,0:16:18.26,my_style,,0,0,0,,
