[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: uwp66AlbumMatchGameAddingGameLogic_high.mp4
Video File: uwp66AlbumMatchGameAddingGameLogic_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 88
Video Position: 12664

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,50,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.75,Default,,0,0,0,,专辑封面配对游戏 —— 实现游戏逻辑\N\N翻译：@geelaw（微博）　审核：@嘿嘿_Code　压制：<压制人>
Dialogue: 0,0:00:05.08,0:00:06.58,Default,,0,0,0,,欢迎回来，我们进展不错
Dialogue: 0,0:00:06.58,0:00:15.80,Default,,0,0,0,,我们将要研究的下一件事情是进度条倒计时的动画与事件
Dialogue: 0,0:00:16.38,0:00:20.51,Default,,0,0,0,,以及倒计时结束时所发生的情况
Dialogue: 0,0:00:20.70,0:00:25.70,Default,,0,0,0,,我们需要引发一个我们能够处理的事件
Dialogue: 0,0:00:26.14,0:00:27.84,Default,,0,0,0,,然后决定需要进行什么操作
Dialogue: 0,0:00:27.84,0:00:32.06,Default,,0,0,0,,关于倒计时，我们有两种场景需要处理
Dialogue: 0,0:00:32.06,0:00:35.08,Default,,0,0,0,,第一个场景是当我们冷却的时候
Dialogue: 0,0:00:35.08,0:00:38.06,Default,,0,0,0,,我们要有一个冷却过程
Dialogue: 0,0:00:38.06,0:00:40.36,Default,,0,0,0,,等待下一轮开始
Dialogue: 0,0:00:40.36,0:00:44.08,Default,,0,0,0,,然后下一轮实际也在进行中
Dialogue: 0,0:00:44.08,0:00:47.80,Default,,0,0,0,,我们会播放音乐并且倒计时
Dialogue: 0,0:00:47.80,0:00:53.50,Default,,0,0,0,,如果玩家在给定时间做出选择
Dialogue: 0,0:00:53.50,0:00:55.45,Default,,0,0,0,,那么我们因此来计算玩家的分值或者分数
Dialogue: 0,0:00:55.58,0:00:58.42,Default,,0,0,0,,好的，为了让动画运作起来
Dialogue: 0,0:00:58.42,0:01:00.40,Default,,0,0,0,,我将在这个页面（Page 元素）的资源中
Dialogue: 0,0:01:00.40,0:01:03.06,Default,,0,0,0,,添加一个 Storyboard
Dialogue: 0,0:01:03.06,0:01:04.80,Default,,0,0,0,,那么现在咱们就开始吧
Dialogue: 0,0:01:04.80,0:01:07.18,Default,,0,0,0,,我们以前从没有讨论过 Storyboard与动画
Dialogue: 0,0:01:07.18,0:01:09.38,Default,,0,0,0,,我简单描述一下这些是什么
Dialogue: 0,0:01:09.38,0:01:11.98,Default,,0,0,0,,希望到时候，你会加深一点对它的理解
Dialogue: 0,0:01:11.98,0:01:15.72,Default,,0,0,0,,知道它们是什么，以及发生的关键帧、动作
Dialogue: 0,0:01:15.72,0:01:17.48,Default,,0,0,0,,它们会在动画的回调（callback）过程中发生
Dialogue: 0,0:01:17.48,0:01:19.37,Default,,0,0,0,,当动画回放的时候你就知道了
Dialogue: 0,0:01:19.74,0:01:22.91,Default,,0,0,0,,希望你能找到它的窍门，我们现在开始
Dialogue: 0,0:01:23.20,0:01:25.30,Default,,0,0,0,,我说过的，第一件要做的事情是
Dialogue: 0,0:01:25.30,0:01:30.30,Default,,0,0,0,,给我们的应用（注：实际上是这个 XAML 文件）加上一个 Page.Resources 节点
Dialogue: 0,0:01:31.12,0:01:33.52,Default,,0,0,0,,然后我要创建一个 Storyboard
Dialogue: 0,0:01:33.52,0:01:37.58,Default,,0,0,0,,正如你所看到的，这个 Storyboard没有名称
Dialogue: 0,0:01:39.55,0:01:42.48,Default,,0,0,0,,它没有 Name 属性可以设置
Dialogue: 0,0:01:42.48,0:01:51.08,Default,,0,0,0,,但是我们可以用 x: 这个命名空间\N这样我就可以给这个 Storyboard 加一个 Name 了
Dialogue: 0,0:01:51.08,0:01:54.13,Default,,0,0,0,,我管它叫 CountDown（倒计时）
Dialogue: 0,0:01:56.45,0:01:58.30,Default,,0,0,0,,因为我们需要通过代码访问它
Dialogue: 0,0:01:58.30,0:02:00.58,Default,,0,0,0,,所以我们得给它设置一个 Name
Dialogue: 0,0:02:00.58,0:02:02.92,Default,,0,0,0,,此外我们还要处理 Completed 事件（动画回放完成事件）
Dialogue: 0,0:02:02.92,0:02:05.02,Default,,0,0,0,,所以我先加上 Completed
Dialogue: 0,0:02:05.02,0:02:06.47,Default,,0,0,0,,待会儿我们再回来处理它
Dialogue: 0,0:02:06.78,0:02:09.16,Default,,0,0,0,,现在我可以添加不同种类的动画
Dialogue: 0,0:02:09.16,0:02:12.17,Default,,0,0,0,,在这里，我们需要 添加DoubleAnimationUsingKeyFrames
Dialogue: 0,0:02:12.17,0:02:16.12,Default,,0,0,0,,double 是一种数据类型
Dialogue: 0,0:02:16.12,0:02:21.12,Default,,0,0,0,,我希望它具有一个数字值并使用关键帧
Dialogue: 0,0:02:21.28,0:02:28.74,Default,,0,0,0,,使得我们可以指定关键时刻
Dialogue: 0,0:02:28.74,0:02:37.47,Default,,0,0,0,,在动画的周期中，我们可以在关键帧处更改给定属性的关键值
Dialogue: 0,0:02:37.47,0:02:43.86,Default,,0,0,0,,希望这能够初步让它像那么点儿样子
Dialogue: 0,0:02:43.86,0:02:47.30,Default,,0,0,0,,我们需要给出一些关键信息
Dialogue: 0,0:02:50.02,0:02:55.02,Default,,0,0,0,,例如 Storyboard.TargetName 属性
Dialogue: 0,0:02:55.29,0:03:00.95,Default,,0,0,0,,这是我要变化的对象名，我们已经命名其为 MyProgressBar 来着？
Dialogue: 0,0:03:00.95,0:03:04.29,Default,,0,0,0,,这就是动画将要处理的东西
Dialogue: 0,0:03:04.29,0:03:09.29,Default,,0,0,0,,还有 Storyboard 的属性\N因此 Storyboard.TargetProperty 等于
Dialogue: 0,0:03:12.17,0:03:17.17,Default,,0,0,0,,这里我们得这么设置
Dialogue: 0,0:03:17.82,0:03:22.82,Default,,0,0,0,,实际上我想做的就是设置它的值为。。。
Dialogue: 0,0:03:26.06,0:03:29.12,Default,,0,0,0,,通常一个 ProgressBar都有一个最大值
Dialogue: 0,0:03:29.12,0:03:31.22,Default,,0,0,0,,还有一个最小值，所以我觉得这就是它所表达的
Dialogue: 0,0:03:31.22,0:03:36.02,Default,,0,0,0,,我们用一个叫做 Range 的基类\N\N（译注：这个地方原文即是如此不清晰，他想表达的是\NProgressBar 类的 Range基类的 Value 属性\N代表了进度条的进度值，因此我们需要改变它）
Dialogue: 0,0:03:36.02,0:03:39.28,Default,,0,0,0,,这里还有另一个我需要设置的属性
Dialogue: 0,0:03:39.28,0:03:43.15,Default,,0,0,0,,叫做 EnableDependentAnimation
Dialogue: 0,0:03:43.15,0:03:46.10,Default,,0,0,0,,我要把它设置为 True
Dialogue: 0,0:03:50.11,0:03:54.35,Default,,0,0,0,,现在我要做的是增加另外几个关键帧
Dialogue: 0,0:03:54.35,0:03:58.91,Default,,0,0,0,,所以我要增加一个 DiscreteDoubleKeyFrame以及关键时间\N（离散双精度关键帧，可以用来做逐帧动画）
Dialogue: 0,0:03:58.91,0:04:01.13,Default,,0,0,0,,在这个第一帧，关键帧时刻
Dialogue: 0,0:04:01.13,0:04:10.41,Default,,0,0,0,,在第一秒初，进度条的值应该是 100
Dialogue: 0,0:04:10.41,0:04:13.60,Default,,0,0,0,,接下来复制 10 次
Dialogue: 0,0:04:14.25,0:04:17.34,Default,,0,0,0,,当然是复制和粘贴 10 次的意思
Dialogue: 0,0:04:17.34,0:04:19.04,Default,,0,0,0,,然后我马上回到上面
Dialogue: 0,0:04:19.53,0:04:22.09,Default,,0,0,0,,在 0:0:1
Dialogue: 0,0:04:22.09,0:04:23.85,Default,,0,0,0,,啊，我来先删掉下面的这些
Dialogue: 0,0:04:25.47,0:04:29.20,Default,,0,0,0,,搞定，在 0:0:1，我希望值仍然是 100
Dialogue: 0,0:04:30.11,0:04:34.89,Default,,0,0,0,,在 0:0:2，值是 90
Dialogue: 0,0:04:34.89,0:04:36.89,Default,,0,0,0,,希望你能看出来出现的规律
Dialogue: 0,0:04:36.89,0:04:41.69,Default,,0,0,0,,所以我来复制粘贴这个几次
Dialogue: 0,0:04:44.44,0:04:49.44,Default,,0,0,0,,于是在第三、四、五秒末
Dialogue: 0,0:04:49.92,0:04:53.82,Default,,0,0,0,,最后到第十秒末，我们只要不断倒计数
Dialogue: 0,0:04:53.82,0:04:58.82,Default,,0,0,0,,70、60、50、40、30、20、10，搞定
Dialogue: 0,0:05:10.76,0:05:14.58,Default,,0,0,0,,回到 MainPage.xaml.cs
Dialogue: 0,0:05:14.58,0:05:16.93,Default,,0,0,0,,我将创建一个help方法
Dialogue: 0,0:05:21.68,0:05:26.68,Default,,0,0,0,,这里我们将开始冷却，基本上就是，MyProgressBar……
Dialogue: 0,0:05:31.01,0:05:34.37,Default,,0,0,0,,其实我只要调用 CoundDown.Begin() 就好了
Dialogue: 0,0:05:36.92,0:05:41.92,Default,,0,0,0,,每当我们加载起来，然后执行到那里结束
Dialogue: 0,0:05:42.80,0:05:45.07,Default,,0,0,0,,我们就调用 StartCooldown()
Dialogue: 0,0:05:46.52,0:05:48.77,Default,,0,0,0,,咱们来看看这个是怎么运作的
Dialogue: 0,0:05:51.13,0:05:55.17,Default,,0,0,0,,好的，你看我们重新开始冷却了\N我们这儿要显示一条信息
Dialogue: 0,0:05:55.17,0:05:59.69,Default,,0,0,0,,比如“准备好第Round 1 2 3”\N（Getting ready for Round 1, Round 2, Round 3）
Dialogue: 0,0:05:59.69,0:06:04.69,Default,,0,0,0,,当我们执行到这里时，倒计时结束
Dialogue: 0,0:06:04.97,0:06:09.58,Default,,0,0,0,,于是就会执行 Countdown_Completed
Dialogue: 0,0:06:09.71,0:06:11.92,Default,,0,0,0,,我们得弄明白我们这里该做什么
Dialogue: 0,0:06:13.15,0:06:14.97,Default,,0,0,0,,就跟我之前说的那样，有两种场景
Dialogue: 0,0:06:14.97,0:06:17.39,Default,,0,0,0,,第一种场景是音乐正在播放
Dialogue: 0,0:06:17.39,0:06:20.20,Default,,0,0,0,,以及第二种，没有音乐播放
Dialogue: 0,0:06:20.67,0:06:23.23,Default,,0,0,0,,所以我需要跟踪状态
Dialogue: 0,0:06:23.23,0:06:28.23,Default,,0,0,0,,创建一个 _playingMusic boolean 值就可以追踪应用的状态
Dialogue: 0,0:06:31.93,0:06:34.34,Default,,0,0,0,,我要把这个值初始化为 false
Dialogue: 0,0:06:34.34,0:06:40.44,Default,,0,0,0,,一旦我们倒计时结束，该变量就能确定当前应用的状态了
Dialogue: 0,0:06:42.44,0:06:46.82,Default,,0,0,0,,所以，在这儿，如果我们没有在播放音乐
Dialogue: 0,0:06:46.82,0:06:51.82,Default,,0,0,0,,所以 if (!_playingMusic) 我们要做的就是
Dialogue: 0,0:06:53.66,0:06:58.66,Default,,0,0,0,,开始播放音乐
Dialogue: 0,0:07:01.38,0:07:06.09,Default,,0,0,0,,然后我们要做相反的事情，就是开始倒计时
Dialogue: 0,0:07:06.76,0:07:09.56,Default,,0,0,0,,冷却和倒计时是不同的
Dialogue: 0,0:07:09.56,0:07:13.06,Default,,0,0,0,,当正在播放音乐时，应该倒计时
Dialogue: 0,0:07:13.06,0:07:17.16,Default,,0,0,0,,并等待用户输入
Dialogue: 0,0:07:17.16,0:07:18.80,Default,,0,0,0,,然后判断正确歌曲是什么
Dialogue: 0,0:07:18.80,0:07:22.41,Default,,0,0,0,,所以我们给这个（方法）命名 StartCountdown
Dialogue: 0,0:07:25.42,0:07:29.49,Default,,0,0,0,,这里我们要把 _playingMusic 设置为 true
Dialogue: 0,0:07:29.49,0:07:34.49,Default,,0,0,0,,然后我要改变一个东西
Dialogue: 0,0:07:39.18,0:07:44.18,Default,,0,0,0,,把 ProgressBar 控件的颜色改成红色
Dialogue: 0,0:07:48.48,0:07:50.95,Default,,0,0,0,,这句话就是要给那个做准备
Dialogue: 0,0:07:51.20,0:07:56.20,Default,,0,0,0,,然后 MyProgressBar.Foreground = brush;
Dialogue: 0,0:07:58.94,0:08:02.13,Default,,0,0,0,,然后在 InstructionTextBlock 上，我们要显示
Dialogue: 0,0:08:02.80,0:08:11.14,Default,,0,0,0,,“{\s1}走！{\s0} 开始！”，现在 {\s1}是听力考试时间{\s0} 该听音乐了
Dialogue: 0,0:08:11.14,0:08:14.05,Default,,0,0,0,,还要设置前景色
Dialogue: 0,0:08:14.05,0:08:17.34,Default,,0,0,0,,也设置为红色
Dialogue: 0,0:08:18.35,0:08:20.98,Default,,0,0,0,,然后我们需要再次调用 CountDown.Begin()
Dialogue: 0,0:08:24.13,0:08:27.72,Default,,0,0,0,,在冷却阶段，我们要做相反的事情
Dialogue: 0,0:08:27.75,0:08:33.26,Default,,0,0,0,,来到 StartCooldown 方法，我们要设置 _playingMusic 为 false
Dialogue: 0,0:08:34.43,0:08:38.98,Default,,0,0,0,,以及，让把这段东西复制一个
Dialogue: 0,0:08:43.93,0:08:45.78,Default,,0,0,0,,红色改成蓝色
Dialogue: 0,0:08:48.73,0:08:51.35,Default,,0,0,0,,然后是 InstructionTextBlock 上
Dialogue: 0,0:08:51.35,0:09:01.15,Default,,0,0,0,,文字改成 string.Format("准备好第｛0｝局...", ...);（Get ready for round ...）
Dialogue: 0,0:09:01.15,0:09:03.63,Default,,0,0,0,,我们得知道这是第几局
Dialogue: 0,0:09:03.63,0:09:06.68,Default,,0,0,0,,所以这里我们需要
Dialogue: 0,0:09:06.73,0:09:08.78,Default,,0,0,0,,记录我们在第几局
Dialogue: 0,0:09:09.65,0:09:10.66,Default,,0,0,0,,往上翻到这儿
Dialogue: 0,0:09:12.05,0:09:15.94,Default,,0,0,0,,声明并初始化一个字段 int _round = 0;
Dialogue: 0,0:09:17.65,0:09:20.04,Default,,0,0,0,,看起来是对的
Dialogue: 0,0:09:20.59,0:09:23.10,Default,,0,0,0,,然后回到这儿，我们需要……
Dialogue: 0,0:09:24.87,0:09:28.54,Default,,0,0,0,,_round + 1 因为这将是下一局
Dialogue: 0,0:09:28.54,0:09:31.46,Default,,0,0,0,,下一局是第 _round + 1 局对吧？
Dialogue: 0,0:09:31.46,0:09:35.86,Default,,0,0,0,,以及还要设置 InstructionTextBlock.Foreground
Dialogue: 0,0:09:35.86,0:09:39.03,Default,,0,0,0,,设置为 brush
Dialogue: 0,0:09:41.34,0:09:43.87,Default,,0,0,0,,然后我们要调用 StartCountdown()
Dialogue: 0,0:09:46.62,0:09:50.59,Default,,0,0,0,,在这里我需要做的是……
Dialogue: 0,0:09:50.59,0:09:52.45,Default,,0,0,0,,这里要做好多事儿
Dialogue: 0,0:09:52.45,0:09:57.45,Default,,0,0,0,,比如我们需要评估用户的选择
Dialogue: 0,0:09:58.59,0:10:01.57,Default,,0,0,0,,打分，诸如此类，然后
Dialogue: 0,0:10:01.57,0:10:05.50,Default,,0,0,0,,在最后我们还要……
Dialogue: 0,0:10:07.07,0:10:12.07,Default,,0,0,0,,还要再次开始冷却过程
Dialogue: 0,0:10:12.97,0:10:14.96,Default,,0,0,0,,所以这里要有一个 StartCountdown()
Dialogue: 0,0:10:15.61,0:10:18.22,Default,,0,0,0,,好，来看看现在怎么样
Dialogue: 0,0:10:25.13,0:10:28.15,Default,,0,0,0,,现在我们要准备好第一局
Dialogue: 0,0:10:32.89,0:10:36.00,Default,,0,0,0,,可以看到现在我们在播放了
Dialogue: 0,0:10:37.07,0:10:39.39,Default,,0,0,0,,理论上，我会在这里做一个选择
Dialogue: 0,0:10:39.39,0:10:41.09,Default,,0,0,0,,然后它就会重设（状态），但是我现在要继续等待
Dialogue: 0,0:10:41.09,0:10:43.04,Default,,0,0,0,,让它倒计时到完成
Dialogue: 0,0:10:44.26,0:10:47.19,Default,,0,0,0,,好，现在我们只是在等待
Dialogue: 0,0:10:47.19,0:10:50.66,Default,,0,0,0,,现在即使选对了也只能得到最少的分数
Dialogue: 0,0:10:50.66,0:10:54.20,Default,,0,0,0,,但是如果选择一个选择一首歌会开始下一局
Dialogue: 0,0:10:54.20,0:10:57.97,Default,,0,0,0,,（啊哦~）我们需要递增局数变量（_round）
Dialogue: 0,0:10:58.00,0:11:02.56,Default,,0,0,0,,这是我们这里要做的事情之一
Dialogue: 0,0:11:03.55,0:11:08.55,Default,,0,0,0,,应该是 _round++;
Dialogue: 0,0:11:09.98,0:11:13.10,Default,,0,0,0,,啊哦~我想要写的是 ++
Dialogue: 0,0:11:13.12,0:11:14.00,Default,,0,0,0,,这样可以吗?
Dialogue: 0,0:11:14.00,0:11:14.83,Default,,0,0,0,,可以
Dialogue: 0,0:11:15.96,0:11:18.99,Default,,0,0,0,,搞定，我们让倒计时可以运作了
Dialogue: 0,0:11:19.00,0:11:21.07,Default,,0,0,0,,让 Storyboard 可以运转了
Dialogue: 0,0:11:21.08,0:11:24.27,Default,,0,0,0,,我们需要选择我们想要播放的下一首歌
Dialogue: 0,0:11:24.28,0:11:31.49,Default,,0,0,0,,这应该在冷却结束的时候进行
Dialogue: 0,0:11:31.50,0:11:35.17,Default,,0,0,0,,当冷却结束，并且我们没有在播放音乐的话
Dialogue: 0,0:11:35.18,0:11:37.17,Default,,0,0,0,,那就说明我们该播放音乐了
Dialogue: 0,0:11:37.18,0:11:41.07,Default,,0,0,0,,于是，在这里我们想选一首歌，
Dialogue: 0,0:11:41.08,0:11:46.07,Default,,0,0,0,,我们可以这么实现 var song = PickSong();
Dialogue: 0,0:11:49.15,0:11:52.36,Default,,0,0,0,,我们现在还没有实现这个玩意儿，所以
Dialogue: 0,0:11:55.39,0:12:00.39,Default,,0,0,0,,咱们创建一个 private void PickSong()
Dialogue: 0,0:12:05.25,0:12:06.41,Default,,0,0,0,,不应该是 void
Dialogue: 0,0:12:06.41,0:12:08.64,Default,,0,0,0,,应该返回一个 Song
Dialogue: 0,0:12:17.50,0:12:20.36,Default,,0,0,0,,我们要做的事情是
Dialogue: 0,0:12:20.36,0:12:24.26,Default,,0,0,0,,第一步，我们需要使用 Random 类
Dialogue: 0,0:12:27.68,0:12:32.68,Default,,0,0,0,,并且，嗯，这里我的脑内小剧场是这样的
Dialogue: 0,0:12:36.93,0:12:37.87,Default,,0,0,0,,接下来我想做的是这个
Dialogue: 0,0:12:37.87,0:12:41.07,Default,,0,0,0,,我要有一个未使用歌曲列表
Dialogue: 0,0:12:41.07,0:12:44.69,Default,,0,0,0,,里面保存了我们还没调用的歌曲
Dialogue: 0,0:12:44.69,0:12:47.00,Default,,0,0,0,,这些歌曲来自我们一开始选出来的歌曲列表
Dialogue: 0,0:12:47.19,0:12:49.85,Default,,0,0,0,,所以从所有的歌曲中，选出那些歌曲
Dialogue: 0,0:12:49.85,0:13:02.20,Default,,0,0,0,,选出那些 Used 属性为 false 的歌曲\N这里我们需要给 Song 类增加另一个叫做 Used 的属性
Dialogue: 0,0:13:09.13,0:13:12.11,Default,,0,0,0,,以及，显然默认这个应该是
Dialogue: 0,0:13:12.11,0:13:17.11,Default,,0,0,0,,应该是 false，但是我们稍后会填充它
Dialogue: 0,0:13:17.85,0:13:20.93,Default,,0,0,0,,现在我们需要取出一个随机数
Dialogue: 0,0:13:20.93,0:13:25.93,Default,,0,0,0,,我们要用 Random.Next()来获得一个随机数
Dialogue: 0,0:13:28.77,0:13:33.39,Default,,0,0,0,,该数字要小于 unusedSongs.Count 的随机自然数
Dialogue: 0,0:13:33.64,0:13:36.23,Default,,0,0,0,,于是我们应该让 randomSong
Dialogue: 0,0:13:38.60,0:13:43.60,Default,,0,0,0,,被赋值为 unusedSongs.ElementAt(randomNumber
Dialogue: 0,0:13:47.10,0:13:52.10,Default,,0,0,0,,于是，这个 randomSong 现在是当前选择的歌曲
Dialogue: 0,0:13:52.90,0:13:56.22,Default,,0,0,0,,我要把它的 Selected 属性设置为 true
Dialogue: 0,0:13:56.22,0:14:00.43,Default,,0,0,0,,然后返回这个 randomSong，这样
Dialogue: 0,0:14:02.16,0:14:03.43,Default,,0,0,0,,我们选一首歌
Dialogue: 0,0:14:05.50,0:14:10.50,Default,,0,0,0,,然后我就要调用 MyMediaElement.SetSource（方法）
Dialogue: 0,0:14:13.90,0:14:18.90,Default,,0,0,0,,我想把它设置为我选出的这首歌
Dialogue: 0,0:14:19.98,0:14:24.54,Default,,0,0,0,,Song 类包含一个SongFile
Dialogue: 0,0:14:25.97,0:14:28.49,Default,,0,0,0,,对啦！
Dialogue: 0,0:14:28.49,0:14:33.49,Default,,0,0,0,,它是 StorageFile 类型的，为了调用
Dialogue: 0,0:14:35.59,0:14:38.29,Default,,0,0,0,,SetSource 方法，我需要给它两个参数
Dialogue: 0,0:14:38.29,0:14:41.83,Default,,0,0,0,,首先我要给它这个（数据 / 媒体）流
Dialogue: 0,0:14:41.83,0:14:46.11,Default,,0,0,0,,这个文件的流，所以我就是要先打开一下这个文件
Dialogue: 0,0:14:46.11,0:14:51.11,Default,,0,0,0,,然后弄一个指向这个文件的流
Dialogue: 0,0:14:52.47,0:14:55.62,Default,,0,0,0,,然后我要提供内容类型，就是 mimeType 参数
Dialogue: 0,0:14:55.73,0:14:57.97,Default,,0,0,0,,这很容易，我只要
Dialogue: 0,0:14:57.97,0:14:59.92,Default,,0,0,0,,使用一个叫做 ContentType 的属性
Dialogue: 0,0:15:00.15,0:15:02.35,Default,,0,0,0,,但是另一个（流参数），我就要
Dialogue: 0,0:15:02.35,0:15:04.88,Default,,0,0,0,,搞一些高端的东西
Dialogue: 0,0:15:04.89,0:15:09.89,Default,,0,0,0,,调用 Song.SongFile.OpenAsync而且我需要将
Dialogue: 0,0:15:10.51,0:15:13.17,Default,,0,0,0,,访问模式设置为只读
Dialogue: 0,0:15:13.17,0:15:14.64,Default,,0,0,0,,我们不会写这个文件
Dialogue: 0,0:15:15.09,0:15:18.90,Default,,0,0,0,,显然这个是异步方法，所以可以 await
Dialogue: 0,0:15:19.05,0:15:20.84,Default,,0,0,0,,我只要这么做……
Dialogue: 0,0:15:22.33,0:15:24.85,Default,,0,0,0,,事实上，我们还是把这段放到下一行吧
Dialogue: 0,0:15:24.85,0:15:26.53,Default,,0,0,0,,放到下一行，然后这样
Dialogue: 0,0:15:26.53,0:15:28.63,Default,,0,0,0,,然后这就可以使它异步执行了
Dialogue: 0,0:15:28.63,0:15:30.53,Default,,0,0,0,,异步的，用 async 修饰
Dialogue: 0,0:15:31.90,0:15:34.60,Default,,0,0,0,,（脑内：不用返回一个 Task 吗？）
Dialogue: 0,0:15:34.60,0:15:35.70,Default,,0,0,0,,（脑内：不知道要怎么样呢）
Dialogue: 0,0:15:35.70,0:15:39.97,Default,,0,0,0,,（脑内：这次不返回 Task，好！）
Dialogue: 0,0:15:40.64,0:15:44.84,Default,,0,0,0,,所以 MyMediaElement.SetSource
Dialogue: 0,0:15:44.84,0:15:47.26,Default,,0,0,0,,然后我要在音乐选择之后完成后
Dialogue: 0,0:15:47.26,0:15:49.47,Default,,0,0,0,,开始倒计时
Dialogue: 0,0:15:50.66,0:15:54.41,Default,,0,0,0,,咱们看看这里会发生什么
Dialogue: 0,0:15:54.72,0:15:57.49,Default,,0,0,0,,现在（这个项目）已经很接近一个可以运行的原型了
Dialogue: 0,0:15:59.18,0:16:01.42,Default,,0,0,0,,好，我们取得了所有的歌曲
Dialogue: 0,0:16:01.42,0:16:02.72,Default,,0,0,0,,现在咱们来准备好第一局
Dialogue: 0,0:16:02.72,0:16:04.36,Default,,0,0,0,,在第一局结束的时候，如果我们比较幸运
Dialogue: 0,0:16:04.36,0:16:09.37,Default,,0,0,0,,当 {\s1}血槽空了{\s0} 进度条到时间，当我们到达冷却步骤的尾声
Dialogue: 0,0:16:10.02,0:16:11.66,Default,,0,0,0,,啊，现在就是了
Dialogue: 0,0:16:11.69,0:16:14.19,Default,,0,0,0,,（正在播放音乐）
Dialogue: 0,0:16:16.00,0:16:18.34,Default,,0,0,0,,好，已经差不多跑起来了
Dialogue: 0,0:16:19.41,0:16:22.64,Default,,0,0,0,,在点击之后，我还要确认几个问题
Dialogue: 0,0:16:22.64,0:16:24.38,Default,,0,0,0,,他们是否点击了右边的歌曲，反之亦然
Dialogue: 0,0:16:24.38,0:16:26.48,Default,,0,0,0,,如果点击错误，我们应该怎么样
Dialogue: 0,0:16:26.48,0:16:27.99,Default,,0,0,0,,但是我们接下来会完成的
Dialogue: 0,0:16:29.64,0:16:33.32,Default,,0,0,0,,嗯，我觉得这个视频到这儿已经很不错了
Dialogue: 0,0:16:33.32,0:16:36.82,Default,,0,0,0,,下一个视频我们继续，那时我们将会
Dialogue: 0,0:16:36.82,0:16:39.50,Default,,0,0,0,,评判用户点击的项目
Dialogue: 0,0:16:39.50,0:16:42.11,Default,,0,0,0,,以及点击的得分
Dialogue: 0,0:16:42.11,0:16:45.32,Default,,0,0,0,,下面我们要做这个\N我们进展不错呢！
