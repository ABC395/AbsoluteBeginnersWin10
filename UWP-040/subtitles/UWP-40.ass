[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Scroll Position: 2
Active Line: 7

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.09,0:00:05.09,Default,,0,0,0,,翻译：scripter糖 （翻译酱）     审核：     压制：
Dialogue: 0,0:00:05.09,0:00:08.65,Default,,0,0,0,,Hi, 我是鲍勃，来自 www.learnvisualstudio.net （我是翻译酱，来自逗逼学院）
Dialogue: 0,0:00:08.65,0:00:11.01,Default,,0,0,0,,在这节课上我们要讨论一些有趣的东西
Dialogue: 0,0:00:11.01,0:00:12.91,Default,,0,0,0,,一开始是学习数据绑定
Dialogue: 0,0:00:12.91,0:00:16.61,Default,,0,0,0,,但之后我们会谈到两个允许我们绑定数据的控件
Dialogue: 0,0:00:16.61,0:00:20.39,Default,,0,0,0,,一个是好看的列表，一个是好看的网格
Dialogue: 0,0:00:20.39,0:00:21.69,Default,,0,0,0,,让我们开始学习数据绑定吧
Dialogue: 0,0:00:21.69,0:00:28.36,Default,,0,0,0,,自从1993年，在windows平台上的程序就到处在使用
Dialogue: 0,0:00:28.81,0:00:32.95,Default,,0,0,0,,数据绑定是一个处理数据提取的办法
Dialogue: 0,0:00:32.95,0:00:37.95,Default,,0,0,0,,能够把数据发送到用户可以使用的接口上面
Dialogue: 0,0:00:38.58,0:00:41.07,Default,,0,0,0,,既然这样，我们可以使用一些对象
Dialogue: 0,0:00:41.07,0:00:43.56,Default,,0,0,0,,一个简单的对象
Dialogue: 0,0:00:43.56,0:00:47.31,Default,,0,0,0,,比如一个汽车对象，一个书对象，它们都会有一些属性
Dialogue: 0,0:00:47.31,0:00:51.49,Default,,0,0,0,,一个书对象可能会有图片
Dialogue: 0,0:00:51.49,0:00:53.96,Default,,0,0,0,,它的作者，它的书名，以及它的简介
Dialogue: 0,0:00:53.96,0:00:58.96,Default,,0,0,0,,我们会把一个书的对象做成集合
Dialogue: 0,0:00:59.17,0:01:01.87,Default,,0,0,0,,并呈现在屏幕上反馈给用户
Dialogue: 0,0:01:01.87,0:01:02.94,Default,,0,0,0,,在一个好看的表格上
Dialogue: 0,0:01:02.94,0:01:05.50,Default,,0,0,0,,我们可能需要把书的图片放在最上面
Dialogue: 0,0:01:05.50,0:01:07.86,Default,,0,0,0,,然后书的图片上要有标题
Dialogue: 0,0:01:07.86,0:01:09.87,Default,,0,0,0,,应该还需要一个简短的描述在下面
Dialogue: 0,0:01:09.87,0:01:11.56,Default,,0,0,0,,在描述下有作者的名字
Dialogue: 0,0:01:11.56,0:01:13.11,Default,,0,0,0,,让我们开始做一个对象的模板
Dialogue: 0,0:01:13.11,0:01:20.88,Default,,0,0,0,,并让它能够展示很多书本到屏幕上
Dialogue: 0,0:01:20.89,0:01:23.69,Default,,0,0,0,, GridView 可以做到这些
Dialogue: 0,0:01:23.69,0:01:25.45,Default,,0,0,0,, ListView 一样也可以
Dialogue: 0,0:01:29.45,0:01:32.58,Default,,0,0,0,,我们之后就会展示一个关于这个的例子
Dialogue: 0,0:01:32.59,0:01:35.25,Default,,0,0,0,,如你所见, 我创建了一个项目 xBindDataExample.
Dialogue: 0,0:01:35.25,0:01:38.78,Default,,0,0,0,,之所以这么命名你很快就就可以知道原因了
Dialogue: 0,0:01:38.78,0:01:41.62,Default,,0,0,0,,你可以看见
Dialogue: 0,0:01:41.62,0:01:42.71,Default,,0,0,0,,我已经提前做了很多工作
Dialogue: 0,0:01:42.71,0:01:45.47,Default,,0,0,0,,让我们把注意力转到Book class 来
Dialogue: 0,0:01:45.47,0:01:47.85,Default,,0,0,0,,在这个Models文件夹中
Dialogue: 0,0:01:47.85,0:01:49.55,Default,,0,0,0,,这是一个简单的类
Dialogue: 0,0:01:49.55,0:01:52.55,Default,,0,0,0,,当我提到要构建一个 CLR 对象时
Dialogue: 0,0:01:52.55,0:01:55.31,Default,,0,0,0,,就是在说构建一个简单的对象
Dialogue: 0,0:01:55.32,0:01:57.39,Default,,0,0,0,,它们没有方法，只有属性
Dialogue: 0,0:01:57.39,0:02:02.39,Default,,0,0,0,,这个简单的图书类拥有 Bokid ,title,author等属性
Dialogue: 0,0:02:03.01,0:02:06.45,Default,,0,0,0,,然后还有一个CoverImage
Dialogue: 0,0:02:06.45,0:02:11.45,Default,,0,0,0,,这会成为我放在这里的图片资源的引用
Dialogue: 0,0:02:12.35,0:02:14.53,Default,,0,0,0,,1.png, 10.png.
Dialogue: 0,0:02:14.53,0:02:15.85,Default,,0,0,0,,你可以看见我鼠标环绕的地方就是我们所需要的
Dialogue: 0,0:02:15.85,0:02:20.66,Default,,0,0,0,,一些我创建的书本封面
Dialogue: 0,0:02:20.66,0:02:24.03,Default,,0,0,0,,在下面，我有在同一文件中创建一个其他的类.
Dialogue: 0,0:02:24.03,0:02:25.60,Default,,0,0,0,,理论上, 我应该把它们分离出去,
Dialogue: 0,0:02:25.61,0:02:29.58,Default,,0,0,0,,但我把任务委托给了这个类
Dialogue: 0,0:02:29.58,0:02:31.41,Default,,0,0,0,,名字是BookManager
Dialogue: 0,0:02:31.41,0:02:33.13,Default,,0,0,0,,我会创建一个Book的新实例
Dialogue: 0,0:02:33.13,0:02:36.80,Default,,0,0,0,,并把它们加入一个集合中，一个包含Book的List
Dialogue: 0,0:02:36.81,0:02:40.87,Default,,0,0,0,,之后返回这个List给调用者
Dialogue: 0,0:02:40.87,0:02:42.63,Default,,0,0,0,,在这里你可以看见
Dialogue: 0,0:02:42.63,0:02:46.79,Default,,0,0,0,,我已经在初始化这些对象时设置好了它们的具体属性
Dialogue: 0,0:02:46.79,0:02:51.35,Default,,0,0,0,,每一个书本的属性值都是不同的
Dialogue: 0,0:02:51.35,0:02:54.13,Default,,0,0,0,,再看一下
Dialogue: 0,0:02:54.13,0:02:59.13,Default,,0,0,0,,有Title, Author, CoverImage.
Dialogue: 0,0:02:59.74,0:03:02.40,Default,,0,0,0,,我们稍后就会在这里使用这个方法
Dialogue: 0,0:03:02.40,0:03:06.49,Default,,0,0,0,,来拿到信息，从而绑定到Grid上
Dialogue: 0,0:03:06.49,0:03:08.25,Default,,0,0,0,,让我们来加工下Grid本身吧
Dialogue: 0,0:03:08.25,0:03:10.40,Default,,0,0,0,,首先, 你可以在MainPge.xaml这个文件中看见
Dialogue: 0,0:03:10.40,0:03:14.06,Default,,0,0,0,,我已经提前布局设计了这个Grid
Dialogue: 0,0:03:14.06,0:03:16.91,Default,,0,0,0,,这个页面会有两行
Dialogue: 0,0:03:16.91,0:03:19.08,Default,,0,0,0,,上面一行将是我们工作的部分
Dialogue: 0,0:03:19.09,0:03:21.80,Default,,0,0,0,,下面的一行则只会包含一个TextBox
Dialogue: 0,0:03:21.80,0:03:24.07,Default,,0,0,0,,在之后不管什么时候我们选择了一本图书
Dialogue: 0,0:03:24.07,0:03:26.56,Default,,0,0,0,,我会给你展示下这个选择事件的处理方法
Dialogue: 0,0:03:26.56,0:03:28.64,Default,,0,0,0,,当其中被选择以后这个被选择的对象的信息会被抓取
Dialogue: 0,0:03:28.64,0:03:31.61,Default,,0,0,0,,并以文本的形式被输出到下面的TextBlock中
Dialogue: 0,0:03:31.61,0:03:33.66,Default,,0,0,0,,我们接下来花的大部分时间将会用在构建GridView上
Dialogue: 0,0:03:33.67,0:03:35.95,Default,,0,0,0,,事实上是增加一个GridView
Dialogue: 0,0:03:35.95,0:03:37.46,Default,,0,0,0,,并将它绑定上数据
Dialogue: 0,0:03:37.46,0:03:40.46,Default,,0,0,0,,数据的话我们将从我们创建的Book.cs文件中获得
Dialogue: 0,0:03:40.46,0:03:45.46,Default,,0,0,0,,来自Bookmanager这个类
Dialogue: 0,0:03:46.06,0:03:48.61,Default,,0,0,0,,让我们开始构建GridView吧！
Dialogue: 0,0:03:48.61,0:03:50.93,Default,,0,0,0,,一件你得为这个GridView的事情是
Dialogue: 0,0:03:50.93,0:03:52.88,Default,,0,0,0,,创建一个Template
Dialogue: 0,0:03:52.88,0:03:56.65,Default,,0,0,0,,这决定了每个独立的图书对象如何呈现在屏幕上
Dialogue: 0,0:03:56.65,0:03:59.14,Default,,0,0,0,,让我来输入这个
Dialogue: 0,0:03:59.14,0:04:04.14,Default,,0,0,0,,GridView.ItemTemplate.
Dialogue: 0,0:04:06.27,0:04:09.99,Default,,0,0,0,,这个ItemTemplate包含一个DataTemplate.
Dialogue: 0,0:04:09.99,0:04:14.81,Default,,0,0,0,,让我们来思考一下这个DataTemplate
Dialogue: 0,0:04:14.93,0:04:18.13,Default,,0,0,0,,在这个 DataTemplate 我们将基本的布局
Dialogue: 0,0:04:18.13,0:04:21.80,Default,,0,0,0,,我们将如何将具体每一本书呈现在屏幕上
Dialogue: 0,0:04:21.81,0:04:24.42,Default,,0,0,0,,我们可以使用Grid, StackPanels 等任何控件
Dialogue: 0,0:04:24.43,0:04:27.81,Default,,0,0,0,,我们已经知道它们的使用办法
Dialogue: 0,0:04:27.81,0:04:29.59,Default,,0,0,0,,之后我想把这个做的简单一些
Dialogue: 0,0:04:29.59,0:04:31.23,Default,,0,0,0,,我想显示这个图书的图片
Dialogue: 0,0:04:31.23,0:04:33.35,Default,,0,0,0,,之后是简介与作者
Dialogue: 0,0:04:33.35,0:04:35.30,Default,,0,0,0,,也许标题应该被设计的大一点
Dialogue: 0,0:04:35.30,0:04:37.74,Default,,0,0,0,,作者名字会使用小的，亮的字体
Dialogue: 0,0:04:37.74,0:04:38.67,Default,,0,0,0,,Ok?
Dialogue: 0,0:04:38.67,0:04:40.28,Default,,0,0,0,,我们将从Image控件开始
Dialogue: 0,0:04:40.29,0:04:44.72,Default,,0,0,0,,之后下面会有两个TextBock
Dialogue: 0,0:04:44.72,0:04:49.72,Default,,0,0,0,,这个TextBlock会......
Dialogue: 0,0:04:49.84,0:04:52.39,Default,,0,0,0,,它们之中的一个会包含书名
Dialogue: 0,0:04:52.39,0:04:57.39,Default,,0,0,0,,我们将它的FontSize设置成16
Dialogue: 0,0:04:57.40,0:05:00.23,Default,,0,0,0,,下面这个的字体会小一点
Dialogue: 0,0:05:00.23,0:05:04.38,Default,,0,0,0,,就设置成10吧，很小了
Dialogue: 0,0:05:04.38,0:05:08.73,Default,,0,0,0,,这个Image的话我们得确保它的宽度
Dialogue: 0,0:05:08.73,0:05:13.72,Default,,0,0,0,,不超过150像素
Dialogue: 0,0:05:13.72,0:05:16.25,Default,,0,0,0,,那就让它的 Width="150".
Dialogue: 0,0:05:16.25,0:05:20.85,Default,,0,0,0,,这些设置都是为了确保这些东西都能正常运行
Dialogue: 0,0:05:20.85,0:05:25.85,Default,,0,0,0,,接下来我们将告诉GridView它的绑定对象
Dialogue: 0,0:05:26.89,0:05:29.55,Default,,0,0,0,,也就是我们最后将绑定上去的东西
Dialogue: 0,0:05:29.55,0:05:31.45,Default,,0,0,0,,为了做这个
Dialogue: 0,0:05:31.45,0:05:36.45,Default,,0,0,0,,我们来放置一个ItemSource属性
Dialogue: 0,0:05:38.01,0:05:42.33,Default,,0,0,0,,我们来设置一个绑定的新类型, x:Bind,
Dialogue: 0,0:05:42.33,0:05:45.65,Default,,0,0,0,,并且我们会把它设置成公开的属性
Dialogue: 0,0:05:45.65,0:05:50.01,Default,,0,0,0,,我们会把在后面创建的代码命名为Books
Dialogue: 0,0:05:50.01,0:05:53.62,Default,,0,0,0,,我们来创建一个名叫Books公开属性
Dialogue: 0,0:05:53.62,0:05:55.68,Default,,0,0,0,,在我们的MainPage.xaml 文件中
Dialogue: 0,0:05:55.68,0:05:59.20,Default,,0,0,0,,Books 会是这种类型: List of Book.
Dialogue: 0,0:05:59.20,0:06:02.95,Default,,0,0,0,,就像BookManager的返回值一样
Dialogue: 0,0:06:02.95,0:06:05.39,Default,,0,0,0,,现在，我们来告诉 DatatTemplate
Dialogue: 0,0:06:05.39,0:06:09.14,Default,,0,0,0,,它们将被期望使用的数据类型
Dialogue: 0,0:06:09.14,0:06:14.14,Default,,0,0,0,,为了做这个, 我将设置一个属性
Dialogue: 0,0:06:14.49,0:06:19.49,Default,,0,0,0,,在这个DataTemplate上， x:DataType.
Dialogue: 0,0:06:20.18,0:06:22.28,Default,,0,0,0,,我想将它的类型设置为Book.
Dialogue: 0,0:06:22.28,0:06:26.12,Default,,0,0,0,,为了使这个类在 XAML可以被使用
Dialogue: 0,0:06:26.12,0:06:31.12,Default,,0,0,0,,我需要在这个页面的顶部增加一个XML命名空间
Dialogue: 0,0:06:31.36,0:06:36.24,Default,,0,0,0,,我将输入的是...... xmlns:data=
Dialogue: 0,0:06:36.25,0:06:39.20,Default,,0,0,0,,之后我们会给它一个命名空间
Dialogue: 0,0:06:39.20,0:06:42.88,Default,,0,0,0,,关于这个应用, 那就是xBindDataExample.
Dialogue: 0,0:06:42.88,0:06:47.88,Default,,0,0,0,,这个命名空间就是我们Book类被放置的地方
Dialogue: 0,0:06:49.14,0:06:50.84,Default,,0,0,0,,既然这样, 命名空间是在Models下的
Dialogue: 0,0:06:50.84,0:06:52.49,Default,,0,0,0,,是因为我将它放在了Models文件夹里面
Dialogue: 0,0:06:52.49,0:06:54.77,Default,,0,0,0,,对吧？
Dialogue: 0,0:06:54.77,0:06:56.72,Default,,0,0,0,,现在我应该来做这个
Dialogue: 0,0:06:56.72,0:07:00.97,Default,,0,0,0,,data:Book
Dialogue: 0,0:07:00.97,0:07:05.14,Default,,0,0,0,,之后, 我将把这里的每一个控件都设置上一个属性
Dialogue: 0,0:07:05.14,0:07:10.14,Default,,0,0,0,,等同于Book类中的属性
Dialogue: 0,0:07:12.45,0:07:15.50,Default,,0,0,0,,既然这样我将设置 Source="{x:Bind CoverImage}"
Dialogue: 0,0:07:15.50,0:07:20.37,Default,,0,0,0,,Source="{x:Bind CoverImage}".
Dialogue: 0,0:07:20.37,0:07:23.81,Default,,0,0,0,,(输入中~)
Dialogue: 0,0:07:23.81,0:07:28.07,Default,,0,0,0,,这里我设置了文本属性
Dialogue: 0,0:07:28.07,0:07:33.07,Default,,0,0,0,,并把它绑定了Title属性
Dialogue: 0,0:07:33.90,0:07:37.50,Default,,0,0,0,,最后,我会设置第二个TextBlock的属性
Dialogue: 0,0:07:37.50,0:07:42.35,Default,,0,0,0,,并把它绑定上作者的名字（author属性）
Dialogue: 0,0:07:42.35,0:07:44.24,Default,,0,0,0,,我们可以看到下面是有蓝色波浪线提示错误的
Dialogue: 0,0:07:44.24,0:07:47.08,Default,,0,0,0,,这个属性只能被设置一次
Dialogue: 0,0:07:47.08,0:07:48.38,Default,,0,0,0,,看来我犯了这个错误？
Dialogue: 0,0:07:48.38,0:07:51.17,Default,,0,0,0,,需要把他们放进StackPanel中
Dialogue: 0,0:07:51.17,0:07:53.57,Default,,0,0,0,,忘掉这个，我之前做的这个
Dialogue: 0,0:07:53.57,0:07:58.57,Default,,0,0,0,,这应该修复了这个错误，棒
Dialogue: 0,0:07:58.78,0:08:01.84,Default,,0,0,0,,很好, 接下来我们唯一需要做的事情
Dialogue: 0,0:08:01.84,0:08:06.84,Default,,0,0,0,,是确保我创建的是一个可以访问的属性
Dialogue: 0,0:08:07.78,0:08:10.12,Default,,0,0,0,,在我的MainPage.xaml.cs文件中
Dialogue: 0,0:08:10.12,0:08:13.38,Default,,0,0,0,,把Books这个属性放置在这里
Dialogue: 0,0:08:13.38,0:08:15.74,Default,,0,0,0,,那我们怎么做呢？
Dialogue: 0,0:08:15.74,0:08:17.58,Default,,0,0,0,,好, 首先
Dialogue: 0,0:08:17.58,0:08:21.22,Default,,0,0,0,,在我们的 MainPage 类中.......
Dialogue: 0,0:08:21.22,0:08:23.26,Default,,0,0,0,,这个可以是 public 或 private, 这个没关系
Dialogue: 0,0:08:23.26,0:08:26.16,Default,,0,0,0,,我将它设置成private好了
Dialogue: 0,0:08:26.16,0:08:29.74,Default,,0,0,0,,List{\b1}, 我们将它叫做Books.
Dialogue: 0,0:08:29.74,0:08:32.10,Default,,0,0,0,,如果你没有看见这个（Book类），记住.......
Dialogue: 0,0:08:32.10,0:08:37.10,Default,,0,0,0,,我已经提前"using" Models 的命名空间
Dialogue: 0,0:08:40.10,0:08:43.20,Default,,0,0,0,,你可以同时按下 Control+"." （当鼠标光标在 List 后的 <> 内时）
Dialogue: 0,0:08:43.20,0:08:48.20,Default,,0,0,0,,这时候可以弹出选项（鲍勃没演示，翻译酱亲自尝试了）
Dialogue: 0,0:08:48.22,0:08:50.76,Default,,0,0,0,,在这里我初始化Books
Dialogue: 0,0:08:50.77,0:08:55.46,Default,,0,0,0,,我设定Books = BookManager.GetBooks();.
Dialogue: 0,0:08:55.46,0:08:58.06,Default,,0,0,0,,这会返回我一个book类的List
Dialogue: 0,0:08:58.06,0:09:01.45,Default,,0,0,0,,现在, 我认为我们已经准备好了
Dialogue: 0,0:09:01.45,0:09:05.23,Default,,0,0,0,,开始运行程序吧
Dialogue: 0,0:09:05.23,0:09:06.28,Default,,0,0,0,,Ok.
Dialogue: 0,0:09:06.28,0:09:11.15,Default,,0,0,0,,你可以看见这有很多本书
Dialogue: 0,0:09:11.15,0:09:12.36,Default,,0,0,0,,13本书.
Dialogue: 0,0:09:12.36,0:09:14.14,Default,,0,0,0,,现在这儿有些格式我还可以改一下
Dialogue: 0,0:09:14.15,0:09:16.31,Default,,0,0,0,,我认为我应该把文字居中（center）
Dialogue: 0,0:09:16.31,0:09:18.85,Default,,0,0,0,,right underneath the book itself
Dialogue: 0,0:09:18.85,0:09:21.99,Default,,0,0,0,,还需要一点点的间距
Dialogue: 0,0:09:22.00,0:09:22.98,Default,,0,0,0,,这样应该会自然很多
Dialogue: 0,0:09:22.98,0:09:24.53,Default,,0,0,0,,但是，最重要的是，这个看起来相当漂亮
Dialogue: 0,0:09:24.53,0:09:27.09,Default,,0,0,0,,注意下这个GridView的性质
Dialogue: 0,0:09:27.09,0:09:30.04,Default,,0,0,0,,当你缩小它的宽度
Dialogue: 0,0:09:30.04,0:09:32.58,Default,,0,0,0,,列会变少
Dialogue: 0,0:09:32.58,0:09:36.48,Default,,0,0,0,,行数也相应的随之而增多
Dialogue: 0,0:09:36.48,0:09:38.84,Default,,0,0,0,,来做两个快速的改变
Dialogue: 0,0:09:38.84,0:09:43.74,Default,,0,0,0,,对这个模板
Dialogue: 0,0:09:43.74,0:09:48.74,Default,,0,0,0,,改变一下整体的一些属性
Dialogue: 0,0:09:50.58,0:09:52.44,Default,,0,0,0,,设定HorizontalAlignment="Center"
Dialogue: 0,0:09:52.44,0:09:58.00,Default,,0,0,0,,并在每一个TextBlock上定义改属性
Dialogue: 0,0:09:58.03,0:10:03.03,Default,,0,0,0,,(哒哒哒哒)
Dialogue: 0,0:10:03.41,0:10:04.76,Default,,0,0,0,,很好, 这样的话看起来应该会好一点
Dialogue: 0,0:10:04.76,0:10:07.06,Default,,0,0,0,,让我们再看一会代码
Dialogue: 0,0:10:07.06,0:10:10.40,Default,,0,0,0,,接下来我想让它们可以被选择
Dialogue: 0,0:10:10.40,0:10:11.63,Default,,0,0,0,,它们中的任何被选择时
Dialogue: 0,0:10:11.64,0:10:14.15,Default,,0,0,0,,能够反馈回它们自身的信息
Dialogue: 0,0:10:14.15,0:10:18.24,Default,,0,0,0,,我们要做的是给GridView做两个小改动
Dialogue: 0,0:10:18.24,0:10:21.60,Default,,0,0,0,,首先，我们要使它可以被点击
Dialogue: 0,0:10:21.60,0:10:26.60,Default,,0,0,0,,我们来添加一个声明
Dialogue: 0,0:10:27.63,0:10:28.91,Default,,0,0,0,,接着把它设置成true
Dialogue: 0,0:10:28.91,0:10:30.33,Default,,0,0,0,,现在我们可以在每一个item上进行点击
Dialogue: 0,0:10:30.33,0:10:33.66,Default,,0,0,0,,然后给这个点击事件添加一个处理方法
Dialogue: 0,0:10:33.66,0:10:38.51,Default,,0,0,0,,接着设置EventHandler    我们需要.......
Dialogue: 0,0:10:38.51,0:10:41.72,Default,,0,0,0,,(敲击键盘ing)
Dialogue: 0,0:10:41.72,0:10:45.76,Default,,0,0,0,,设置 ItemClick 事件为一个新的EventHandler.
Dialogue: 0,0:10:45.76,0:10:47.95,Default,,0,0,0,,GridView_ItemClick 现在已经准备就绪
Dialogue: 0,0:10:47.95,0:10:52.95,Default,,0,0,0,,我们来稍微看一下
Dialogue: 0,0:10:53.09,0:10:55.35,Default,,0,0,0,,我准备看下这里有没有可以改动的东西
Dialogue: 0,0:10:55.36,0:10:59.99,Default,,0,0,0,,先把代码布局做好看点（鲍勃实力演出）
Dialogue: 0,0:10:59.99,0:11:02.60,Default,,0,0,0,,很好, 现在回到 MainPage.xaml.cs中来
Dialogue: 0,0:11:02.60,0:11:09.91,Default,,0,0,0,,你可以看见我们得到了一个ItemClick和一个e
Dialogue: 0,0:11:09.99,0:11:14.39,Default,,0,0,0,,"e" 会告诉我们ClickedItem（被点击的对象）， 因此我们可以捕获它
Dialogue: 0,0:11:14.39,0:11:19.39,Default,,0,0,0,,接着我们来改变一下这个ClickedItem|
Dialogue: 0,0:11:19.80,0:11:22.34,Default,,0,0,0,,Var book =...
Dialogue: 0,0:11:22.35,0:11:24.84,Default,,0,0,0,,现在我们有一个Book对象
Dialogue: 0,0:11:24.84,0:11:27.29,Default,,0,0,0,,并且就是在屏幕上被点击的那个Book
Dialogue: 0,0:11:27.29,0:11:31.57,Default,,0,0,0,,ResultTextBlock......
Dialogue: 0,0:11:31.57,0:11:34.23,Default,,0,0,0,,已经提前准备好了
Dialogue: 0,0:11:34.23,0:11:37.59,Default,,0,0,0,,输入"You selected"
Dialogue: 0,0:11:37.59,0:11:42.59,Default,,0,0,0,,之后再加上书的Title（书名）
Dialogue: 0,0:11:44.21,0:11:45.59,Default,,0,0,0,,好
Dialogue: 0,0:11:45.59,0:11:49.87,Default,,0,0,0,,再次运行这个程序
Dialogue: 0,0:11:49.87,0:11:51.02,Default,,0,0,0,,很好
Dialogue: 0,0:11:51.03,0:11:54.83,Default,,0,0,0,,看见来比之前好了一些
Dialogue: 0,0:11:54.83,0:11:58.59,Default,,0,0,0,,可以看见当我点击它们的时候
Dialogue: 0,0:11:58.59,0:12:00.39,Default,,0,0,0,,能够反馈我们选择了什么
Dialogue: 0,0:12:00.39,0:12:04.28,Default,,0,0,0,,相当酷
Dialogue: 0,0:12:04.28,0:12:09.28,Default,,0,0,0,,这里还有很多事情我们可以做
Dialogue: 0,0:12:10.38,0:12:13.59,Default,,0,0,0,,比如说这个 DataTemplate
Dialogue: 0,0:12:13.60,0:12:16.04,Default,,0,0,0,,我们假如需要再次使用它该怎么做呢？
Dialogue: 0,0:12:16.04,0:12:20.07,Default,,0,0,0,,好，那就让它照我们的想法来
Dialogue: 0,0:12:20.07,0:12:25.07,Default,,0,0,0,,我们可以把它们剪切出来
Dialogue: 0,0:12:31.05,0:12:33.43,Default,,0,0,0,,之后将它放入一个 Page resource中
Dialogue: 0,0:12:33.44,0:12:37.07,Default,,0,0,0,,甚至 application resource 里也可以
Dialogue: 0,0:12:37.07,0:12:39.05,Default,,0,0,0,,当我们需要在其他命名空间使用它时
Dialogue: 0,0:12:39.06,0:12:41.35,Default,,0,0,0,,我们所需要做的
Dialogue: 0,0:12:41.35,0:12:45.61,Default,,0,0,0,,就是给它一个key就可以了
Dialogue: 0,0:12:45.61,0:12:49.40,Default,,0,0,0,,BookDataTemplate.
Dialogue: 0,0:12:49.40,0:12:52.18,Default,,0,0,0,,
Dialogue: 0,0:12:52.18,0:12:57.18,Default,,0,0,0,,我移除这些代码
Dialogue: 0,0:12:57.96,0:13:02.96,Default,,0,0,0,,并加上 ItemTemplate=StaticResource
Dialogue: 0,0:13:04.49,0:13:06.69,Default,,0,0,0,,就像我们使用其他的STYLE 一样     （比如数据绑定，居中等等）
Dialogue: 0,0:13:06.69,0:13:10.41,Default,,0,0,0,,我刚才已经把之前的 datatemplate 命名（key）写做 BookDataTemplate
Dialogue: 0,0:13:10.41,0:13:13.89,Default,,0,0,0,,现在运行起来应该会和之前一样
Dialogue: 0,0:13:13.89,0:13:16.69,Default,,0,0,0,,来确认一下
Dialogue: 0,0:13:16.70,0:13:18.61,Default,,0,0,0,,如果我们有多个Pages 在我们的app中
Dialogue: 0,0:13:18.62,0:13:20.65,Default,,0,0,0,,那就可能要用一样的DataTemplate
Dialogue: 0,0:13:20.65,0:13:21.95,Default,,0,0,0,,照之前那样做，我们就能再次使用它们
Dialogue: 0,0:13:21.95,0:13:22.91,Default,,0,0,0,,好
Dialogue: 0,0:13:22.91,0:13:24.47,Default,,0,0,0,,这样我们就能方便的使用它们
Dialogue: 0,0:13:24.47,0:13:27.77,Default,,0,0,0,,先把它们移出来
Dialogue: 0,0:13:27.77,0:13:28.99,Default,,0,0,0,,之后在这里作为引用
Dialogue: 0,0:13:28.99,0:13:32.31,Default,,0,0,0,,接着我们就可以使用它们了
Dialogue: 0,0:13:33.63,0:13:36.65,Default,,0,0,0,,在我们得出结论之前我想给你展示另一个例子（邪恶脸~）
Dialogue: 0,0:13:36.65,0:13:40.63,Default,,0,0,0,,同样的例子我们使用 ListView 来展示
Dialogue: 0,0:13:40.63,0:13:44.13,Default,,0,0,0,,这个的代码基本上和之前的一模一样
Dialogue: 0,0:13:44.13,0:13:47.69,Default,,0,0,0,,但有一些地方还是做了改动的
Dialogue: 0,0:13:47.69,0:13:50.75,Default,,0,0,0,,比如说每一个Item中的元素是纵向排列的
Dialogue: 0,0:13:50.75,0:13:53.89,Default,,0,0,0,,我的一个 StackPanel 是 horizontal （纵向）排开的
Dialogue: 0,0:13:53.89,0:13:57.09,Default,,0,0,0,,最左边放置Image（图片）控件
Dialogue: 0,0:13:57.09,0:13:59.83,Default,,0,0,0,,在Image右边则是另一个StackPanel
Dialogue: 0,0:13:59.83,0:14:03.15,Default,,0,0,0,,用来展示 Title（题目） 和 Author （作者）
Dialogue: 0,0:14:03.15,0:14:04.29,Default,,0,0,0,,你马上就可以看到它们怎么改变的
Dialogue: 0,0:14:04.29,0:14:06.89,Default,,0,0,0,,除此以外的所有东西基本都是一样的
Dialogue: 0,0:14:06.89,0:14:08.74,Default,,0,0,0,,只是想告诉你
Dialogue: 0,0:14:08.75,0:14:10.73,Default,,0,0,0,,它们本质上是一样的东西
Dialogue: 0,0:14:10.73,0:14:13.33,Default,,0,0,0,,Ok?
Dialogue: 0,0:14:13.33,0:14:15.49,Default,,0,0,0,,在这个显示上我们可以做很多改动
Dialogue: 0,0:14:15.49,0:14:19.78,Default,,0,0,0,,只要我们想让它们以另一种风格展示出来时
Dialogue: 0,0:14:19.79,0:14:20.90,Default,,0,0,0,,Ok？
Dialogue: 0,0:14:20.91,0:14:22.75,Default,,0,0,0,,很好, 这节课上我们讨论了数据绑定
Dialogue: 0,0:14:22.75,0:14:23.94,Default,,0,0,0,,也讨论了GridView.
Dialogue: 0,0:14:23.95,0:14:28.94,Default,,0,0,0,,学习了怎样创建一个 DataTemplate,
Dialogue: 0,0:14:29.54,0:14:33.59,Default,,0,0,0,,并如何把它绑定到另一个东西上去
Dialogue: 0,0:14:33.59,0:14:37.11,Default,,0,0,0,,我们同样看到了GridView 和 ListView 的差别
Dialogue: 0,0:14:42.43,0:14:42.43,Default,,0,0,0,,我们可以把这些控件在相当多的项目使用
Dialogue: 0,0:14:42.43,0:14:43.89,Default,,0,0,0,,我希望你已经好好学习了
Dialogue: 0,0:14:43.89,0:14:46.11,Default,,0,0,0,,接下来的很多课上都会用到
Dialogue: 0,0:14:46.11,0:14:49.58,Default,,0,0,0,,我们在那见  thanks
