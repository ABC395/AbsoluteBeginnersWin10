[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: D:/OneDrive/Win10 Translation/UWP-041/subtitiles/uwp41ObservableCollection_high.mp4
Video File: D:/OneDrive/Win10 Translation/UWP-041/subtitiles/uwp41ObservableCollection_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 96
Active Line: 148
Video Position: 11470

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: UWP翻译,微软雅黑,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,50,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:05.78,0:00:09.44,UWP翻译,,0,0,0,,您好  我是来自www.learnvisualstudio.net的Bob Tabor
Dialogue: 0,0:00:09.44,0:00:11.12,UWP翻译,,0,0,0,,本堂课程我们将主要讲解
Dialogue: 0,0:00:11.12,0:00:14.58,UWP翻译,,0,0,0,,如何将DataBound控件保持在最新状态
Dialogue: 0,0:00:14.58,0:00:16.84,UWP翻译,,0,0,0,,并能够随着POCO实体
Dialogue: 0,0:00:16.84,0:00:20.20,UWP翻译,,0,0,0,,集合的改变进行实时更新
Dialogue: 0,0:00:20.20,0:00:22.32,UWP翻译,,0,0,0,,在以往的视频中
Dialogue: 0,0:00:22.32,0:00:24.08,UWP翻译,,0,0,0,,每当我们绑定一个数据时
Dialogue: 0,0:00:24.08,0:00:25.61,UWP翻译,,0,0,0,,案例中所绑定的数据
Dialogue: 0,0:00:25.61,0:00:30.61,UWP翻译,,0,0,0,,仅仅只限于静态的对象
Dialogue: 0,0:00:30.96,0:00:33.84,UWP翻译,,0,0,0,,因此每当页面或应用首次加载时
Dialogue: 0,0:00:33.84,0:00:36.20,UWP翻译,,0,0,0,,我们的控件只绑定一次
Dialogue: 0,0:00:36.20,0:00:39.18,UWP翻译,,0,0,0,,现在，我们来研究另一种情况
Dialogue: 0,0:00:39.18,0:00:42.90,UWP翻译,,0,0,0,,在这一情况下
Dialogue: 0,0:00:42.90,0:00:46.68,UWP翻译,,0,0,0,,当DataBound控件中集合的数据发生了更新
Dialogue: 0,0:00:46.68,0:00:49.48,UWP翻译,,0,0,0,,我们来看看程序中将会发生什么改变
Dialogue: 0,0:00:49.48,0:00:52.12,UWP翻译,,0,0,0,,当我需要从程序里向List添加item时
Dialogue: 0,0:00:52.12,0:00:54.38,UWP翻译,,0,0,0,,或者从List中移除items时
Dialogue: 0,0:00:54.38,0:00:56.90,UWP翻译,,0,0,0,,程序中会发生什么变化呢?
Dialogue: 0,0:00:56.90,0:00:59.36,UWP翻译,,0,0,0,,接下来请看看这个例子
Dialogue: 0,0:00:59.36,0:01:02.28,UWP翻译,,0,0,0,,这应该是你能搭建的最简单
Dialogue: 0,0:01:02.28,0:01:03.98,UWP翻译,,0,0,0,,通讯录管理应用
Dialogue: 0,0:01:03.98,0:01:06.52,UWP翻译,,0,0,0,,首先要在这里添加我的姓以及名
Dialogue: 0,0:01:06.52,0:01:09.28,UWP翻译,,0,0,0,,接下来从列表中选择一个头像并点击Add
Dialogue: 0,0:01:09.28,0:01:12.38,UWP翻译,,0,0,0,,那么我现在希望创建一个新的通讯录实例
Dialogue: 0,0:01:12.38,0:01:15.60,UWP翻译,,0,0,0,,并能够将其添加到集合中
Dialogue: 0,0:01:15.60,0:01:18.72,UWP翻译,,0,0,0,,这个集合包含了一系列联系人
Dialogue: 0,0:01:18.72,0:01:22.24,UWP翻译,,0,0,0,,接下来  我希望我的GridView控件
Dialogue: 0,0:01:22.24,0:01:25.26,UWP翻译,,0,0,0,,能在表格下方的大片白色区域
Dialogue: 0,0:01:25.26,0:01:28.40,UWP翻译,,0,0,0,,显示刚才添加的联系人
Dialogue: 0,0:01:28.40,0:01:29.94,UWP翻译,,0,0,0,,但是正如你所看到的，界面中并没有显示出来
Dialogue: 0,0:01:29.94,0:01:31.74,UWP翻译,,0,0,0,,那么我们关掉程序来想想
Dialogue: 0,0:01:31.74,0:01:34.18,UWP翻译,,0,0,0,,为什么程序没有如我们所希望的那样显示？
Dialogue: 0,0:01:34.18,0:01:35.66,UWP翻译,,0,0,0,,好吧，程序没有成功显示的原因在于
Dialogue: 0,0:01:35.66,0:01:38.00,UWP翻译,,0,0,0,,没人告诉GridView控件
Dialogue: 0,0:01:38.00,0:01:40.04,UWP翻译,,0,0,0,,我们的数据已经进行了更新
Dialogue: 0,0:01:40.04,0:01:44.00,UWP翻译,,0,0,0,,你必须要让它清楚在数据中
Dialogue: 0,0:01:44.00,0:01:47.24,UWP翻译,,0,0,0,,有新的信息需要被绑定
Dialogue: 0,0:01:47.24,0:01:48.72,UWP翻译,,0,0,0,,如果我们希望能加入这一机制
Dialogue: 0,0:01:48.72,0:01:50.80,UWP翻译,,0,0,0,,我们需要使用另一种集合
Dialogue: 0,0:01:50.80,0:01:52.44,UWP翻译,,0,0,0,,那么在这里你可以看到
Dialogue: 0,0:01:52.44,0:01:55.34,UWP翻译,,0,0,0,,我创建了一个集合，也就是List<Contact>
Dialogue: 0,0:01:55.34,0:01:57.60,UWP翻译,,0,0,0,,虽然我们已经完成这一步
Dialogue: 0,0:01:57.60,0:02:00.30,UWP翻译,,0,0,0,,但是这个改变并不能让程序真正发生变化
Dialogue: 0,0:02:00.30,0:02:02.94,UWP翻译,,0,0,0,,我们需要使用的是另一种集合
Dialogue: 0,0:02:02.94,0:02:06.06,UWP翻译,,0,0,0,,称作ObservableCollection<Contact>
Dialogue: 0,0:02:06.06,0:02:08.91,UWP翻译,,0,0,0,,好的  现在让我们加上一些注释
Dialogue: 0,0:02:09.22,0:02:10.64,UWP翻译,,0,0,0,,然后取消这些注释
Dialogue: 0,0:02:10.64,0:02:12.60,UWP翻译,,0,0,0,,那么现在可以看到
Dialogue: 0,0:02:12.60,0:02:14.92,UWP翻译,,0,0,0,,我将List<Contact>修改成了
Dialogue: 0,0:02:14.92,0:02:16.01,UWP翻译,,0,0,0,,ObservableCollection<Contact>.
Dialogue: 0,0:02:16.02,0:02:18.01,UWP翻译,,0,0,0,,因此  无论何时你看到这个名词"Observable"
Dialogue: 0,0:02:18.02,0:02:20.33,UWP翻译,,0,0,0,,出现在.NET Framework类库中
Dialogue: 0,0:02:20.34,0:02:22.28,UWP翻译,,0,0,0,,这意味着无论你的控件是GridView或者ListView
Dialogue: 0,0:02:22.28,0:02:23.54,UWP翻译,,0,0,0,,还是其他控件类型
Dialogue: 0,0:02:23.54,0:02:25.74,UWP翻译,,0,0,0,,它都会一直保持监视或监听
Dialogue: 0,0:02:25.74,0:02:28.72,UWP翻译,,0,0,0,,集合的任何改变
Dialogue: 0,0:02:28.72,0:02:31.04,UWP翻译,,0,0,0,,
Dialogue: 0,0:02:31.04,0:02:32.60,UWP翻译,,0,0,0,,无论何时，数据中产生了变化
Dialogue: 0,0:02:32.60,0:02:35.58,UWP翻译,,0,0,0,,集合ObservableCollection<Contact>
Dialogue: 0,0:02:35.58,0:02:38.72,UWP翻译,,0,0,0,,会大声呼喊：“你们谁在看着我，赶紧的”
Dialogue: 0,0:02:38.72,0:02:41.16,UWP翻译,,0,0,0,,我已经不是从前的那个我啦
Dialogue: 0,0:02:41.16,0:02:44.40,UWP翻译,,0,0,0,,你们赶紧准备好然后重新绑定我”
Dialogue: 0,0:02:44.40,0:02:46.24,UWP翻译,,0,0,0,,接下来看看程序是否成功运行
Dialogue: 0,0:02:46.24,0:02:49.16,UWP翻译,,0,0,0,,首先我们构建这个应用，然后
Dialogue: 0,0:02:49.16,0:02:50.82,UWP翻译,,0,0,0,,额，貌似有个error
Dialogue: 0,0:02:50.82,0:02:54.22,UWP翻译,,0,0,0,,为什么我们会得到这么一个error呢
Dialogue: 0,0:02:54.22,0:02:57.32,UWP翻译,,0,0,0,,它提示我们无法从ObservableCollection<Contact>
Dialogue: 0,0:02:57.32,0:03:02.32,UWP翻译,,0,0,0,,转换到List<Contact>
Dialogue: 0,0:03:02.56,0:03:05.62,UWP翻译,,0,0,0,,好吧，原因在于我们绑定数据的方式
Dialogue: 0,0:03:05.62,0:03:09.06,UWP翻译,,0,0,0,,好吧，原因在于我们绑定数据的方式
Dialogue: 0,0:03:09.06,0:03:11.16,UWP翻译,,0,0,0,,我们看到我们使用的是x:Bind声明
Dialogue: 0,0:03:11.16,0:03:13.20,UWP翻译,,0,0,0,,我们第一次使用这个声明时
Dialogue: 0,0:03:13.20,0:03:15.06,UWP翻译,,0,0,0,,我没有尝试对其过多说明
Dialogue: 0,0:03:15.06,0:03:17.46,UWP翻译,,0,0,0,,它其实是一种最新型的绑定方式
Dialogue: 0,0:03:17.46,0:03:18.30,UWP翻译,,0,0,0,,并且是可用的
Dialogue: 0,0:03:18.30,0:03:20.40,UWP翻译,,0,0,0,,这种方式是随着UWP平台的开发而开发的
Dialogue: 0,0:03:20.40,0:03:22.54,UWP翻译,,0,0,0,,它的工作主要是
Dialogue: 0,0:03:22.54,0:03:25.18,UWP翻译,,0,0,0,,在应用首次运行前
Dialogue: 0,0:03:25.18,0:03:27.64,UWP翻译,,0,0,0,,对绑定进行预编译
Dialogue: 0,0:03:27.64,0:03:30.68,UWP翻译,,0,0,0,,虽然在老版本中
Dialogue: 0,0:03:30.68,0:03:33.12,UWP翻译,,0,0,0,,也就是UWP平台出现前的binding技术
Dialogue: 0,0:03:33.12,0:03:35.76,UWP翻译,,0,0,0,,会在运行时进行所有的预处理
Dialogue: 0,0:03:35.76,0:03:37.57,UWP翻译,,0,0,0,,那么为什么我们要预编译呢?
Dialogue: 0,0:03:37.57,0:03:40.11,UWP翻译,,0,0,0,,预编译是为了提升应用的性能
Dialogue: 0,0:03:40.11,0:03:41.73,UWP翻译,,0,0,0,,预编译是为了提升应用的性能
Dialogue: 0,0:03:41.73,0:03:44.23,UWP翻译,,0,0,0,,因此，现在的情况是
Dialogue: 0,0:03:44.23,0:03:47.59,UWP翻译,,0,0,0,,当我首先在应用中使用List<contact>时
Dialogue: 0,0:03:47.59,0:03:49.53,UWP翻译,,0,0,0,,Visual Studio在后台
Dialogue: 0,0:03:49.53,0:03:51.50,UWP翻译,,0,0,0,,为程序生成了一些源代码
Dialogue: 0,0:03:51.51,0:03:56.39,UWP翻译,,0,0,0,,这些源代码我无法在解决方案浏览器中查找
Dialogue: 0,0:03:56.39,0:03:58.56,UWP翻译,,0,0,0,,虽然我可以找到这些代码，但是不是很方便
Dialogue: 0,0:03:58.56,0:04:01.52,UWP翻译,,0,0,0,,那么现在我需要做的就是告诉Visual Studio
Dialogue: 0,0:04:01.52,0:04:04.26,UWP翻译,,0,0,0,,“别把老代码留在这里了，给我重新生成一次”
Dialogue: 0,0:04:04.26,0:04:05.52,UWP翻译,,0,0,0,,我们需要这么来操作
Dialogue: 0,0:04:05.52,0:04:07.92,UWP翻译,,0,0,0,,首先进入到数据模板中
Dialogue: 0,0:04:07.92,0:04:09.60,UWP翻译,,0,0,0,,选择数据模板中的所有代码
Dialogue: 0,0:04:09.60,0:04:12.62,UWP翻译,,0,0,0,,点击键盘上的Ctrl+X
Dialogue: 0,0:04:12.62,0:04:15.08,UWP翻译,,0,0,0,,然后让Visual Studio处理一会儿新的改变
Dialogue: 0,0:04:15.08,0:04:17.10,UWP翻译,,0,0,0,,那么接下来再点击Ctrl+V
Dialogue: 0,0:04:17.10,0:04:18.60,UWP翻译,,0,0,0,,将数据粘贴回来
Dialogue: 0,0:04:18.61,0:04:21.64,UWP翻译,,0,0,0,,当我们做完这一步
Dialogue: 0,0:04:21.65,0:04:24.30,UWP翻译,,0,0,0,,后台应该已经重新生成了绑定的对象
Dialogue: 0,0:04:24.30,0:04:25.44,UWP翻译,,0,0,0,,那么现在
Dialogue: 0,0:04:25.44,0:04:28.24,UWP翻译,,0,0,0,,我们要绑定到ObservableCollection而不是List集合
Dialogue: 0,0:04:28.24,0:04:29.58,UWP翻译,,0,0,0,,代码现在应该已经生成好了
Dialogue: 0,0:04:29.59,0:04:31.95,UWP翻译,,0,0,0,,接下来重新构建应用
Dialogue: 0,0:04:31.96,0:04:32.94,UWP翻译,,0,0,0,,Duang 程序已经正常了
Dialogue: 0,0:04:32.94,0:04:34.45,UWP翻译,,0,0,0,,好的，那接下来我们就可以开始运行程序了
Dialogue: 0,0:04:34.45,0:04:36.77,UWP翻译,,0,0,0,,再看看程序是否如我们所期待的进行
Dialogue: 0,0:04:36.77,0:04:39.83,UWP翻译,,0,0,0,,首先输入我的名字然后选择一个头像
Dialogue: 0,0:04:39.83,0:04:41.63,UWP翻译,,0,0,0,,然后确定
Dialogue: 0,0:04:41.63,0:04:45.20,UWP翻译,,0,0,0,,ObservableCollection<Contact>大声呼喊
Dialogue: 0,0:04:45.21,0:04:47.50,UWP翻译,,0,0,0,,“嘿，我有个新的联系人了
Dialogue: 0,0:04:47.51,0:04:50.84,UWP翻译,,0,0,0,,叫做Bob Tabor，头像是带着胡子的哥们
Dialogue: 0,0:04:50.85,0:04:52.72,UWP翻译,,0,0,0,,如果你们有人绑定我了
Dialogue: 0,0:04:52.73,0:04:54.08,UWP翻译,,0,0,0,,任何绑定我的人
Dialogue: 0,0:04:54.09,0:04:56.68,UWP翻译,,0,0,0,,你们要明白我已经和以前不同了“
Dialogue: 0,0:04:56.69,0:04:58.48,UWP翻译,,0,0,0,,然后gridview控件就说”好的
Dialogue: 0,0:04:58.49,0:05:00.70,UWP翻译,,0,0,0,,我一直看着你呢
Dialogue: 0,0:05:00.71,0:05:01.68,UWP翻译,,0,0,0,,我已经发现你的变化了
Dialogue: 0,0:05:01.69,0:05:04.02,UWP翻译,,0,0,0,,接下来咱们赶快更新屏幕上的内容吧“
Dialogue: 0,0:05:04.03,0:05:05.21,UWP翻译,,0,0,0,,因此，程序的界面发生了变化
Dialogue: 0,0:05:05.21,0:05:08.22,UWP翻译,,0,0,0,,如果你喜欢代码的拟人化解释
Dialogue: 0,0:05:08.23,0:05:10.54,UWP翻译,,0,0,0,,那么我的解释应该能够满足你的要求
Dialogue: 0,0:05:10.55,0:05:12.52,UWP翻译,,0,0,0,,OK，讲另一个主题前
Dialogue: 0,0:05:12.53,0:05:14.68,UWP翻译,,0,0,0,,我还要提及一件事
Dialogue: 0,0:05:14.68,0:05:17.94,UWP翻译,,0,0,0,,那就是当你在网络上
Dialogue: 0,0:05:17.94,0:05:19.62,UWP翻译,,0,0,0,,阅读文章或者看视频时
Dialogue: 0,0:05:19.62,0:05:23.44,UWP翻译,,0,0,0,,你可能会在UWP应用开发
Dialogue: 0,0:05:23.44,0:05:26.84,UWP翻译,,0,0,0,,Windows 8.1或者Windows Phone 8.1应用
Dialogue: 0,0:05:26.84,0:05:30.38,UWP翻译,,0,0,0,,甚至是WPF等
Dialogue: 0,0:05:30.38,0:05:33.94,UWP翻译,,0,0,0,,所有基于XAML的平台上
Dialogue: 0,0:05:33.94,0:05:38.94,UWP翻译,,0,0,0,,看到与数据绑定相关的一个词汇：MVVM
Dialogue: 0,0:05:40.56,0:05:44.03,UWP翻译,,0,0,0,,MVVM代表Model View View Model，也就是视图模型
Dialogue: 0,0:05:44.03,0:05:47.47,UWP翻译,,0,0,0,,它是代码编写的一个设计模式
Dialogue: 0,0:05:47.47,0:05:49.87,UWP翻译,,0,0,0,,主要存在于绑定了数据的用户接口中
Dialogue: 0,0:05:49.87,0:05:52.43,UWP翻译,,0,0,0,,接下来我给你们看个例子
Dialogue: 0,0:05:52.43,0:05:54.37,UWP翻译,,0,0,0,,由于ObservableCollection是学习MVVM的一个重要要素
Dialogue: 0,0:05:54.37,0:05:58.63,UWP翻译,,0,0,0,,因此学习MVVM的一个重要概念
Dialogue: 0,0:05:58.63,0:06:01.29,UWP翻译,,0,0,0,,已经在本视频中介绍了
Dialogue: 0,0:06:01.29,0:06:03.79,UWP翻译,,0,0,0,,其他的重要概念我也在以往的视频系列
Dialogue: 0,0:06:03.79,0:06:05.79,UWP翻译,,0,0,0,,讲解中有涉及到
Dialogue: 0,0:06:05.79,0:06:08.37,UWP翻译,,0,0,0,,如channel 9 的Windows Phone 8.1开发
Dialogue: 0,0:06:08.37,0:06:10.77,UWP翻译,,0,0,0,,for Absolute Beginners系列
Dialogue: 0,0:06:10.77,0:06:12.67,UWP翻译,,0,0,0,,如果你希望学习更多有关MVVM的知识
Dialogue: 0,0:06:12.67,0:06:16.29,UWP翻译,,0,0,0,,非常有必要去看下
Dialogue: 0,0:06:16.29,0:06:19.41,UWP翻译,,0,0,0,,那些与ObservableCollection相关的视频
Dialogue: 0,0:06:19.41,0:06:22.72,UWP翻译,,0,0,0,,以及MVVM
Dialogue: 0,0:06:22.72,0:06:24.46,UWP翻译,,0,0,0,,还有称作I Notify Property Changed的接口
Dialogue: 0,0:06:24.46,0:06:27.28,UWP翻译,,0,0,0,,可以根据这个视频的描述
Dialogue: 0,0:06:27.28,0:06:30.58,UWP翻译,,0,0,0,,或者是视频的标题去寻找课程
Dialogue: 0,0:06:30.58,0:06:34.02,UWP翻译,,0,0,0,,正如我所提到的   
Dialogue: 0,0:06:34.02,0:06:37.88,UWP翻译,,0,0,0,,MVVM的概念也适用于所有基于XAML的用户接口技术
Dialogue: 0,0:06:37.88,0:06:40.12,UWP翻译,,0,0,0,,好的  这些就是我所有要讲的内容
Dialogue: 0,0:06:40.12,0:06:43.20,UWP翻译,,0,0,0,,但是接下来的课程中
Dialogue: 0,0:06:43.20,0:06:46.00,UWP翻译,,0,0,0,,我们会继续使用我们的联系人管理应用
Dialogue: 0,0:06:46.00,0:06:49.48,UWP翻译,,0,0,0,,咱们到时候见
Dialogue: 0,0:06:49.48,0:06:50.73,UWP翻译,,0,0,0,,谢谢收看
