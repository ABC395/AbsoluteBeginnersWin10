[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: uwp06DefaultProperties_high.mp4
Video File: uwp06DefaultProperties_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Active Line: 155
Video Position: 24264

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Windows,Microsoft YaHei,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: Windows Top,Microsoft YaHei,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,8,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:04.10,Windows,,0,0,0,,理解默认属性、复杂属性和属性元素语法\N翻译@章程   客串校对@xJonathan (陈老师呢！！！！)
Dialogue: 0,0:00:04.62,0:00:08.54,Windows,,0,0,0,,大家好，我是 www.learnvisualstudio.net 的 鲍勃 忒呗儿
Dialogue: 0,0:00:08.54,0:00:12.56,Windows,,0,0,0,,在这节课我们会讲几个相互相关的话题
Dialogue: 0,0:00:12.56,0:00:16.26,Windows,,0,0,0,,然后再最后他们会汇到一起
Dialogue: 0,0:00:16.26,0:00:18.26,Windows,,0,0,0,,我们会讲到默认属性
Dialogue: 0,0:00:18.26,0:00:20.26,Windows,,0,0,0,,复杂属性
Dialogue: 0,0:00:20.26,0:00:22.26,Windows,,0,0,0,,以及元素属性语法
Dialogue: 0,0:00:22.26,0:00:29.12,Windows,,0,0,0,,最后我们会讲到 XAML 语法分析器如何让我们从那些无意义的代码中解脱出来
Dialogue: 0,0:00:29.12,0:00:37.36,Windows,,0,0,0,,因为他能根据上下文来猜测元素之间的关系
Dialogue: 0,0:00:37.36,0:00:38.72,Windows,,0,0,0,,我在最后会讲这个
Dialogue: 0,0:00:38.72,0:00:41.36,Windows,,0,0,0,,在我们开始之前我想要先说一下
Dialogue: 0,0:00:41.40,0:00:45.32,Windows,,0,0,0,,XAML 中我们可以看见的内涵关系 (/▽＼=)（雾，内含关系）
Dialogue: 0,0:00:45.32,0:00:51.94,Windows,,0,0,0,,因为 XAML 本质上就是 XML 所以我们能把一个元素内嵌到另一个元素中
Dialogue: 0,0:00:51.94,0:00:56.80,Windows,,0,0,0,,这个就表现出来了一种内涵关系 (/▽＼=)\N（是！内！含！关！系！）
Dialogue: 0,0:00:56.80,0:00:58.80,Windows,,0,0,0,,所以你们可以看见这里有一个野生的 Page（页面）类型
Dialogue: 0,0:00:58.80,0:01:03.26,Windows,,0,0,0,,在它的 Page 标签之间
Dialogue: 0,0:01:03.26,0:01:08.32,Windows,,0,0,0,,我们有一只野生的 Grid（网格）类型\N然后再网格类型里面（有一个庙，庙里有个小和尚在讲故事）
Dialogue: 0,0:01:08.32,0:01:12.50,Windows,,0,0,0,,有一个 Button（按钮）还有一个 TextBlock（文本框）
Dialogue: 0,0:01:12.50,0:01:24.14,Windows,,0,0,0,,那么真正在幕后发生的我们在 XAML 中不能看见的羞羞的事情是
Dialogue: 0,0:01:24.14,0:01:29.00,Windows,,0,0,0,,这个 Page 的 Content（内容）属性被设置为了一个 Grid（网格）类型
Dialogue: 0,0:01:29.00,0:01:33.22,Windows,,0,0,0,,然后 Grid（网格）有一个 Collection（系列）叫做 Children（子控件）
Dialogue: 0,0:01:33.22,0:01:39.68,Windows,,0,0,0,,这里我们实际上是在 Children Collection（子控件系列）中加入了两个控件
Dialogue: 0,0:01:39.68,0:01:43.54,Windows,,0,0,0,,但是我们并不能在这里之间看见这些
Dialogue: 0,0:01:43.54,0:01:47.82,Windows,,0,0,0,,所以如果你看一眼，我们在这里是找不到 Content（内容）属性的
Dialogue: 0,0:01:47.82,0:01:52.82,Windows,,0,0,0,,我们在 Grid（网格） 控件的代码中中也找不到 Children（子控件）之类的东西
Dialogue: 0,0:01:52.82,0:01:57.70,Windows,,0,0,0,,在背后发生的事情是，我们在这些属性（比如 Children 和 Content）中加东西
Dialogue: 0,0:01:57.70,0:02:03.46,Windows,,0,0,0,,我会在这节课的最后详细讲这个事情
Dialogue: 0,0:02:03.46,0:02:06.52,Windows,,0,0,0,,现在只用知道事实上发生的事情比我们能在代码中看到的东西多就好了
Dialogue: 0,0:02:06.56,0:02:10.24,Windows,,0,0,0,,我们事实上是在修改 Grid（网格）的 Children（子控件）属性
Dialogue: 0,0:02:10.24,0:02:14.12,Windows,,0,0,0,,以及 Page（页面） 的 Content（内容）属性
Dialogue: 0,0:02:14.12,0:02:17.84,Windows,,0,0,0,,如果你看我们用 C# 写的这段代码
Dialogue: 0,0:02:17.84,0:02:21.42,Windows,,0,0,0,,它把内含关系表达的更好了
Dialogue: 0,0:02:21.42,0:02:27.62,Windows,,0,0,0,,这个 LayoutGrid 有 Children Collection（子控件系列），其中有其他控件
Dialogue: 0,0:02:27.68,0:02:31.76,Windows,,0,0,0,,然后我们把一个 Button（按钮）类型加入到了 Children（子控件）之中
Dialogue: 0,0:02:31.76,0:02:34.68,Windows,,0,0,0,,我们只是在 XAML 中看不见而已
Dialogue: 0,0:02:34.68,0:02:39.00,Windows,,0,0,0,,所以就记住它，我们之后会讲到这部分的
Dialogue: 0,0:02:39.00,0:02:42.34,Windows,,0,0,0,,我们现在来讲讲默认属性（default properties）
Dialogue: 0,0:02:42.34,0:02:51.10,Windows,,0,0,0,,默认属性（default properties）可以用这种内含的语法表现出来
Dialogue: 0,0:02:51.10,0:02:53.52,Windows,,0,0,0,,就是我们把一个元素放到另一个元素中
Dialogue: 0,0:02:53.52,0:02:59.56,Windows,,0,0,0,,对于 Button 控件，Content 属性是他的默认属性
Dialogue: 0,0:02:59.56,0:03:06.40,Windows,,0,0,0,,所以我可以干掉这个属性
Dialogue: 0,0:03:06.40,0:03:17.30,Windows Top,,0,0,0,,XML中没有结束标签的元素称为自闭合元素\N如自闭合换行符<br />完整形式为<br></br>
Dialogue: 0,0:03:06.40,0:03:12.20,Windows,,0,0,0,,然后删掉这个自关闭标签
Dialogue: 0,0:03:12.20,0:03:14.88,Windows,,0,0,0,,然后建一个关闭标签（closing tag）
Dialogue: 0,0:03:14.88,0:03:19.34,Windows,,0,0,0,,所以我们现在有一个开标签（open tag）和一个闭标签（close tage），中间没有东西
Dialogue: 0,0:03:19.34,0:03:23.22,Windows,,0,0,0,,但是我们能够在中间加上比如 Hello World 之类的文字
Dialogue: 0,0:03:23.22,0:03:28.88,Windows,,0,0,0,,然后利用默认属性，我们可以看见
Dialogue: 0,0:03:28.88,0:03:34.30,Windows,,0,0,0,,这个 Button（按钮）的 Content（内容） 属性已经被我们改了
Dialogue: 0,0:03:34.30,0:03:38.56,Windows,,0,0,0,,在之后我们也要用到它 ( •̀ ω •́ )y，把它也记住吧，少年！
Dialogue: 0,0:03:38.56,0:03:44.78,Windows,,0,0,0,,我们现在回到我们 MainPage（主页） 的 XAML 代码
Dialogue: 0,0:03:44.78,0:03:48.32,Windows,,0,0,0,,我们现在来讲一讲类型转换器
Dialogue: 0,0:03:48.32,0:03:52.30,Windows,,0,0,0,,你们还记得我在上一个课中讲的类型转化器么，少年！( •̀ ω •́ )y
Dialogue: 0,0:03:52.30,0:03:58.26,Windows,,0,0,0,,在那里我其实只讲了一些简单的转换器，比如 HorizontalAlignment（横向对齐） 属性
Dialogue: 0,0:03:58.26,0:04:10.16,Windows,,0,0,0,,在这里，这个属性的开发者决定加上一个类型转换器
Dialogue: 0,0:04:10.26,0:04:17.78,Windows,,0,0,0,,所以我们这里可以给他一个字符串类型\N之后类型转化器会把它转换成
Dialogue: 0,0:04:17.80,0:04:23.62,Windows,,0,0,0,,Window.UI.Xaml.HorizongtalAlingment.Left
Dialogue: 0,0:04:23.62,0:04:27.06,Windows,,0,0,0,,对于 VerticalAlignment 也是这样的
Dialogue: 0,0:04:27.06,0:04:31.50,Windows,,0,0,0,,然而确实是有一些更复杂的类型转换器的
Dialogue: 0,0:04:31.50,0:04:33.10,Windows,,0,0,0,,比如这个Margin （外边距）
Dialogue: 0,0:04:33.10,0:04:39.30,Windows,,0,0,0,,在 XAML 中我们的 Margin 属性设置为 “20,20,0,0” 的一个字符串
Dialogue: 0,0:04:39.30,0:04:43.78,Windows,,0,0,0,,然后我们再来看这个 Background（背景）属性
Dialogue: 0,0:04:43.80,0:04:47.50,Windows,,0,0,0,,它也只是一个 “Red” 的字符串
Dialogue: 0,0:04:47.50,0:04:51.22,Windows,,0,0,0,,但是如果你看一眼 C# 的代码，这就更复杂一点了
Dialogue: 0,0:04:51.22,0:04:55.34,Windows,,0,0,0,,类型转化器要做一些比之前的 Vertical 和 Horizontal Alignment 做的更复杂的事情了
Dialogue: 0,0:04:55.34,0:04:58.30,Windows,,0,0,0,,我们来看一下这个 Margin 
Dialogue: 0,0:04:58.30,0:05:02.40,Windows,,0,0,0,,我们事实上是建了一个新的 Thickness（厚度） 对象
Dialogue: 0,0:05:02.44,0:05:07.26,Windows,,0,0,0,,这个 Thickness 对象有一个需要四个参数的构造函数（constructor）
Dialogue: 0,0:05:07.26,0:05:13.90,Windows,,0,0,0,,这四个参数分别是左边界，上边界，右边界以及下边界
Dialogue: 0,0:05:13.90,0:05:18.32,Windows,,0,0,0,,和这个很类似的，我们来看看这个背景属性
Dialogue: 0,0:05:18.32,0:05:22.48,Windows,,0,0,0,,我们事实上是把它设置成了一个新的 SolidColorBrush（纯色刷） 对象
Dialogue: 0,0:05:22.48,0:05:27.90,Windows,,0,0,0,,然后我们给构造函数一个
Dialogue: 0,0:05:27.90,0:05:31.62,Windows,,0,0,0,,Windows.UI.Color.Red 作为参数
Dialogue: 0,0:05:31.62,0:05:36.34,Windows,,0,0,0,,所以在这些情况下，事情比之前稍微复杂了一点点
Dialogue: 0,0:05:36.34,0:05:44.10,Windows,,0,0,0,,然而还有更复杂的情况（怕了么！(●'◡'●)
Dialogue: 0,0:05:44.10,0:05:51.22,Windows,,0,0,0,,有一些属性的值实在太复杂了
Dialogue: 0,0:05:51.22,0:05:54.82,Windows,,0,0,0,,以至于类型转换器根本转换不了了
Dialogue: 0,0:05:54.82,0:06:00.14,Windows,,0,0,0,,所以当一个控件的属性不能像我们见到的一样用一个简单的
Dialogue: 0,0:06:00.14,0:06:07.00,Windows,,0,0,0,,XAML 性质来表达的时候，我们就叫这个属性复杂属性（duh！
Dialogue: 0,0:06:07.00,0:06:12.10,Windows,,0,0,0,,所以为了来展示这个，我要把 BackgroundColor（背景色）删掉
Dialogue: 0,0:06:12.10,0:06:16.06,Windows,,0,0,0,,来！干掉了！（￣▽￣）～■□～（￣▽￣）
Dialogue: 0,0:06:16.06,0:06:27.42,Windows,,0,0,0,,我要把这个默认属性也删掉，然后把 Content（内容）加回来
Dialogue: 0,0:06:27.42,0:06:30.66,Windows,,0,0,0,,最后我们回到 MainPage.XAML （主页）
Dialogue: 0,0:06:30.66,0:06:39.62,Windows,,0,0,0,,我要把这个注释掉，以防我得到一些不想要的结果\N（然后就会在你们面前出丑了嘤嘤嘤(/▽＼=)）
Dialogue: 0,0:06:39.62,0:06:43.36,Windows,,0,0,0,,然后我再加上一个双引号。。。好了我们可以开始了( •̀ ω •́ )y
Dialogue: 0,0:06:43.36,0:06:47.56,Windows,,0,0,0,,所以我现在把我的光标放到按钮上
Dialogue: 0,0:06:47.56,0:06:54.46,Windows,,0,0,0,,我们现在看见属性（property）窗口这个按钮的名字叫 ClickMeButton
Dialogue: 0,0:06:54.46,0:06:58.30,Windows,,0,0,0,,这样我知道我进的属性（property）窗口是对的
Dialogue: 0,0:06:58.32,0:07:04.68,Windows,,0,0,0,,我想要用这个属性窗口来更改背景（background）属性
Dialogue: 0,0:07:04.68,0:07:09.20,Windows,,0,0,0,,因为我想要更改背景属性，所以我们一定要选背景（background）哦，小朋友们！
Dialogue: 0,0:07:09.20,0:07:14.20,Windows,,0,0,0,,因为我们 XAML 中的背景已经被我们干掉了，\N所以我们这里的背景属性根本就没有被设置
Dialogue: 0,0:07:14.22,0:07:20.24,Windows,,0,0,0,,我现在想做的把它更改成 Gradient Brush（梯度刷）
Dialogue: 0,0:07:20.24,0:07:26.30,Windows,,0,0,0,,梯度刷就会给我们一个有梯度的颜色，你可以看见它从黑色开始
Dialogue: 0,0:07:26.30,0:07:30.82,Windows,,0,0,0,,然后它慢慢的就变成了白色
Dialogue: 0,0:07:30.82,0:07:33.80,Windows,,0,0,0,,如果你看看这个生成的 XAML
Dialogue: 0,0:07:33.80,0:07:39.54,Windows,,0,0,0,,我们能看见在我们两个按钮标签中多出来了好多东西
Dialogue: 0,0:07:39.54,0:07:43.94,Windows,,0,0,0,,这里我们把按钮（Button）的背景（Background）属性更改成了
Dialogue: 0,0:07:43.94,0:07:47.58,Windows,,0,0,0,,一个 LinearGradientBrush （线性梯度刷）对象
Dialogue: 0,0:07:47.58,0:07:51.02,Windows,,0,0,0,,所以当你看见这种语法的时候
Dialogue: 0,0:07:51.02,0:07:56.36,Windows,,0,0,0,,这种一个元素在另一个元素之内的叫做 property element syntax（元素属性语法）
Dialogue: 0,0:07:56.36,0:07:59.94,Windows,,0,0,0,,我们有一个对象，点，属性
Dialogue: 0,0:07:59.94,0:08:08.08,Windows,,0,0,0,,我们的目的就是在这个属性中多加一点 XAML
Dialogue: 0,0:08:08.08,0:08:11.94,Windows,,0,0,0,,来更好的定义这个复杂属性
Dialogue: 0,0:08:11.94,0:08:19.22,Windows,,0,0,0,,所以啥是线性梯度刷（linear gradient brush）呢？\N大家想一想一个油漆刷
Dialogue: 0,0:08:19.22,0:08:24.08,Windows,,0,0,0,,所以我们看见 brush（刷）的时候我们就往颜色那边想就好了
Dialogue: 0,0:08:24.08,0:08:33.04,Windows,,0,0,0,,我们这里用的是一个当我们开始的时候是黑的，等到刷到底下就是白色的刷子\N（真的有这样的么。。。）
Dialogue: 0,0:08:33.04,0:08:35.04,Windows,,0,0,0,,让我们来改一下这个
Dialogue: 0,0:08:35.04,0:08:37.04,Windows,,0,0,0,,我现在把我的光标放回这个按钮这里
Dialogue: 0,0:08:37.04,0:08:40.34,Windows,,0,0,0,,然后我们回到这个属性（property）窗口
Dialogue: 0,0:08:40.34,0:08:45.38,Windows,,0,0,0,,我不想让它从黑过渡到白，我想让它从黑过渡到红
Dialogue: 0,0:08:45.38,0:08:50.12,Windows,,0,0,0,,所以在左上角有一个小圆圈， 我们把它往右一些
Dialogue: 0,0:08:50.12,0:08:56.60,Windows,,0,0,0,,我们可以看见他把 Gradient Stop（梯度停止点）从白变成了红
Dialogue: 0,0:08:56.60,0:09:02.48,Windows,,0,0,0,,我们把他存一下，然后我们看看在设计视窗里面是什么样子的\N（挖草！丑哭我！）
Dialogue: 0,0:09:02.48,0:09:06.06,Windows,,0,0,0,,按钮的上边是黑的，下边是红的，牛逼！( •̀ ω •́ )y
Dialogue: 0,0:09:06.06,0:09:09.68,Windows,,0,0,0,,讲真，你可能永远都不会做这样的事情
Dialogue: 0,0:09:09.68,0:09:16.12,Windows,,0,0,0,,因为这并不是 Windows 10 中的 App 应该有的样子\N（没有任何 App 长成这个鬼样子好么。。。不仅 Windows 10）
Dialogue: 0,0:09:16.12,0:09:26.16,Windows,,0,0,0,,我们来假设因为各种奇奇怪怪的原因你需要这个梯度
Dialogue: 0,0:09:26.16,0:09:30.94,Windows,,0,0,0,,我们回到 XAML 编辑器中，你可以看见
Dialogue: 0,0:09:30.94,0:09:34.60,Windows,,0,0,0,,如果你真的想要定义一个 LinearGradientBrush（线性梯度刷）
Dialogue: 0,0:09:34.60,0:09:36.62,Windows,,0,0,0,,你需要在上面写上蛮多的信息
Dialogue: 0,0:09:36.64,0:09:40.52,Windows,,0,0,0,,你不仅需要给它你想要用的颜色
Dialogue: 0,0:09:40.52,0:09:45.60,Windows,,0,0,0,,你还要给他一系列的 GradientStop（梯度停止点）
Dialogue: 0,0:09:45.64,0:09:53.36,Windows,,0,0,0,,以及 Offset，就是只有其中一个颜色，另一个颜色完全消失的点
Dialogue: 0,0:09:53.36,0:09:58.64,Windows,,0,0,0,,这个仅仅只是一个颜色，这样看起来确实是很多的代码
Dialogue: 0,0:09:58.64,0:10:06.26,Windows,,0,0,0,,然而我高亮的这一段代码其实是被 Visual Studio 自动缩短了的
Dialogue: 0,0:10:06.34,0:10:19.18,Windows,,0,0,0,,我来花一段时间打出来完整的 XAML （如果 VS 没有缩短的话）是怎么样的
Dialogue: 0,0:10:21.70,0:10:27.18,Windows,,0,0,0,,花了我两三分钟的时间，但是你看见我在 23 行和 24 行加了一点点东西
Dialogue: 0,0:10:27.18,0:10:32.86,Windows,,0,0,0,,然后两个分别在 28，29 行的闭标签
Dialogue: 0,0:10:32.86,0:10:41.24,Windows,,0,0,0,,所以我们可以看见我们把按钮背景设置成了一个新的 LinearGradientBrush（线性梯度刷） 对象
Dialogue: 0,0:10:41.24,0:10:46.48,Windows,,0,0,0,,LinearGradientBrush（线性梯度刷）有一个属性叫做 GradientStop（梯度停止点）
Dialogue: 0,0:10:46.48,0:10:50.42,Windows,,0,0,0,,然后 GradientStop（梯度停止点） 属性是一个 GradientStopCollection（梯度停止点系列） 类型的
Dialogue: 0,0:10:50.48,0:10:54.12,Windows,,0,0,0,,所以我们新建一个 GradientStopCollection（梯度停止点系列） 类型
Dialogue: 0,0:10:54.12,0:10:59.74,Windows,,0,0,0,,然后再其中加上两个 GradientStop（梯度停止点） 对象\N（注意这里是对象，之前那个是属性，不一样的）
Dialogue: 0,0:10:59.78,0:11:13.58,Windows,,0,0,0,,所以我们可以去掉 23，24 行和 27，28 行
Dialogue: 0,0:11:13.60,0:11:26.74,Windows,,0,0,0,,因为我们有一个很好的 XAML 分析器，所以我们能够把这些删掉\N让我们的 XAML 看起来更加简洁
Dialogue: 0,0:11:26.74,0:11:31.12,Windows,,0,0,0,,这节课我们第一个讲了默认属性
Dialogue: 0,0:11:31.12,0:11:37.96,Windows,,0,0,0,,GradientStops（梯度停止点） 属性就是 LinearGradientBrush（线性梯度刷） 的默认属性
Dialogue: 0,0:11:37.96,0:11:42.60,Windows,,0,0,0,,然后 GradientStops 是 GradientStopCollection 类型的
Dialogue: 0,0:11:42.60,0:11:47.52,Windows,,0,0,0,,然后 GradientStopCollection 中只能放 GradientStop 对象
Dialogue: 0,0:11:47.52,0:11:52.64,Windows,,0,0,0,,因为我们只在 LinearGradientBrush（线性梯度刷）中放了两个 Gradientstop（梯度停止点）
Dialogue: 0,0:11:52.64,0:11:54.64,Windows,,0,0,0,,所以它知道我们是在使用默认属性
Dialogue: 0,0:11:54.64,0:12:01.36,Windows,,0,0,0,,然后默认属性是 GradientStopCollection（梯度停止点系列）\N所以我们压根就不用把这些鬼放进去
Dialogue: 0,0:12:01.36,0:12:07.06,Windows,,0,0,0,,所以 Visual Studio 就会往正确的方向去想，oops，删错了 (/▽＼=)（丢人啦丢人啦）
Dialogue: 0,0:12:07.06,0:12:11.78,Windows,,0,0,0,,我们只用给他两个 GradientStop
Dialogue: 0,0:12:11.78,0:12:17.24,Windows,,0,0,0,,他就可以从上下文中猜测出来其他它需要的内容了（就是删掉的那些）
Dialogue: 0,0:12:17.24,0:12:21.10,Windows,,0,0,0,,所以大家都要知道 XAML 分析器是很聪明的（微软大法好）
Dialogue: 0,0:12:21.10,0:12:26.32,Windows,,0,0,0,,如果它能通过上下文猜出来的话，我们就不用写了
Dialogue: 0,0:12:26.28,0:12:30.88,Windows,,0,0,0,,只要它有所有能做出来对象图的信息
Dialogue: 0,0:12:30.92,0:12:33.90,Windows,,0,0,0,,他就会自己做，而我们不用给他过多的信息
Dialogue: 0,0:12:33.90,0:12:44.04,Windows,,0,0,0,,而且如果我们用 VS 中其他的工具，它自动生成的都是简洁的代码\N（微软大法好）
Dialogue: 0,0:12:44.04,0:12:48.58,Windows,,0,0,0,,最后我们回顾一下这节课，我们讲了好几个不同的事情
Dialogue: 0,0:12:48.58,0:12:52.16,Windows,,0,0,0,,我们讲了默认属性，我们讲了复杂属性
Dialogue: 0,0:12:52.16,0:13:02.52,Windows,,0,0,0,,然后我们讲了元素属性语法，就是我们刚刚删掉的那一部分
Dialogue: 0,0:13:02.52,0:13:07.34,Windows,,0,0,0,,然后我们还讲了 XAML 语法分析器如何帮助我们删掉那部分代码
Dialogue: 0,0:13:07.34,0:13:14.60,Windows,,0,0,0,,因为它能够根据上下文来猜测需要的东西，来让我们的 XAML 更简洁
Dialogue: 0,0:13:14.64,0:13:19.74,Windows,,0,0,0,,最后，Visual Studio 总是会生成最简洁的 XAML
Dialogue: 0,0:13:19.74,0:13:23.98,Windows,,0,0,0,,所以我们下节课还会讲更多的 XAML，下节课见
Dialogue: 0,0:13:25.42,0:13:29.14,Windows,,0,0,0,,微软大法好
