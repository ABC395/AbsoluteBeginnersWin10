[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: uwp05TypeConverters_high.mp4
Video File: uwp05TypeConverters_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Video Position: 95

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Windows,Microsoft YaHei,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:03.16,0:00:05.16,Windows,,0,0,0,,理解类型转换器\N翻译@X_TK   校对@Westie陈老师
Dialogue: 0,0:00:05.16,0:00:08.96,Windows,,0,0,0,,大家好 我是www.learnvisualstudio.net的Bob Tabor
Dialogue: 0,0:00:09.42,0:00:11.80,Windows,,0,0,0,,我们正在一点一点地学习XAML语言
Dialogue: 0,0:00:11.80,0:00:13.80,Windows,,0,0,0,,在这个视频里 我将向大家解释
Dialogue: 0,0:00:13.80,0:00:15.80,Windows,,0,0,0,,在我们上一个视频"WhatIsXAML"的APP
Dialogue: 0,0:00:15.80,0:00:21.10,Windows,,0,0,0,,中出现的被称为"类型转换器"
Dialogue: 0,0:00:21.10,0:00:23.10,Windows,,0,0,0,,的一个功能
Dialogue: 0,0:00:23.76,0:00:26.06,Windows,,0,0,0,,我做了一些改动
Dialogue: 0,0:00:26.06,0:00:29.46,Windows,,0,0,0,,首先我去掉了MainPage.xaml里面
Dialogue: 0,0:00:29.46,0:00:31.46,Windows,,0,0,0,,这个按钮代码的注释
Dialogue: 0,0:00:32.10,0:00:36.00,Windows,,0,0,0,,如果你再仔细看看
Dialogue: 0,0:00:36.00,0:00:39.06,Windows,,0,0,0,,你会发现和上一个视频相比
Dialogue: 0,0:00:39.06,0:00:41.06,Windows,,0,0,0,,有一个不同的地方在于
Dialogue: 0,0:00:41.06,0:00:44.84,Windows,,0,0,0,,HorizontalAlignment这个属性
Dialogue: 0,0:00:44.84,0:00:48.02,Windows,,0,0,0,,和VerticalAlignment属性
Dialogue: 0,0:00:48.02,0:00:50.22,Windows,,0,0,0,,我们重点看HorizontalAlignment属性
Dialogue: 0,0:00:50.22,0:00:53.54,Windows,,0,0,0,,它被设定为值为Left的字符串
Dialogue: 0,0:00:53.54,0:00:57.20,Windows,,0,0,0,,然而C#的代码和这里有所不同
Dialogue: 0,0:00:57.20,0:01:00.54,Windows,,0,0,0,,在我们给HorizontalAlignment属性赋值时
Dialogue: 0,0:01:00.54,0:01:03.26,Windows,,0,0,0,,我们用了显式声明的枚举类型值
Dialogue: 0,0:01:03.26,0:01:04.48,Windows,,0,0,0,,而不是字符串
Dialogue: 0,0:01:04.48,0:01:07.62,Windows,,0,0,0,,这是一个显式声明的
Dialogue: 0,0:01:07.62,0:01:11.10,Windows,,0,0,0,,Windows.UI.Xmal.HorizontalAlignment的枚举值
Dialogue: 0,0:01:11.46,0:01:15.32,Windows,,0,0,0,,这个枚举值也同样是Left
Dialogue: 0,0:01:15.32,0:01:16.96,Windows,,0,0,0,,但是是显式声明的
Dialogue: 0,0:01:17.06,0:01:21.36,Windows,,0,0,0,,那到底是为什么我们可以在这里用字符串
Dialogue: 0,0:01:21.36,0:01:24.18,Windows,,0,0,0,,而在C#中则必须要用显式声明呢
Dialogue: 0,0:01:24.18,0:01:25.84,Windows,,0,0,0,,原因是这样的
Dialogue: 0,0:01:25.84,0:01:28.00,Windows,,0,0,0,,XAML语法分析器会
Dialogue: 0,0:01:28.00,0:01:31.06,Windows,,0,0,0,,将这个字符串的值转换为
Dialogue: 0,0:01:31.06,0:01:34.46,Windows,,0,0,0,,这个值所对应的显式声明的枚举值
Dialogue: 0,0:01:34.46,0:01:38.22,Windows,,0,0,0,,即Windows.UI.Xaml.HorizontalAlignment.Left
Dialogue: 0,0:01:38.22,0:01:41.78,Windows,,0,0,0,,这一过程是通过"类型转换器"完成的
Dialogue: 0,0:01:41.78,0:01:43.78,Windows,,0,0,0,,而"类型转换器" (Type converter)
Dialogue: 0,0:01:43.78,0:01:46.78,Windows,,0,0,0,,是一个包含能将字符串转为
Dialogue: 0,0:01:46.78,0:01:49.30,Windows,,0,0,0,,显式声明值的过程的类型
Dialogue: 0,0:01:49.54,0:01:53.32,Windows,,0,0,0,,它们被编进了UWP的API中
Dialogue: 0,0:01:53.32,0:01:55.02,Windows,,0,0,0,,也将在本教程中被反复使用
Dialogue: 0,0:01:55.16,0:01:56.62,Windows,,0,0,0,,在这一个例子中
Dialogue: 0,0:01:56.62,0:01:58.94,Windows,,0,0,0,,HorizontalAlignment属性
Dialogue: 0,0:01:58.94,0:02:02.12,Windows,,0,0,0,,在被微软的开发者编写的时候
Dialogue: 0,0:02:02.12,0:02:05.70,Windows,,0,0,0,,其代码中加入了一个特性
Dialogue: 0,0:02:05.70,0:02:09.10,Windows,,0,0,0,,以触发XAML语法分析器来检验我们的代码
Dialogue: 0,0:02:09.10,0:02:12.38,Windows,,0,0,0,,以确保代码可以通过编译
Dialogue: 0,0:02:13.70,0:02:16.78,Windows,,0,0,0,,它将字符串Left
Dialogue: 0,0:02:16.78,0:02:21.28,Windows,,0,0,0,,放进类型转换器中并试图寻找与
Dialogue: 0,0:02:21.28,0:02:24.76,Windows,,0,0,0,,"Left"这个字符串所相匹配的
Dialogue: 0,0:02:24.76,0:02:28.76,Windows,,0,0,0,,Windows.UI.Xaml.HorizontalAlignment枚举值
Dialogue: 0,0:02:29.18,0:02:34.00,Windows,,0,0,0,,那好 我们来看看如果我们故意将Left拼错会发生什么
Dialogue: 0,0:02:34.14,0:02:36.00,Windows,,0,0,0,,我们把字母t去掉
Dialogue: 0,0:02:36.00,0:02:36.96,Windows,,0,0,0,,你会发现
Dialogue: 0,0:02:36.96,0:02:39.60,Windows,,0,0,0,,XAML语法分析器马上跳出来说:
Dialogue: 0,0:02:39.60,0:02:42.68,Windows,,0,0,0,,"等一下 我找不到
Dialogue: 0,0:02:42.68,0:02:47.08,Windows,,0,0,0,,与这个Lef字符串匹配的
Dialogue: 0,0:02:47.08,0:02:54.00,Windows,,0,0,0,,Windows.UI.Xaml.HorizontalAlignment枚举值"
Dialogue: 0,0:02:54.18,0:02:56.44,Windows,,0,0,0,,你现在知道它是如何运作的了
Dialogue: 0,0:02:57.06,0:03:00.06,Windows,,0,0,0,,我们得到了一个编译错误
Dialogue: 0,0:03:00.06,0:03:05.66,Windows,,0,0,0,,因为XAML语法分析器无法找到一个精确的匹配值
Dialogue: 0,0:03:05.90,0:03:10.94,Windows,,0,0,0,,我们逐步学习XAML语言并看到一些特性
Dialogue: 0,0:03:10.94,0:03:14.46,Windows,,0,0,0,,它是一个非常便捷的
Dialogue: 0,0:03:14.46,0:03:17.78,Windows,,0,0,0,,创建类型和传递属性的方法
Dialogue: 0,0:03:17.78,0:03:20.42,Windows,,0,0,0,,而类型转换器则是一个
Dialogue: 0,0:03:20.42,0:03:24.28,Windows,,0,0,0,,XAML所使用来达成这一点的工具
Dialogue: 0,0:03:24.28,0:03:27.46,Windows,,0,0,0,,这样一来我们就不用打那么多字了
Dialogue: 0,0:03:27.46,0:03:33.40,Windows,,0,0,0,,我们可以直接用一个非常简单的值
Dialogue: 0,0:03:33.40,0:03:39.34,Windows,,0,0,0,,来取代冗长的类型名和枚举值
Dialogue: 0,0:03:39.56,0:03:41.08,Windows,,0,0,0,,就是这么简单
Dialogue: 0,0:03:41.08,0:03:46.88,Windows,,0,0,0,,让我们继续努力学习XAML语言 下一堂课再见
