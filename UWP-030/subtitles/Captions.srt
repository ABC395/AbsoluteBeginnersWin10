1
00:00:05,020 --> 00:00:08,689
<v ->Hi, I'm Bob Tabor with www.learnvisualstudio.net</v>

2
00:00:08,690 --> 00:00:12,119
and this is another cheat sheet review session

3
00:00:13,260 --> 00:00:18,099
covering videos 25 through, I guess, what, 29 or so?

4
00:00:18,510 --> 00:00:21,589
Alright, so let's go ahead and add to what we

5
00:00:21,590 --> 00:00:25,019
previously had here, looking at lesson number 25

6
00:00:25,020 --> 00:00:27,989
talking about some of the additional

7
00:00:27,990 --> 00:00:30,239
common Controls in XAML.

8
00:00:30,690 --> 00:00:32,889
Looked at the TimePicker, we noticed that

9
00:00:32,890 --> 00:00:35,281
it had a special ClockIdentifier that allowed us

10
00:00:35,282 --> 00:00:40,281
to create AM/PM versus military time clocks for selection.

11
00:00:42,820 --> 00:00:46,029
The CalendarDatePicker which just showed a little

12
00:00:46,670 --> 00:00:48,989
representation of an area that can be selected

13
00:00:48,990 --> 00:00:52,489
and then you click on it and it will actually

14
00:00:52,490 --> 00:00:55,119
slow a Flyout with a menu or with

15
00:00:55,120 --> 00:00:58,409
a calendar on it, you can choose the placeholder

16
00:00:58,410 --> 00:01:03,409
text in that little area that you click on or tap on.

17
00:01:05,590 --> 00:01:08,419
Then we looked at the more full featured CalendarView

18
00:01:08,420 --> 00:01:13,419
and this allows us to make single or multiple selections

19
00:01:13,950 --> 00:01:17,681
for our Calendar, here I show how to handle the

20
00:01:17,682 --> 00:01:22,079
selected date change to then and then show

21
00:01:22,080 --> 00:01:24,889
in a TextBlock all of the selected dates

22
00:01:24,890 --> 00:01:27,089
using this little link statement here that

23
00:01:27,090 --> 00:01:29,699
projects out the month and the day.

24
00:01:30,690 --> 00:01:35,099
Put its in Array and then joins them together with a comma.

25
00:01:35,750 --> 00:01:37,782
Next, we looked at the FlyoutMenu,

26
00:01:37,783 --> 00:01:40,349
and we applied it to a Button, but we said

27
00:01:40,350 --> 00:01:42,439
we can apply it to lots of different things.

28
00:01:43,750 --> 00:01:46,319
Actually, just the Flyout in this particular case,

29
00:01:46,320 --> 00:01:47,949
it just would allow us to create a little,

30
00:01:49,280 --> 00:01:51,649
a dialogue on screen, we can put anything

31
00:01:51,650 --> 00:01:53,449
we want to in that dialogue, I think I

32
00:01:53,450 --> 00:01:58,189
styled it up with a StackPanel Label

33
00:01:58,190 --> 00:02:00,389
or rather a TextBlock and a Button

34
00:02:00,390 --> 00:02:04,489
and we can hide it once it's actually shown

35
00:02:04,490 --> 00:02:08,419
by handling an event, like a Button

36
00:02:08,420 --> 00:02:12,081
inside of that Flyout and just called

37
00:02:12,082 --> 00:02:15,089
Myflyout.Hide() or whatever the name

38
00:02:15,090 --> 00:02:17,169
of the Flyout that you've created.

39
00:02:17,720 --> 00:02:20,349
The corollary to this is the FlyoutMenu

40
00:02:20,350 --> 00:02:23,679
which I just accidentally set a moment ago

41
00:02:23,680 --> 00:02:26,749
and this allows you create a contextual menu

42
00:02:26,750 --> 00:02:29,549
from, again, any Control, I just happened

43
00:02:29,550 --> 00:02:31,259
to show it with a Button.

44
00:02:32,250 --> 00:02:34,319
You can create not only FlyoutMenu items

45
00:02:34,320 --> 00:02:37,389
and handle the Click or Tapped event

46
00:02:37,390 --> 00:02:39,519
which I'm not displaying here, you can create

47
00:02:39,520 --> 00:02:41,689
a separator to create visual separation,

48
00:02:41,690 --> 00:02:45,789
a little line between items, you can create a sub menu

49
00:02:45,790 --> 00:02:49,499
by using the MenuFlyoutSubItem element.

50
00:02:50,420 --> 00:02:53,649
Or you can create a toggle menu item by

51
00:02:53,650 --> 00:02:55,899
choosing the ToggleMenuFlyoutItem.

52
00:02:56,450 --> 00:02:59,849
I also, again, point out that this

53
00:02:59,850 --> 00:03:02,089
little technique of the Flyout or the

54
00:03:02,090 --> 00:03:03,949
MenuFlyout can be applied to many

55
00:03:03,950 --> 00:03:05,549
different types of Controls, you can learn

56
00:03:05,550 --> 00:03:07,339
more about it at that URL.

57
00:03:07,890 --> 00:03:09,319
Alright, next up we talked about the

58
00:03:09,320 --> 00:03:11,619
autoSuggestBox and this was pretty neat

59
00:03:11,620 --> 00:03:13,249
and we're going to use this here in an

60
00:03:13,250 --> 00:03:16,999
upcoming challenge, here we have...

61
00:03:18,250 --> 00:03:21,319
The, we can change the QueryIcon

62
00:03:21,320 --> 00:03:25,819
by default, we set it to, here, let me (mumble),

63
00:03:25,820 --> 00:03:27,789
we set it to little magnifying glass,

64
00:03:27,790 --> 00:03:30,309
the Find QueryIcon and we also changed the

65
00:03:30,310 --> 00:03:32,589
PlaceholderText, but the real power is

66
00:03:32,590 --> 00:03:35,152
in this TextChanged EventHandler which

67
00:03:35,153 --> 00:03:37,439
we handle here, you can see.

68
00:03:38,120 --> 00:03:40,519
This time we're just going to go against this simple

69
00:03:40,520 --> 00:03:44,149
Array of Strings and we filter it using a Where link clause,

70
00:03:44,150 --> 00:03:48,919
then we add those items to an array and set them

71
00:03:48,920 --> 00:03:52,669
as the item Source for our AutoSuggestBox.

72
00:03:53,050 --> 00:03:55,219
That, as we type additional letters, it will

73
00:03:55,220 --> 00:03:56,981
reduce the number of options, then we can

74
00:03:56,982 --> 00:04:00,699
use the arrow keys to select one of the items.

75
00:04:01,220 --> 00:04:02,719
Then I'm just going to paste these three

76
00:04:02,720 --> 00:04:04,083
in together even though they're not

77
00:04:04,084 --> 00:04:06,589
necessarily related, we looked at the SliderControl

78
00:04:06,590 --> 00:04:10,349
which is used often in the Settings panel

79
00:04:10,350 --> 00:04:14,949
in Windows 10, the ProgressBar where we

80
00:04:14,950 --> 00:04:17,499
can set the Maximum and the Minimum.

81
00:04:18,120 --> 00:04:20,799
Or, I'm sorry, just the Maximum for the ProgressBar.

82
00:04:21,320 --> 00:04:23,619
Here I created a Binding statement, we'll talk

83
00:04:23,620 --> 00:04:26,119
about x:Bind a little bit later,

84
00:04:26,120 --> 00:04:29,519
we bound it to the SliderValue so that when we

85
00:04:29,520 --> 00:04:33,069
move the Slider, we were also moving the ProgressBar.

86
00:04:33,520 --> 00:04:35,049
If we didn't want to do that, we could just

87
00:04:35,050 --> 00:04:38,189
manually set the Value attribute of the ProgressBar

88
00:04:38,190 --> 00:04:40,999
in C# or whatever.

89
00:04:41,550 --> 00:04:44,449
Then finally show the ProgressRing and we can turn

90
00:04:44,450 --> 00:04:48,049
on that ProgressRing by setting IsActive="True",

91
00:04:48,050 --> 00:04:50,119
or we could stop it and no longer display it

92
00:04:50,120 --> 00:04:51,699
setting it to False.

93
00:04:52,320 --> 00:04:54,949
Alright, next up, in the next lesson we talked

94
00:04:54,950 --> 00:04:57,849
about the ScrollViewer and this is going to

95
00:04:57,850 --> 00:05:01,019
be a crucial item as well, it allows us to

96
00:05:01,020 --> 00:05:04,099
add a number of items that are...

97
00:05:05,090 --> 00:05:08,839
That don't display in the current window size.

98
00:05:09,580 --> 00:05:13,809
And give us scrolling ability, horizontally and vertically,

99
00:05:13,810 --> 00:05:16,499
to look around that window.

100
00:05:18,550 --> 00:05:20,549
Here I'm setting the HorizontalScrollBarVisibility="Auto"

101
00:05:20,550 --> 00:05:22,449
HorizontalScrollBarVisibility="Auto", but you can also say

102
00:05:22,450 --> 00:05:27,089
Hidden or always on and then I said

103
00:05:27,090 --> 00:05:29,189
you can put anything you want to

104
00:05:29,190 --> 00:05:31,049
inside the ScrollViewer, but the ScrollViewer

105
00:05:31,050 --> 00:05:33,089
cannot be inside of a StackPanel, if you put it

106
00:05:33,090 --> 00:05:36,149
inside of a StackPanel, it won't do anything at all.

107
00:05:36,150 --> 00:05:39,189
Okay, next up we talked about the Canvas

108
00:05:39,190 --> 00:05:40,819
and Shapes, I'm going to just paste in

109
00:05:40,820 --> 00:05:43,799
the first couple, let me just paste in the whole thing.

110
00:05:45,820 --> 00:05:47,419
I just wanted to cover this for the sake

111
00:05:47,420 --> 00:05:50,149
of completeness, the Canvas allows you

112
00:05:50,150 --> 00:05:53,119
to do absolute positioning via Attached properties,

113
00:05:53,120 --> 00:05:57,309
so unlike the RelativePanel or even the Grid,

114
00:05:57,310 --> 00:06:00,189
the StackPanel, the Canvas is for

115
00:06:00,190 --> 00:06:02,019
absolute positioning, we said typically

116
00:06:02,020 --> 00:06:05,019
that's not a great thing, a great way to use it,

117
00:06:05,020 --> 00:06:07,749
but it does have its uses, especially when

118
00:06:07,750 --> 00:06:11,149
it combined with some of the Line,

119
00:06:11,150 --> 00:06:13,819
the Rectangle, the Ellipse, for doing drawing

120
00:06:13,820 --> 00:06:15,919
or any kind of diagramming or anything

121
00:06:15,920 --> 00:06:17,939
that has a visual component to it.

122
00:06:18,480 --> 00:06:20,119
Showed you how to use the Line, the Line

123
00:06:20,120 --> 00:06:24,549
we could actually utilize this outside of the Canvas,

124
00:06:24,550 --> 00:06:28,949
but the Polyline, you'll noticed that we used

125
00:06:28,950 --> 00:06:31,049
the Canvas to set the top in the

126
00:06:31,050 --> 00:06:33,589
left-hand corners in offset and then

127
00:06:33,590 --> 00:06:35,839
filled in the Points.

128
00:06:36,520 --> 00:06:39,639
X,Y Point positions in order to create a Triangle.

129
00:06:41,790 --> 00:06:45,019
Then also we talked about the Rectangle and the Ellipse,

130
00:06:45,020 --> 00:06:47,851
I think we've used those before in this series,

131
00:06:47,852 --> 00:06:49,501
just didn't really talk about them.

132
00:06:49,982 --> 00:06:51,721
Then finally talked about the Canvas's

133
00:06:51,722 --> 00:06:54,151
Attached property called ZIndex and essentially,

134
00:06:54,152 --> 00:06:57,621
you think about everything we're looking at

135
00:06:57,622 --> 00:06:59,521
as flat, but what if we were to turn it 3D

136
00:06:59,522 --> 00:07:01,321
and then we were able to see the order

137
00:07:01,322 --> 00:07:03,481
in which things were stacked and sitting

138
00:07:03,482 --> 00:07:06,271
on top of each other and that's what ZIndex does.

139
00:07:06,722 --> 00:07:08,711
The higher the number, the higher up

140
00:07:08,712 --> 00:07:11,501
in the stack it is, the more it covers, okay.

141
00:07:13,322 --> 00:07:16,171
Next up, we talked about XAML styles.

142
00:07:18,482 --> 00:07:20,721
First of all, we started by just looking at

143
00:07:20,722 --> 00:07:24,891
Resources, we created, for example a SolidColorBrush,

144
00:07:24,892 --> 00:07:29,891
gave it a Key and then set its particular Attribute

145
00:07:29,952 --> 00:07:33,591
in this case the Color and so we can use

146
00:07:33,592 --> 00:07:38,291
this everywhere that we want to use this

147
00:07:38,292 --> 00:07:42,671
accent Color Brown just by referencing the Key.

148
00:07:43,052 --> 00:07:44,651
Then if we were to change that color from

149
00:07:44,652 --> 00:07:46,551
brown to red in the future, nothing changes,

150
00:07:46,552 --> 00:07:47,891
all we have to do is just change it in one

151
00:07:47,892 --> 00:07:49,651
little spot here and it changes it for

152
00:07:49,652 --> 00:07:51,261
the entire application.

153
00:07:52,792 --> 00:07:56,021
Styles are like those Resources on steroids,

154
00:07:56,022 --> 00:07:58,591
they allow us to set multiple Attributes

155
00:07:58,592 --> 00:08:03,591
all at once by giving it a Key and identifying

156
00:08:04,592 --> 00:08:06,851
a TargetType, so this particular Style

157
00:08:06,852 --> 00:08:09,671
is generated specifically for a Button.

158
00:08:10,092 --> 00:08:11,951
Now the way that you actually apply these things

159
00:08:11,952 --> 00:08:16,711
is through a Binding statement and the

160
00:08:16,712 --> 00:08:18,411
Binding statement will look like this where

161
00:08:18,412 --> 00:08:20,091
you have the open and closing curly braces,

162
00:08:20,092 --> 00:08:21,491
the word StaticResource and then

163
00:08:21,492 --> 00:08:23,341
the name of the Resource, so it could be

164
00:08:23,342 --> 00:08:27,991
the Style Key or the Resource Key MyBrush

165
00:08:27,992 --> 00:08:29,641
or my Button Style.

166
00:08:31,052 --> 00:08:36,051
Then we talked about creating these ResourceDictionaries

167
00:08:36,992 --> 00:08:39,851
ResourceDictionaries at multiple levels, at the Page,

168
00:08:39,852 --> 00:08:42,081
at the Application, but then also we said

169
00:08:42,082 --> 00:08:46,951
you could create a ResourceDictionary file, I showed you

170
00:08:46,952 --> 00:08:49,551
how to do that by going to the Project,

171
00:08:49,552 --> 00:08:52,451
Add New Item and then Resource Dictionary

172
00:08:52,452 --> 00:08:55,241
was one of the options there, so we added a new file

173
00:08:55,242 --> 00:08:57,451
called Dictionary1.xaml and then we

174
00:08:57,452 --> 00:08:59,321
defined a SolidColorBrush there

175
00:08:59,322 --> 00:09:01,801
and used it in our application.

176
00:09:02,982 --> 00:09:04,851
The way you use it is to merge those

177
00:09:04,852 --> 00:09:07,151
ResourceDictionaries that you defined together,

178
00:09:07,152 --> 00:09:11,321
in this case not only did I add the Dictionary1.xaml

179
00:09:11,322 --> 00:09:14,521
to this particular Page, but then also one I'm

180
00:09:14,522 --> 00:09:17,221
not displaying on this cheat sheet called Dictionary2

181
00:09:17,222 --> 00:09:19,121
and then I can, in the rest of the Page

182
00:09:19,122 --> 00:09:22,721
reference any of the Styles that were

183
00:09:22,722 --> 00:09:25,591
created either at the Page, the Application

184
00:09:25,592 --> 00:09:28,931
or any of the two ResourceDictionaries that we have.

185
00:09:29,452 --> 00:09:31,991
ResourceDictionaries, again, help us manage

186
00:09:31,992 --> 00:09:34,671
lots of styles, we're going to reuse them in multiple projects.

187
00:09:36,422 --> 00:09:39,971
They're great for organization, things of that nature.

188
00:09:40,492 --> 00:09:43,751
Then finally, we just talked about Themes, let me

189
00:09:43,752 --> 00:09:48,751
give you a nice URL for learning more about Theme Resources.

190
00:09:49,692 --> 00:09:53,191
Essentially, if you find something that is a

191
00:09:53,192 --> 00:09:55,351
Binding statement with ThemeResource,

192
00:09:55,352 --> 00:09:58,351
you can take a look at that style by

193
00:09:58,352 --> 00:10:00,551
putting your mouse cursor on it, hit F12

194
00:10:00,552 --> 00:10:03,371
and that'll open up a file called Generic.xaml.

195
00:10:03,892 --> 00:10:06,691
We saw where there were a couple of different

196
00:10:06,692 --> 00:10:09,591
Styles that we could choose from that would

197
00:10:09,592 --> 00:10:13,151
allow us to utilize the colors, the theme colors

198
00:10:13,152 --> 00:10:14,991
that were selected by the user whether on

199
00:10:14,992 --> 00:10:17,901
the desktop or the phone or even an Xbox One.

200
00:10:19,122 --> 00:10:21,651
In addition to that we can also request a Theme,

201
00:10:21,652 --> 00:10:24,311
we saw how by default our application requests

202
00:10:24,312 --> 00:10:26,361
the Light Theme, but we changed it to Dark

203
00:10:26,362 --> 00:10:28,021
and saw what the impact was.

204
00:10:28,022 --> 00:10:31,251
However, in all cases regarding Themes and Styles,

205
00:10:31,252 --> 00:10:34,691
High Contrast Themes will override because

206
00:10:34,692 --> 00:10:36,691
it's really a usability issue.

207
00:10:37,922 --> 00:10:41,391
Finally, we talked about the fact that

208
00:10:41,392 --> 00:10:43,621
there are lots of different Themes not just

209
00:10:43,622 --> 00:10:46,211
for colors, but then also for things like

210
00:10:47,772 --> 00:10:51,021
Font Styles and so to illustrate this we went

211
00:10:51,022 --> 00:10:53,291
to the Properties window, went to the Style Property,

212
00:10:53,292 --> 00:10:57,271
clicked the little designer, it popped open...

213
00:10:58,552 --> 00:11:01,221
A contextual menu that allowed us to select

214
00:11:01,222 --> 00:11:05,291
from several styles that were predefined.

215
00:11:05,822 --> 00:11:07,751
We chose the HeaderTextBlock style and some

216
00:11:07,752 --> 00:11:10,821
of the others and we saw how now it shared,

217
00:11:10,822 --> 00:11:15,821
our TextBlock shared the same Style as other...

218
00:11:16,822 --> 00:11:19,471
Items that we would see typically in Windows 10.

219
00:11:19,912 --> 00:11:22,091
Then finally, many of the Styles that were

220
00:11:22,092 --> 00:11:24,651
defined in the Generic.xaml had this

221
00:11:24,652 --> 00:11:29,651
BasedOn attribute that created a baseline style

222
00:11:29,952 --> 00:11:34,511
and then there would be styles that derived from that style

223
00:11:34,512 --> 00:11:39,251
based on that original style and then it'd add or change

224
00:11:39,252 --> 00:11:41,351
some of the attributes, so it's very much

225
00:11:41,352 --> 00:11:43,501
like Cascading Style Sheets in a sense.

226
00:11:44,582 --> 00:11:46,451
If you're familiar with that in web development,

227
00:11:46,452 --> 00:11:49,241
this should feel pretty similar.

228
00:11:49,612 --> 00:11:52,591
Okay, so quick review, hopefully all those

229
00:11:52,592 --> 00:11:54,621
concepts make sense and we're moving on

230
00:11:54,622 --> 00:11:57,311
and continuing to add complexity,

231
00:11:57,312 --> 00:11:59,341
you're doing great, hang in there.

232
00:12:00,052 --> 00:12:01,911
I don't know that we're about halfway done yet,

233
00:12:01,912 --> 00:12:03,391
but we're getting close, alright?

234
00:12:03,392 --> 00:12:05,551
We'll see you in the next lesson where

235
00:12:05,552 --> 00:12:07,651
we start moving on to some advanced content.

236
00:12:07,652 --> 00:12:09,041
See you there, thanks.  

