[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: uwp61WeatherLiveTiles_high.mp4
Video File: uwp61WeatherLiveTiles_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 211
Active Line: 221
Video Position: 54677

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: yahei,微软雅黑,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,yahei,,0,0,0,,UWP天气-动态磁贴（周期性更新磁贴通知）\N翻译：shi 审核: imbushuo
Dialogue: 0,0:00:05.00,0:00:08.37,yahei,,0,0,0,,我们的 App 主要功能设置已经完成了
Dialogue: 0,0:00:08.57,0:00:13.14,yahei,,0,0,0,,可能还有一些小的界面美化设置
Dialogue: 0,0:00:13.14,0:00:19.34,yahei,,0,0,0,,然后就都交给你们了，你们可以继续调试或者添加更多功能
Dialogue: 0,0:00:19.34,0:00:24.65,yahei,,0,0,0,,在这之前，我还要再加一个非常棒的功能
Dialogue: 0,0:00:24.65,0:00:33.28,yahei,,0,0,0,,就是怎样设置动态磁贴，也就是磁贴会根据 App 的内容自动更新
Dialogue: 0,0:00:33.28,0:00:40.77,yahei,,0,0,0,,这里面分为两种情况\N在第一种里，磁贴会按需更改内容
Dialogue: 0,0:00:40.77,0:00:45.77,yahei,,0,0,0,,也就是程序会积极向磁贴推送数据
Dialogue: 0,0:00:45.77,0:00:50.68,yahei,,0,0,0,,而第二种则是设置周期性的推送通知
Dialogue: 0,0:00:50.68,0:00:55.91,yahei,,0,0,0,,提供一些获取数据的网址，再将成果展示给用户
Dialogue: 0,0:00:55.91,0:01:01.05,yahei,,0,0,0,,这部分很繁杂，不过在这里我只会展示一种简单的方法
Dialogue: 0,0:01:01.05,0:01:11.77,yahei,,0,0,0,,希望你掌握了这个，还要读文档的方法后\N可以继续扩展，学到更多东西
Dialogue: 0,0:01:11.77,0:01:16.91,yahei,,0,0,0,,应用到手机和电脑的开始菜单中
Dialogue: 0,0:01:16.91,0:01:26.37,yahei,,0,0,0,,就像我屏幕显示的，我创建了一个新的程序叫做 TileUpdateManagerExample
Dialogue: 0,0:01:26.45,0:01:40.31,yahei,,0,0,0,,也是用于学习和理解的便笺应用\N当我掌握了之后就可以应用的实际程序中去
Dialogue: 0,0:01:40.31,0:01:44.42,yahei,,0,0,0,,这个程序中包含了两个主要特性
Dialogue: 0,0:01:44.42,0:01:52.37,yahei,,0,0,0,,我要展示的第一种就是如何将新的内容系统的推送到动态磁贴中
Dialogue: 0,0:01:52.37,0:01:59.45,yahei,,0,0,0,,虽然这么说，但是我还是需要写代码来控制
Dialogue: 0,0:01:59.45,0:02:08.02,yahei,,0,0,0,,或者我就需要预定好通知时间\N比如每半个小时去从网络服务器获取一些数据回来
Dialogue: 0,0:02:08.02,0:02:10.02,yahei,,0,0,0,,我们也会讲创建这个网络服务器的相关知识的
Dialogue: 0,0:02:10.02,0:02:17.62,yahei,,0,0,0,,既然这个 App 正常运行，我们要做的就是到所有程序列表中找到它
Dialogue: 0,0:02:17.62,0:02:22.48,yahei,,0,0,0,,然后右键，钉到开始界面
Dialogue: 0,0:02:22.77,0:02:32.60,yahei,,0,0,0,,在开始菜单上，动态磁贴此时是默认图标
Dialogue: 0,0:02:32.60,0:02:39.71,yahei,,0,0,0,,然后在程序中键入一些非常简单的东西（比如Hello World）\N然后点击更改磁贴内容
Dialogue: 0,0:02:39.71,0:02:46.51,yahei,,0,0,0,,当我下一次到开始菜单的时候\N磁贴就会翻转并出现我键入的东西
Dialogue: 0,0:02:46.51,0:02:56.08,yahei,,0,0,0,,那再做一次试试呢？\N键入 Hello Periodic （啊地儿不够了）
Dialogue: 0,0:02:56.08,0:03:00.91,yahei,,0,0,0,,也是一样的，磁贴翻转并出现了“Hello Periodic”
Dialogue: 0,0:03:00.91,0:03:11.54,yahei,,0,0,0,,那我接下来讲一下怎么系统的强制更改吧\N这部分比较重要，所以再讲更高级的东西之前我要把这部分讲清楚
Dialogue: 0,0:03:11.54,0:03:21.54,yahei,,0,0,0,,这里有一个 TileUpdateManager 类\N是 Windows.UI.Notifications 命名空间的一部分
Dialogue: 0,0:03:21.54,0:03:26.80,yahei,,0,0,0,,首先要做的就是创建一个模板和其中的内容
Dialogue: 0,0:03:26.80,0:03:32.54,yahei,,0,0,0,,这里也有一些磁贴类型 (TileTemplateType) 的枚举
Dialogue: 0,0:03:32.54,0:03:36.65,yahei,,0,0,0,,你看这么下拉的话有一大堆呢
Dialogue: 0,0:03:36.65,0:03:45.88,yahei,,0,0,0,,它们的详细列表可以在这个链接中找到\N我先打开给你们看一下
Dialogue: 0,0:03:45.88,0:03:49.68,yahei,,0,0,0,,（把这个关掉）
Dialogue: 0,0:03:49.68,0:03:52.14,yahei,,0,0,0,,这就是磁贴模板的列表了
Dialogue: 0,0:03:52.14,0:03:58.77,yahei,,0,0,0,,大概看一下列表，能看到所有枚举
Dialogue: 0,0:03:58.77,0:04:02.22,yahei,,0,0,0,,比如这里的 150*150 的磁贴图片
Dialogue: 0,0:04:02.22,0:04:09.88,yahei,,0,0,0,,是如何在桌面端和手机端的开始菜单显示的
Dialogue: 0,0:04:10.00,0:04:11.88,yahei,,0,0,0,,其实它们看起来都差不多
Dialogue: 0,0:04:11.88,0:04:19.80,yahei,,0,0,0,,不过中间可能会有一点差距，根据菜单界面的不同
Dialogue: 0,0:04:19.80,0:04:26.45,yahei,,0,0,0,,所以你可以在这其中选择合适的
Dialogue: 0,0:04:26.45,0:04:32.11,yahei,,0,0,0,,比如我选了 TileSquare150x150Text04，点击它
Dialogue: 0,0:04:32.11,0:04:42.42,yahei,,0,0,0,,然后就会跳转到详情介绍这一块
Dialogue: 0,0:04:42.42,0:04:48.60,yahei,,0,0,0,,这部分包括了磁贴模板的功能，以及如何使用
Dialogue: 0,0:04:48.60,0:04:57.14,yahei,,0,0,0,,可以看到这部分可以进行内容排版\N所以直接甩锅，把长串的内容交给它好啦
Dialogue: 0,0:04:57.14,0:05:03.94,yahei,,0,0,0,,还有一种就是需要将内容分别填进四行中的
Dialogue: 0,0:05:03.94,0:05:12.31,yahei,,0,0,0,,所以不同的模板之间会有一点不同\N希望你能找到在哪里找到这些信息
Dialogue: 0,0:05:12.31,0:05:16.37,yahei,,0,0,0,,然后这部分就是我们会用到的 XML
Dialogue: 0,0:05:16.82,0:05:25.02,yahei,,0,0,0,,那我们首先来看一下 TileSquare150x150Text01 大概是什么样子
Dialogue: 0,0:05:25.45,0:05:32.65,yahei,,0,0,0,,所以先返回顶部，然后 Ctrl+F 在网页中搜索
Dialogue: 0,0:05:32.65,0:05:35.65,yahei,,0,0,0,,嗯，我们需要的就是这个啦
Dialogue: 0,0:05:35.65,0:05:42.37,yahei,,0,0,0,,点击然后查看详情，这部分就是我们所用的模板部分啦
Dialogue: 0,0:05:45.65,0:05:49.62,yahei,,0,0,0,,啊不对，是这部分╮(╯-╰)╭
Dialogue: 0,0:05:49.62,0:05:54.45,yahei,,0,0,0,,我们待会要在这两行代码里详细修改这个 XML，所以要多了解一下
Dialogue: 0,0:05:54.45,0:06:06.48,yahei,,0,0,0,,我们要做的就是找到带有“text”的元素\N并在文本框输入内容的第一个元素中的子元素 （Child）
Dialogue: 0,0:06:06.48,0:06:14.80,yahei,,0,0,0,,所以现在要创建文本节点，然后将它作为子元素 （Child） 附入
Dialogue: 0,0:06:14.80,0:06:21.05,yahei,,0,0,0,,现在回去看网页中的部分\N并找到第一个”text“出现的元件
Dialogue: 0,0:06:21.05,0:06:28.11,yahei,,0,0,0,,然后附加子项，并在这部分中填充相应内容
Dialogue: 0,0:06:28.11,0:06:36.91,yahei,,0,0,0,,这部分完成之后，我们将要这个新的 XML 添加到新的磁贴通知中
Dialogue: 0,0:06:37.45,0:06:48.74,yahei,,0,0,0,,并通过磁贴更新管理器，将这个修改借用的模板更新至我们的应用程序
Dialogue: 0,0:06:48.97,0:06:52.60,yahei,,0,0,0,,这就是最简便的过程啦，五行就可以解决
Dialogue: 0,0:06:52.60,0:06:57.62,yahei,,0,0,0,,接下来我们要更进一步
Dialogue: 0,0:06:57.62,0:07:03.85,yahei,,0,0,0,,在下一个点击按钮事件中需要包含的是
Dialogue: 0,0:07:03.85,0:07:15.08,yahei,,0,0,0,,与其明确的将信息推送到管理器中并更新磁贴
Dialogue: 0,0:07:15.08,0:07:20.42,yahei,,0,0,0,,我要让它每隔一段时间自动更新这个 URL 中的内容
Dialogue: 0,0:07:20.42,0:07:31.80,yahei,,0,0,0,,所以接下来就需要创建一个可以每次返回类似这样XML的web服务器
Dialogue: 0,0:07:31.80,0:07:43.77,yahei,,0,0,0,,我这里还有一个单控制器 (Controller) 的 ASP.NET MVC 5 程序\N里面的主控制器 (Controller) 只返回一个 View
Dialogue: 0,0:07:43.80,0:07:46.25,yahei,,0,0,0,,然后打开 index.cshtml
Dialogue: 0,0:07:46.25,0:07:51.85,yahei,,0,0,0,,所以它的作用只是抓取当前时间并转为字符串
Dialogue: 0,0:07:52.20,0:07:54.65,yahei,,0,0,0,,然后在客户端中显示
Dialogue: 0,0:07:54.65,0:07:59.88,yahei,,0,0,0,,这里用到了和之前不同的模板，TileSquare150x150Text04
Dialogue: 0,0:07:59.88,0:08:10.08,yahei,,0,0,0,,然后还是一样，在网页中找到这一模板的 XML
Dialogue: 0,0:08:10.08,0:08:20.40,yahei,,0,0,0,,然后将里面的这部分（Text filed） 替换为当前时间
Dialogue: 0,0:08:20.80,0:08:26.37,yahei,,0,0,0,,做完这一切之后，我们要将它发布到 Azure 中去
Dialogue: 0,0:08:26.37,0:08:34.85,yahei,,0,0,0,,拖拽并右键弹出菜单，选择发布然后发到我的 Azure 账户去\N（哎呀你们看不到呢残念）
Dialogue: 0,0:08:37.60,0:08:46.02,yahei,,0,0,0,,然后如果我点击这里\N啊还是单开一个窗口比较好
Dialogue: 0,0:08:46.02,0:08:49.37,yahei,,0,0,0,,它就会显示当前时间
Dialogue: 0,0:08:49.37,0:08:59.20,yahei,,0,0,0,,当你们看视频的时候可能 periodic.azurewebsite.net 已经不可用了\N每次有人拿到这个我都要花钱
Dialogue: 0,0:08:59.20,0:09:09.14,yahei,,0,0,0,,点击查看源文件，可以看到之前的那个模板\N只不过中间的文本元件换成了当前时间
Dialogue: 0,0:09:09.14,0:09:12.51,yahei,,0,0,0,,是不是很厉害！\N（那也要关掉）
Dialogue: 0,0:09:12.51,0:09:22.25,yahei,,0,0,0,,既然已经建好了通知服务器，那接下来就回到磁贴更新管理器
Dialogue: 0,0:09:22.25,0:09:28.25,yahei,,0,0,0,,tileContent 和 requestInterval 都已经设好
Dialogue: 0,0:09:28.25,0:09:31.85,yahei,,0,0,0,,所以大概意思就是告诉管理器，希望你能每半小时更新一次（微笑）
Dialogue: 0,0:09:31.85,0:09:36.45,yahei,,0,0,0,,其实它不会十分准确的每半小时更新一次
Dialogue: 0,0:09:36.45,0:09:45.94,yahei,,0,0,0,,如果我们过 35 分钟或者更长时间回来看的话，它可能才刚刚更新
Dialogue: 0,0:09:45.94,0:09:47.94,yahei,,0,0,0,,那这就是请求区间了
Dialogue: 0,0:09:47.94,0:09:59.57,yahei,,0,0,0,,接下来，还可以告诉磁贴管理器来周期性地更新程序磁贴\N查看详情请点击屏幕上的链接
Dialogue: 0,0:09:59.57,0:10:08.60,yahei,,0,0,0,,这里面会有更详细的关于周期性更新的用法
Dialogue: 0,0:10:08.60,0:10:14.48,yahei,,0,0,0,,还有轮询序列和老百姓身边的故事（误：屏幕背后的故事）
Dialogue: 0,0:10:14.54,0:10:19.37,yahei,,0,0,0,,反正把这个文章安利给大家哟(●'◡'●)
Dialogue: 0,0:10:19.37,0:10:27.22,yahei,,0,0,0,,然后只需要添加 URL ，和更新周期它就会自己更新啦
Dialogue: 0,0:10:27.22,0:10:31.54,yahei,,0,0,0,,那我们再来运行一下试试
Dialogue: 0,0:10:34.71,0:10:46.91,yahei,,0,0,0,,点击排定通知，还不错什么都没跳出来\N然后打开开始菜单，没问题的话程序就会出现自动更新啦
Dialogue: 0,0:10:48.14,0:10:53.62,yahei,,0,0,0,,啊哈是没问题的！能看到当前时间在这里展示了
Dialogue: 0,0:10:55.62,0:11:05.08,yahei,,0,0,0,,接下来呢，就要将这一新的功能添加到我们 UWP 天气的程序里\N（不需要的就先都关掉好啦）
Dialogue: 0,0:11:08.17,0:11:21.97,yahei,,0,0,0,,比较好的处理方式就是：当我们每次获取天气信息的时候\N都在用户的当前位置排定一次更新
Dialogue: 0,0:11:21.97,0:11:25.51,yahei,,0,0,0,,这里使用的是设备的最近一个已知位置
Dialogue: 0,0:11:25.51,0:11:29.25,yahei,,0,0,0,,而并不是通过实时定位来获取天气
Dialogue: 0,0:11:29.25,0:11:36.08,yahei,,0,0,0,,所以如果你要开长途去别的地方玩\N很长时间才打开手机一次看天气，那磁贴上的就不是很准了
Dialogue: 0,0:11:36.08,0:11:43.62,yahei,,0,0,0,,不过如果你打开一下程序，里面的URL就会更新\N希望我这么说你们能明白吧（翻译君：希望我翻得你们能明白吧）
Dialogue: 0,0:11:43.62,0:11:52.71,yahei,,0,0,0,,不过也有方法能解决这个问题\N可是我还是觉得这些基础编译比较重要嘛（才不是因为懒）
Dialogue: 0,0:11:52.71,0:12:03.20,yahei,,0,0,0,,首先要做的就是创建一个新的工程\N先打开一个新的 Visual Studio 视窗
Dialogue: 0,0:12:03.20,0:12:14.20,yahei,,0,0,0,,创建一个 ASP.NET 程序并命名为UWPWeatherService （应该差不多？）
Dialogue: 0,0:12:14.20,0:12:19.05,yahei,,0,0,0,,先复制一下名字待会要用，然后点确定
Dialogue: 0,0:12:19.80,0:12:33.14,yahei,,0,0,0,,然后选择空白\N我用的还是老版的，不过其实都无所谓\N就算出了新的在这一系列视频中也不会有区别
Dialogue: 0,0:12:33.14,0:12:38.60,yahei,,0,0,0,,选择空白后然后添加 Core 引用至 MVC
Dialogue: 0,0:12:38.60,0:12:42.42,yahei,,0,0,0,,并确保这个程序在云平台中以网页程序类别存在
Dialogue: 0,0:12:42.42,0:12:52.91,yahei,,0,0,0,,然后需要登录，验证，就好啦！
Dialogue: 0,0:12:52.97,0:12:57.62,yahei,,0,0,0,,接着，将这个网页程序也命名为 UWPWeatherService
Dialogue: 0,0:12:57.62,0:13:02.45,yahei,,0,0,0,,然后我们就能在 http://uwpweatherservice.azurewebsites.net 中拿到了
Dialogue: 0,0:13:02.45,0:13:08.11,yahei,,0,0,0,,然后选择我的订阅和程序服务套餐
Dialogue: 0,0:13:08.11,0:13:16.40,yahei,,0,0,0,,研究组区域会根据上面的自动选定，最后的数据库就不选了
Dialogue: 0,0:13:17.40,0:13:19.60,yahei,,0,0,0,,这样就成功创建啦
Dialogue: 0,0:13:19.82,0:13:28.28,yahei,,0,0,0,,
Dialogue: 0,0:13:28.28,0:13:34.65,yahei,,0,0,0,,就算你不了解 ASP.NET MVC 也不要紧张
Dialogue: 0,0:13:34.65,0:13:39.14,yahei,,0,0,0,,看得多了就会熟练了嘛
Dialogue: 0,0:13:39.14,0:13:47.28,yahei,,0,0,0,,能看到现在就开始预留名称，创建账户\N这个状态栏也在不断地跑跑跑
Dialogue: 0,0:13:47.84,0:13:52.72,yahei,,0,0,0,,好哒那现在本地和线上的前期准备就完成啦！
Dialogue: 0,0:13:52.72,0:14:02.48,yahei,,0,0,0,,我首先要做的就是创建一个控件，右键点击创建类别为MVC5的控件
Dialogue: 0,0:14:02.48,0:14:04.72,yahei,,0,0,0,,并命名为HomeController（桌面控件）
Dialogue: 0,0:14:04.72,0:14:12.56,yahei,,0,0,0,,目前为止我们还不需要改动什么，反正待会会回来改的
Dialogue: 0,0:14:12.56,0:14:22.20,yahei,,0,0,0,,不过接下来我需要添加一个View\N诶诶好像不行...哈哈哈这样就可以了
Dialogue: 0,0:14:22.20,0:14:28.64,yahei,,0,0,0,,我不需要这个View变成partial，也不需要用页面布局
Dialogue: 0,0:14:28.64,0:14:35.16,yahei,,0,0,0,,我只需要一个空的没有模板view，命名为Index，然后点击添加
Dialogue: 0,0:14:35.16,0:14:46.08,yahei,,0,0,0,,然后我要将Index.cshtml中清空\N然后回到磁贴模板序列中
Dialogue: 0,0:14:46.08,0:14:54.92,yahei,,0,0,0,,找到Template01
Dialogue: 0,0:14:55.04,0:15:05.44,yahei,,0,0,0,,从TileSquare150x150Text01的模板中复制这部分
Dialogue: 0,0:15:05.44,0:15:10.04,yahei,,0,0,0,,并粘贴到刚才清空的文档中
Dialogue: 0,0:15:10.04,0:15:15.80,yahei,,0,0,0,,然后要做的就是将每行的这部分都替换掉
Dialogue: 0,0:15:15.80,0:15:20.88,yahei,,0,0,0,,并且用几种不同的MVC方法来替换
Dialogue: 0,0:15:20.88,0:15:22.88,yahei,,0,0,0,,这里面有一种更正统的方法，也有更廉价简洁的方法
Dialogue: 0,0:15:22.88,0:15:24.88,yahei,,0,0,0,,我要用到的就是这个乞丐版了
Dialogue: 0,0:15:24.88,0:15:29.68,yahei,,0,0,0,,接着我要创建几个ViewBag值
Dialogue: 0,0:15:29.88,0:15:33.48,yahei,,0,0,0,,然后利用这几个ViewBag将控件中的数据传送到view中去
Dialogue: 0,0:15:33.48,0:15:39.12,yahei,,0,0,0,,如果你想将这个变成一个实际的程序，我推荐你创建一个View model\N不过现在我们不会详细讲这部分
Dialogue: 0,0:15:39.12,0:15:45.96,yahei,,0,0,0,,ViewBag.Name\N欸 (～￣▽￣)→))*￣▽￣*)o
Dialogue: 0,0:15:45.96,0:15:53.96,yahei,,0,0,0,,首先第一个需要显示的就是温度\N然后是对于当前情况的描述
Dialogue: 0,0:15:53.96,0:15:58.28,yahei,,0,0,0,,比如有轻雾，晴天等等\N就是这类的
Dialogue: 0,0:15:58.28,0:16:04.20,yahei,,0,0,0,,然后是当前城镇位置的名称
Dialogue: 0,0:16:04.20,0:16:17.56,yahei,,0,0,0,,最后就是通过DateTime.Now.ToShortTimeString 来显示最后一次更新的时间
Dialogue: 0,0:16:17.56,0:16:26.08,yahei,,0,0,0,, 在HomeController的里面\N我需要做的是赋值
Dialogue: 0,0:16:26.08,0:16:32.12,yahei,,0,0,0,,然后需要做的就是添加一些 比如ViewBag.Name的值等等
Dialogue: 0,0:16:32.12,0:16:37.08,yahei,,0,0,0,,然后将这部分数据传入到querystring中
Dialogue: 0,0:16:37.08,0:16:42.76,yahei,,0,0,0,,所以在MVC中，我可以直接添加两个预期querystring名称的输入参数
Dialogue: 0,0:16:42.76,0:16:50.84,yahei,,0,0,0,,接着它会通过Index action result的方法分析参数并传入至输入参数中
Dialogue: 0,0:16:50.92,0:16:55.36,yahei,,0,0,0,,这里添加string lat和string lon表示经纬度
Dialogue: 0,0:16:55.36,0:17:08.20,yahei,,0,0,0,,从之前的经验教训中我得到这部分需要检查和验证\N再做一些微小的改变
Dialogue: 0,0:17:08.20,0:17:17.48,yahei,,0,0,0,,比如有的时候手机GPS会传入一个小数点后有很多位的值\N这个时候我们就需要调整一下了
Dialogue: 0,0:17:17.48,0:17:19.48,yahei,,0,0,0,,这样才能正常运行
Dialogue: 0,0:17:19.48,0:17:33.28,yahei,,0,0,0,,一旦我们拿到了经纬度的数据\N接下来要做的就是通过openweathermap.org 来运行这些数据
Dialogue: 0,0:17:33.28,0:17:41.48,yahei,,0,0,0,,并在与个人手机端，桌面端等相对应的网页端中引用
Dialogue: 0,0:17:44.36,0:17:45.76,yahei,,0,0,0,,所以接下来要创建一个新的类
Dialogue: 0,0:17:46.00,0:17:49.28,yahei,,0,0,0,,并命名为OpenWeatherMapProxy
Dialogue: 0,0:17:49.28,0:18:00.68,yahei,,0,0,0,,因为在UWPWeather中也有一个相同的类，所以比较容易搞混
Dialogue: 0,0:18:00.68,0:18:09.68,yahei,,0,0,0,,接着道OpenWeatherMapProxy中，把大部分内容直接复制粘贴
Dialogue: 0,0:18:11.00,0:18:21.96,yahei,,0,0,0,,比如这个类里面的内容，和文件里的所有类
Dialogue: 0,0:18:22.76,0:18:25.52,yahei,,0,0,0,,然后再添加一些细节
Dialogue: 0,0:18:25.52,0:18:41.28,yahei,,0,0,0,,比如我知道要在namespace中添加HttpClient型的\NNuGet Package Manager for solution\N（工具>NuGet Package Manager>Manager NuGet package for solution)
Dialogue: 0,0:18:41.88,0:18:43.60,yahei,,0,0,0,,然后点击添加o(*￣▽￣*)ブ
Dialogue: 0,0:18:48.24,0:18:51.16,yahei,,0,0,0,,接受证书条款
Dialogue: 0,0:18:51.16,0:19:02.48,yahei,,0,0,0,,还有一个一定需要添加的就是那个...DataContracJsonSerializer
Dialogue: 0,0:19:02.72,0:19:15.32,yahei,,0,0,0,,点击引用，选择添加引用，然后用serializer查找
Dialogue: 0,0:19:15.32,0:19:21.04,yahei,,0,0,0,,System.Runtime.Serialization这个命名空间
Dialogue: 0,0:19:21.04,0:19:24.00,yahei,,0,0,0,,然后添加它
Dialogue: 0,0:19:24.68,0:19:33.32,yahei,,0,0,0,,接着需要添加的就是System.Threading.Tasks的使用语句
Dialogue: 0,0:19:33.84,0:19:40.04,yahei,,0,0,0,,我先把所有的使用语句添加进去，这部分的基础设置也比较多
Dialogue: 0,0:19:40.04,0:19:47.12,yahei,,0,0,0,,好的目前看起来不错\N然后这里记得应该是System.IO...好哒！
Dialogue: 0,0:19:47.12,0:19:54.08,yahei,,0,0,0,,let Intellisense catch up \N欸这部分是哪儿的...System.Text\N嗯这是没问题哒
Dialogue: 0,0:19:54.08,0:20:02.28,yahei,,0,0,0,,而这部分呢...是来自System.Runtime.Serialization的
Dialogue: 0,0:20:02.28,0:20:08.20,yahei,,0,0,0,,目前看来应该都一切顺利(●'◡'●)
Dialogue: 0,0:20:08.20,0:20:18.52,yahei,,0,0,0,,我想先快速的生成一下，先来看一看我们完成的部分是什么状况
Dialogue: 0,0:20:18.52,0:20:27.12,yahei,,0,0,0,,完成啦\N这里的这部分应该是对的...先假设是对的
Dialogue: 0,0:20:27.12,0:20:36.44,yahei,,0,0,0,,现在到HomeController中\N设置lat=lat.substring（）
Dialogue: 0,0:20:36.52,0:20:57.68,yahei,,0,0,0,,（选择二次重载，并设定精度不超过五位）
Dialogue: 0,0:20:57.88,0:21:03.36,yahei,,0,0,0,,这样就足够了，或者设为六位应该也没有问题
Dialogue: 0,0:21:03.36,0:21:13.68,yahei,,0,0,0,,通过这种方法就能实现经纬度长度的限制\N不会是小数点后超多位的数值啦
Dialogue: 0,0:21:13.68,0:21:33.84,yahei,,0,0,0,,这部分设置完之后，我们就可以引用 \NModels.OpenWeatherMapProxy.GetWeather来传入经纬度的值
Dialogue: 0,0:21:33.84,0:21:39.60,yahei,,0,0,0,,不过我觉得我应该需要把这两个字符串转为double型
Dialogue: 0,0:21:39.60,0:21:51.40,yahei,,0,0,0,,（添加double.Parse)\N我还是应该多测试几遍，这样才不会有太多错误
Dialogue: 0,0:21:51.40,0:22:05.04,yahei,,0,0,0,,把前面的命名也改成var latitude和 var longitude
Dialogue: 0,0:22:05.04,0:22:12.88,yahei,,0,0,0,,这都全凭记忆做的...希望不会出错
Dialogue: 0,0:22:12.88,0:22:30.88,yahei,,0,0,0,,然后传入更改过的值\N因为它会返回一个根对象，并且需要等待\N所以在前面加上var weather=await
Dialogue: 0,0:22:30.88,0:22:46.80,yahei,,0,0,0,,还记得之前的式子嘛？（幼儿园老师语气）\N如果遇到这种情况，我们就要标记async\N而它返回的将是对将来的一个承诺
Dialogue: 0,0:22:46.80,0:22:57.20,yahei,,0,0,0,,在将来返回ActionResult的任务的承诺\N这样应该就没问题啦
Dialogue: 0,0:22:57.20,0:23:03.80,yahei,,0,0,0,,可能还缺一个System.Threading.Task 使用语句
Dialogue: 0,0:23:03.80,0:23:06.88,yahei,,0,0,0,,然后应该就没问题啦
Dialogue: 0,0:23:06.88,0:23:16.96,yahei,,0,0,0,,接下来要做的就是抓取从weather里得到的各种部分
Dialogue: 0,0:23:16.96,0:23:31.92,yahei,,0,0,0,,（代码如图所示...\N实在太长翻译君犯个懒)
Dialogue: 0,0:23:31.92,0:23:46.12,yahei,,0,0,0,,我们要将返回的数转换为整数然后ToString
Dialogue: 0,0:23:46.12,0:24:13.56,yahei,,0,0,0,,（打代码...)\N需要注意的是因为返回的天气有很多\N所以我们需要获取第一项以及它的描述
Dialogue: 0,0:24:13.56,0:24:23.72,yahei,,0,0,0,,哦对时间和日期已知是最后一个了...\N差不多啦 那我们再来生成一遍
Dialogue: 0,0:24:23.72,0:24:31.12,yahei,,0,0,0,,好哒！那接着我在本地运行一下，确认这个程序没问题
Dialogue: 0,0:24:31.12,0:24:41.04,yahei,,0,0,0,,这里出现了一个错误，因为我并没有提供经纬度
Dialogue: 0,0:24:41.04,0:24:55.32,yahei,,0,0,0,,那我们手动随便设置一个，看看能不能运行（参数见画面...翻译君又犯懒）
Dialogue: 0,0:24:56.52,0:25:07.40,yahei,,0,0,0,,好的那这是一个叫“七点”的不知名地方\N然后现在10点天气晴并且71华氏度...哈哈哈程序没问题
Dialogue: 0,0:25:07.40,0:25:17.88,yahei,,0,0,0,,那编程就告一段落了，接着我要调配它\N虽然你们看不到但是我在屏幕上点了发布
Dialogue: 0,0:25:17.88,0:25:21.40,yahei,,0,0,0,,然后验证连接
Dialogue: 0,0:25:21.40,0:25:34.72,yahei,,0,0,0,,我们在创建原始项目时这些细节也都被填上了\N这一部分也没什么需要注意的所以就直接发布了
Dialogue: 0,0:25:34.72,0:25:44.60,yahei,,0,0,0,,关键点是要记得uwpweatherservice.azurewebsites.net 哟
Dialogue: 0,0:25:44.60,0:25:51.60,yahei,,0,0,0,,让我先复制一下这个
Dialogue: 0,0:25:53.92,0:26:01.64,yahei,,0,0,0,,接着就是保存并最小化\N然后打开UWPWeather
Dialogue: 0,0:26:01.64,0:26:13.92,yahei,,0,0,0,,在MainPage.xml中，我要做的就是预定更新时间
Dialogue: 0,0:26:13.92,0:26:30.20,yahei,,0,0,0,,设置var uri并添加经纬度
Dialogue: 0,0:26:32.44,0:26:43.04,yahei,,0,0,0,,然后添加String.Format
Dialogue: 0,0:26:43.04,0:26:52.88,yahei,,0,0,0,,啊应该这样做...这都是double型的对吧
Dialogue: 0,0:26:52.88,0:27:25.64,yahei,,0,0,0,,（弄这弄那...）
Dialogue: 0,0:27:25.64,0:27:40.72,yahei,,0,0,0,,接下来我只需要将TileUpdateManager\N文档里的这部分代码复制粘贴就好了，反正都差不多
Dialogue: 0,0:27:40.72,0:27:59.48,yahei,,0,0,0,,复制粘贴过去，然后这里改为已知uri\N其他的应该都不用动啦
Dialogue: 0,0:27:59.48,0:28:06.60,yahei,,0,0,0,,我们先来生成一下确定目前为止没有什么问题
Dialogue: 0,0:28:06.60,0:28:16.20,yahei,,0,0,0,,然后就要全力祈祷运行app不会出问题吧
Dialogue: 0,0:28:16.80,0:28:33.56,yahei,,0,0,0,,不过首先我们先查找到我们的UWPWeather程序...然后钉到桌面
Dialogue: 0,0:28:33.56,0:28:47.12,yahei,,0,0,0,,虽然磁贴还是一个大方框不过没关系哒\N点击获取天气，确认获取位置权限
Dialogue: 0,0:28:47.72,0:28:57.16,yahei,,0,0,0,,之所以要确认是因为我之前卸载过一次\N嗯天气部分显示都没问题
Dialogue: 0,0:28:57.20,0:29:06.48,yahei,,0,0,0,,接下来关键点就是它能不能更新\N现在应该不会马上更新
Dialogue: 0,0:29:06.48,0:29:12.92,yahei,,0,0,0,,所以我现在先来debug一下，尤其是创建的uri
Dialogue: 0,0:29:12.92,0:29:26.24,yahei,,0,0,0,,哦问题不在WeatherService里，而是创建uri里面出了一点小错误\N吓死我了，还以为要重新发布呢，再跑一下试试
Dialogue: 0,0:29:28.56,0:29:38.52,yahei,,0,0,0,,还是点击获取天气，不过这次我直接抓取uri来确认这部分没问题
Dialogue: 0,0:29:39.40,0:29:50.84,yahei,,0,0,0,,然后继续，天气这部分还是没问题的\N啊啊啊这个磁贴一定会翻转显示的...太好了！开心！
Dialogue: 0,0:29:50.84,0:30:03.40,yahei,,0,0,0,,不过有一点奇怪的是上面显示的地点是Sachse而不是Plano\N它们是临近的两个镇，可能我住在边界上了吧，所以也没什么关系
Dialogue: 0,0:30:03.40,0:30:14.56,yahei,,0,0,0,,我觉得完成到这步很不容易啊（我也觉得）\N接下来还会有一些小的调整，不过大体上这样我也很满意了
Dialogue: 0,0:30:14.56,0:30:24.36,yahei,,0,0,0,,然后我们就会开始做下一个app啦开心！\N那下节课见咯\(•ω•`)o
Dialogue: 0,0:30:24.36,0:30:26.36,yahei,,0,0,0,,巨硬大法好！
