1
00:00:04,671 --> 00:00:08,832
<v ->Hi, I'm Bob Tabor with www.LearnVisualStudio.NET.</v>

2
00:00:08,833 --> 00:00:11,193
I'm going to let you in on a little secret,

3
00:00:11,194 --> 00:00:13,075
nobody memorizes all this stuff,

4
00:00:13,076 --> 00:00:14,657
at least not at first.

5
00:00:16,538 --> 00:00:17,934
It would probably take you

6
00:00:17,935 --> 00:00:19,595
several months of working

7
00:00:19,596 --> 00:00:21,596
and building applications in order

8
00:00:21,597 --> 00:00:23,437
to really internalize a lot of this.

9
00:00:23,438 --> 00:00:25,243
Intellisense is just awesome,

10
00:00:25,244 --> 00:00:28,525
and it really helps you through a lot of the rough spots.

11
00:00:28,526 --> 00:00:31,531
Little code snippets online are great,

12
00:00:31,532 --> 00:00:34,852
I use cheat sheets, which allow me to,

13
00:00:34,853 --> 00:00:36,873
they're just basically notes that I've gathered

14
00:00:36,874 --> 00:00:38,694
from watching a video series,

15
00:00:38,695 --> 00:00:40,574
or from reading articles online.

16
00:00:40,575 --> 00:00:42,795
It helps me to organize the information,

17
00:00:42,796 --> 00:00:46,015
see it visually, and then organize it in my mind as well.

18
00:00:48,266 --> 00:00:51,246
We're going to use this as a form of,

19
00:00:51,247 --> 00:00:53,817
of review throughout this series of lessons.

20
00:00:53,818 --> 00:00:56,899
This is what I promote on LearnVisualStudio.NET,

21
00:00:56,900 --> 00:00:59,984
and it's a great way to index in to the content to

22
00:00:59,985 --> 00:01:03,714
remind yourself of what the major ideas where,

23
00:01:03,715 --> 00:01:06,595
the crux of those videos.

24
00:01:06,596 --> 00:01:08,336
You can always remove the stuff you don't need,

25
00:01:08,337 --> 00:01:09,777
you can add stuff that you might think

26
00:01:09,778 --> 00:01:13,098
might be helpful in the future to make this your own.

27
00:01:13,099 --> 00:01:15,379
Now, I'm going to copy and paste from some notes,

28
00:01:15,380 --> 00:01:17,052
I use to type all this in by hand,

29
00:01:17,053 --> 00:01:18,633
but admittedly it was a

30
00:01:18,634 --> 00:01:21,204
very slow and painful process for both

31
00:01:21,205 --> 00:01:23,093
the teacher and for the learner.

32
00:01:24,224 --> 00:01:26,007
You can see here that I've created on my desktop

33
00:01:26,008 --> 00:01:26,807
a little cheat sheet,

34
00:01:26,808 --> 00:01:28,308
I would encourage you to do the same thing,

35
00:01:28,309 --> 00:01:31,885
UWP-Cheat-Sheet.txt.

36
00:01:31,886 --> 00:01:32,925
You can call it anything you want,

37
00:01:32,926 --> 00:01:34,346
you can put it anywhere you want to put it.

38
00:01:34,347 --> 00:01:36,421
This is just the way I'm going to do it in this series,

39
00:01:36,422 --> 00:01:38,303
and I'm going to begin to just type in

40
00:01:38,304 --> 00:01:40,904
or copy paste things in here,

41
00:01:40,905 --> 00:01:43,085
and you should feel free to do the same.

42
00:01:43,086 --> 00:01:45,756
You can use mine, or you can type it in yourself.

43
00:01:45,757 --> 00:01:47,946
I would recommend you type it in,

44
00:01:47,947 --> 00:01:49,938
it creates a little muscle memory.

45
00:01:49,939 --> 00:01:52,402
But at any rate, we're going to create a cheat sheet,

46
00:01:52,403 --> 00:01:54,522
and I'm going to paste in

47
00:01:54,523 --> 00:01:56,751
the big idea from a lot of the lessons.

48
00:01:56,752 --> 00:01:59,582
As we got started, you know, there wasn't a whole lot

49
00:01:59,583 --> 00:02:02,115
that we could add

50
00:02:02,116 --> 00:02:03,695
that would be useful long term,

51
00:02:03,696 --> 00:02:05,496
because it was a lot of high level ideas.

52
00:02:05,497 --> 00:02:08,537
But, when we got into XAML itself in lesson number four,

53
00:02:08,538 --> 00:02:11,678
we talked about the nature of the XAML syntax,

54
00:02:11,679 --> 00:02:13,758
how it is just a flavor of XML,

55
00:02:13,759 --> 00:02:16,658
or rather it uses XML to implement the syntax.

56
00:02:16,659 --> 00:02:18,818
to implement the syntax.

57
00:02:18,819 --> 00:02:20,263
And when you're writing XAML,

58
00:02:20,264 --> 00:02:22,704
you're really behind the scenes creating instances

59
00:02:22,705 --> 00:02:24,605
of classes and setting attributes

60
00:02:24,606 --> 00:02:27,345
or setting properties of those class instances

61
00:02:27,346 --> 00:02:29,346
that define the user interface.

62
00:02:30,397 --> 00:02:34,368
It's very natural for us to use an XML style syntax

63
00:02:34,369 --> 00:02:36,490
especially to be coming from a web development background.

64
00:02:36,491 --> 00:02:40,046
You're already using HTML to lay out your pages.

65
00:02:40,047 --> 00:02:41,266
Same idea here,

66
00:02:41,267 --> 00:02:43,466
you get designer support as a result of that.

67
00:02:43,467 --> 00:02:45,407
It's a much more succinct language.

68
00:02:45,408 --> 00:02:48,277
We compared writing XAML

69
00:02:48,278 --> 00:02:51,579
by hand versus writing C# by hand

70
00:02:51,580 --> 00:02:53,079
that essentially did the same thing.

71
00:02:53,080 --> 00:02:56,560
And we saved a lot of keystrokes and characters,

72
00:02:56,561 --> 00:03:00,554
and also the XAML parser was very intelligent,

73
00:03:00,555 --> 00:03:02,954
and Visual Studio played along,

74
00:03:02,955 --> 00:03:06,075
and it allowed us to write code much more succinctly

75
00:03:06,076 --> 00:03:08,015
to define our user interface.

76
00:03:08,016 --> 00:03:09,315
All right, moving on from there,

77
00:03:09,316 --> 00:03:10,956
in the next lesson after that,

78
00:03:10,957 --> 00:03:13,197
we talked about some specifics of XAML

79
00:03:13,198 --> 00:03:14,858
and we talked about type converters.

80
00:03:14,859 --> 00:03:17,639
And we said that, this is one of the ways in which

81
00:03:17,640 --> 00:03:20,300
it's made easier to write the XAML

82
00:03:20,301 --> 00:03:22,041
than it is the C# version,

83
00:03:22,042 --> 00:03:24,349
because we can give

84
00:03:26,260 --> 00:03:29,751
attributes of elements, literal strings, in XAML

85
00:03:29,752 --> 00:03:32,112
that are converted into enumerations

86
00:03:32,113 --> 00:03:36,753
or potentially even instances of classes in C#.

87
00:03:36,754 --> 00:03:40,642
So, type converters, one of the items,

88
00:03:40,643 --> 00:03:45,422
one of the tools that would help us keep our code succinct.

89
00:03:45,423 --> 00:03:47,362
We then talked about several different topics

90
00:03:47,363 --> 00:03:49,394
related to XAML in the next lesson,

91
00:03:49,395 --> 00:03:50,663
Understanding Default Properties,

92
00:03:50,664 --> 00:03:53,303
Complex Properties and the Property Element Syntax.

93
00:03:53,304 --> 00:03:54,684
So you can see here that

94
00:03:54,685 --> 00:03:58,125
the default property for a button is the content property,

95
00:03:58,126 --> 00:04:01,145
we set the button's content property to "Click Me",

96
00:04:01,146 --> 00:04:02,115
we could've done the same thing

97
00:04:02,116 --> 00:04:04,198
by just setting that attribute inside.

98
00:04:04,199 --> 00:04:06,954
But by understanding default properties,

99
00:04:06,955 --> 00:04:09,754
that kind of led us to the next step in the process,

100
00:04:09,755 --> 00:04:12,514
which was to talk about complex properties.

101
00:04:12,515 --> 00:04:14,374
So I've got kind of a big chunk of code here,

102
00:04:14,375 --> 00:04:16,194
I'm going to paste it in.

103
00:04:16,195 --> 00:04:19,034
Unfortunately, let's turn off word wrap

104
00:04:19,035 --> 00:04:21,646
for just a moment here so you can see this.

105
00:04:21,647 --> 00:04:22,738
We have

106
00:04:24,849 --> 00:04:28,638
a button, and we're setting the background

107
00:04:28,639 --> 00:04:29,893
of the button

108
00:04:29,894 --> 00:04:33,713
in a complex property,

109
00:04:33,714 --> 00:04:37,985
setting its property, the background property using the

110
00:04:37,986 --> 00:04:42,504
property dot element syntax.

111
00:04:43,575 --> 00:04:45,190
And, remember in this example,

112
00:04:45,191 --> 00:04:46,711
there was a lot more going on,

113
00:04:46,712 --> 00:04:49,511
but it was hidden from us

114
00:04:49,512 --> 00:04:51,551
by Visual Studio and the XAML parser,

115
00:04:51,552 --> 00:04:55,012
because a lot of that could be inferred by the context

116
00:04:55,013 --> 00:04:59,233
of what we typed in between the elements

117
00:04:59,234 --> 00:05:01,094
that we had here

118
00:05:01,095 --> 00:05:03,254
in this particular context property.

119
00:05:03,255 --> 00:05:06,815
All right, then next up we talk about

120
00:05:06,816 --> 00:05:09,847
the XAML schemas and namespace declarations.

121
00:05:09,848 --> 00:05:11,488
And we said that stuff at the very top of the page,

122
00:05:11,489 --> 00:05:13,428
don't touch it.

123
00:05:13,429 --> 00:05:16,671
We also said that the schemas

124
00:05:16,672 --> 00:05:19,953
are part of XML and XAML is no different,

125
00:05:19,954 --> 00:05:21,354
it has a number of different schemas.

126
00:05:21,355 --> 00:05:24,011
I think we saw like five or six different ones,

127
00:05:24,012 --> 00:05:27,382
and they define the rules for the XAML syntax itself

128
00:05:27,383 --> 00:05:30,245
for the controls that are defined

129
00:05:30,246 --> 00:05:33,906
in the Universal Windows Platform API.

130
00:05:33,907 --> 00:05:37,187
They're used for designer support by Blend and Visual Studio

131
00:05:37,188 --> 00:05:38,167
and so on.

132
00:05:38,168 --> 00:05:40,788
And then the little namespaces that were created,

133
00:05:40,789 --> 00:05:45,349
the little whatever it was, some value and then a colon,

134
00:05:45,350 --> 00:05:48,511
they tell the XAML parser where to find the definition,

135
00:05:48,512 --> 00:05:52,332
or rather the rules for a given element in the XAML.

136
00:05:52,333 --> 00:05:55,653
Now a lot of the XAML that we write

137
00:05:55,654 --> 00:06:00,181
will have no namespace little prefix in front of it,

138
00:06:00,182 --> 00:06:04,102
because a lot of it's defined in the default namespace

139
00:06:04,103 --> 00:06:06,295
for our page.

140
00:06:06,296 --> 00:06:08,436
Moving on, we talked about layout,

141
00:06:08,437 --> 00:06:11,876
specifically about layout grids, with grids,

142
00:06:11,877 --> 00:06:15,536
but let's start with just talking about layout in general.

143
00:06:15,537 --> 00:06:18,396
The layout controls don't have a content property

144
00:06:18,397 --> 00:06:20,417
like a lot of the other controls have.

145
00:06:20,418 --> 00:06:23,478
Instead they have a children property of type UIElementCollection,

146
00:06:23,479 --> 00:06:26,838
this allows us to add multiple items

147
00:06:26,839 --> 00:06:29,618
into a single layout control.

148
00:06:29,619 --> 00:06:31,979
And we saw what happened whenever you attempt to put

149
00:06:31,980 --> 00:06:34,879
multiple controls inside of a control,

150
00:06:34,880 --> 00:06:36,799
inside of the Content property of a control,

151
00:06:36,800 --> 00:06:39,579
you get that little error that you're trying to set

152
00:06:39,580 --> 00:06:43,879
the Content property more than once and it won't let you do that.

153
00:06:43,880 --> 00:06:47,014
So, by embedding any control

154
00:06:47,015 --> 00:06:50,575
inside of a layout control inside of its elements,

155
00:06:50,576 --> 00:06:53,195
you are implicitly calling the add method

156
00:06:53,196 --> 00:06:56,775
of the children collection property for that given element.

157
00:06:56,776 --> 00:07:00,415
So Grid.Children.Add(MyButton).

158
00:07:02,106 --> 00:07:05,364
All right, and then let me give you a quick definition of a Grid,

159
00:07:05,365 --> 00:07:08,045
and I just copied this from one of our examples.

160
00:07:08,046 --> 00:07:12,146
Here you can see that we defined both rows and columns

161
00:07:12,147 --> 00:07:14,098
using property element syntax.

162
00:07:15,689 --> 00:07:17,649
Whoops, let me get rid of that one,

163
00:07:17,650 --> 00:07:19,330
I wonder how that got in there.

164
00:07:19,331 --> 00:07:20,671
Much better, okay.

165
00:07:20,672 --> 00:07:23,422
So we have RowDefinitions,

166
00:07:23,423 --> 00:07:27,235
and then we define the number of rows.

167
00:07:27,236 --> 00:07:29,696
This is all out of whack, okay, there we go.

168
00:07:29,697 --> 00:07:32,096
And notice that we set the heights and the widths as well,

169
00:07:32,097 --> 00:07:35,188
which the sizes can be expressed in a number of different ways.

170
00:07:36,599 --> 00:07:39,198
And, let me paste that in here.

171
00:07:40,999 --> 00:07:43,018
Let's turn word wrap back on.

172
00:07:44,429 --> 00:07:46,389
Come back down here, okay.

173
00:07:46,390 --> 00:07:47,819
So it can be

174
00:07:48,870 --> 00:07:51,309
expressed in terms of

175
00:07:51,310 --> 00:07:54,568
explicit pixel sizes, right?

176
00:07:54,569 --> 00:07:57,671
So I can set it, so equal to like

177
00:07:57,672 --> 00:07:59,471
100 for example.

178
00:07:59,472 --> 00:08:01,512
But we said that that was a bad idea,

179
00:08:01,513 --> 00:08:05,224
because we're working with different form factors

180
00:08:05,225 --> 00:08:07,166
even within a given device family,

181
00:08:07,167 --> 00:08:10,786
and it may not look correct on a given form factor.

182
00:08:10,787 --> 00:08:15,094
So we would prefer to use auto and star sizing,

183
00:08:15,095 --> 00:08:18,574
which are relative ways of expressing sizes.

184
00:08:18,575 --> 00:08:22,754
Auto will use the largest value of the element it contains

185
00:08:22,755 --> 00:08:25,414
in order to define either the width or the height

186
00:08:25,415 --> 00:08:30,094
of that given row or column respectively.

187
00:08:30,095 --> 00:08:32,360
Or we can use star sizing,

188
00:08:32,361 --> 00:08:35,021
which says utilize all the available space that we have.

189
00:08:35,022 --> 00:08:37,555
So, we also saw an example where we were able to

190
00:08:37,556 --> 00:08:40,249
prefix the star with a number.

191
00:08:40,250 --> 00:08:43,829
And so, for example, we saw how one star

192
00:08:43,830 --> 00:08:45,030
would essentially be saying

193
00:08:45,031 --> 00:08:48,021
of all the space available give me one share of the total.

194
00:08:48,022 --> 00:08:50,043
Whereas three star would say

195
00:08:50,044 --> 00:08:51,714
hey give me of all the available space,

196
00:08:51,715 --> 00:08:53,115
give me three shares.

197
00:08:53,116 --> 00:08:56,215
So essentially in this example that I created right here,

198
00:08:56,216 --> 00:08:58,255
there would be six total shares,

199
00:08:58,256 --> 00:09:00,515
and a three star would be

200
00:09:00,516 --> 00:09:03,075
essentially either 50% of the width or the height

201
00:09:03,076 --> 00:09:04,586
depending on what we were defining.

202
00:09:06,077 --> 00:09:08,876
We also talked about how elements will

203
00:09:09,867 --> 00:09:12,491
put themselves inside of the grid

204
00:09:12,492 --> 00:09:15,831
at a specific row, column, or a specific cell.

205
00:09:15,832 --> 00:09:17,442
And we use this

206
00:09:18,593 --> 00:09:22,134
attached property syntax,

207
00:09:22,135 --> 00:09:24,556
remember that Grid.Row is not defining the button,

208
00:09:24,557 --> 00:09:26,252
it's actually defining the grid control,

209
00:09:26,253 --> 00:09:28,553
but we can attach it

210
00:09:28,554 --> 00:09:30,773
and say hey I want to set myself

211
00:09:30,774 --> 00:09:33,533
to this row and this column.

212
00:09:33,534 --> 00:09:37,633
So that's how we will actually work with

213
00:09:39,054 --> 00:09:41,715
the grid control and define where we want

214
00:09:42,836 --> 00:09:45,637
to put ourselves, to put our controls.

215
00:09:45,638 --> 00:09:47,178
Also, notice that whenever we're

216
00:09:47,179 --> 00:09:49,260
referencing rows and columns that it's 0-based,

217
00:09:49,261 --> 00:09:51,120
so by setting the row equals zero,

218
00:09:51,121 --> 00:09:52,600
we're saying first row,

219
00:09:52,601 --> 00:09:54,561
one would be the second row and so on,

220
00:09:54,562 --> 00:09:55,922
same thing with columns.

221
00:09:57,373 --> 00:10:00,725
There's always one default implicit cell,

222
00:10:00,726 --> 00:10:04,086
there's always on every grid a row zero column zero

223
00:10:04,087 --> 00:10:06,947
even if we don't define it explicitly, okay?

224
00:10:06,948 --> 00:10:10,008
And so if we don't specify that

225
00:10:10,009 --> 00:10:11,998
whenever we're working with

226
00:10:11,999 --> 00:10:16,765
a given object that we're trying to place inside of a cell,

227
00:10:16,766 --> 00:10:18,675
that it will be in the default cell,

228
00:10:18,676 --> 00:10:20,586
or the default row, or the default column.

229
00:10:20,587 --> 00:10:22,507
So in this case we're saying

230
00:10:22,508 --> 00:10:26,967
set the row equal to zero, first row.

231
00:10:26,968 --> 00:10:28,469
We could have left that off completely

232
00:10:28,470 --> 00:10:30,560
and it would have been the same thing.

233
00:10:30,561 --> 00:10:33,811
Also by not defining the Grid.Column,

234
00:10:33,812 --> 00:10:36,332
we're essentially saying Grid.Column="0"

235
00:10:36,333 --> 00:10:39,433
because we're saying put it in the,

236
00:10:39,434 --> 00:10:40,551
the default cell.

237
00:10:42,182 --> 00:10:45,542
That's all we said about the Grid.

238
00:10:45,543 --> 00:10:47,322
We moved down and talked about the StackPanel,

239
00:10:47,323 --> 00:10:50,124
here's a simple definition of a StackPanel.

240
00:10:50,125 --> 00:10:54,344
We can also set various properties of the StackPanel,

241
00:10:54,345 --> 00:10:57,004
and we talked about the

242
00:10:57,005 --> 00:11:00,584
vertical orientation is the default,

243
00:11:00,585 --> 00:11:03,264
so from top to bottom

244
00:11:03,265 --> 00:11:05,754
the first text block will be at the top.

245
00:11:07,285 --> 00:11:10,546
Below it, vertically, will be the next text block.

246
00:11:10,547 --> 00:11:14,286
We can change that to a left to right flow

247
00:11:14,287 --> 00:11:17,679
if we were to set the orientation to horizontal.

248
00:11:17,680 --> 00:11:20,549
That should be ... "Alignment" should be

249
00:11:22,570 --> 00:11:24,552
"Orientation", okay.

250
00:11:24,553 --> 00:11:27,558
Most layouts will combine multiple layout controls

251
00:11:27,559 --> 00:11:28,919
in order to get the desired effect,

252
00:11:28,920 --> 00:11:31,220
and you'll see that as we build real examples throughout

253
00:11:31,221 --> 00:11:32,781
the remainder of the series.

254
00:11:32,782 --> 00:11:33,932
And then we also said

255
00:11:33,933 --> 00:11:36,924
the fundamental difference between a Grid and StackPanel

256
00:11:36,925 --> 00:11:40,624
is that Grids will allow you to overlap controls,

257
00:11:40,625 --> 00:11:43,564
so if you put three controls in the same cell,

258
00:11:43,565 --> 00:11:45,995
and you set the top and the,

259
00:11:48,536 --> 00:11:49,897
the vertical alignment to top

260
00:11:49,898 --> 00:11:51,138
and the horizontal alignment to left,

261
00:11:51,139 --> 00:11:53,259
they will essentially stack on top of each other.

262
00:11:53,260 --> 00:11:56,060
And you may not be able to see items below

263
00:11:56,061 --> 00:11:59,103
or underneath other elements in the same cell.

264
00:11:59,104 --> 00:12:01,383
However, StackPanel will always stack things

265
00:12:01,384 --> 00:12:04,384
on top of each other, or horizontally left to right.

266
00:12:04,385 --> 00:12:07,665
Okay? So that's all I have for this review,

267
00:12:07,666 --> 00:12:09,877
let's pick it up with a little exercise

268
00:12:09,878 --> 00:12:13,257
that will hopefully get you working

269
00:12:13,258 --> 00:12:15,657
and get these concepts under your belt.

270
00:12:15,658 --> 00:12:17,638
We'll see you in the next lesson, thank you.  

