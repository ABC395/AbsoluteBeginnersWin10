[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: uwp25XamlControlsPart2_high.mp4
Video File: uwp25XamlControlsPart2_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.360000
Scroll Position: 181
Active Line: 183
Video Position: 35034

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Windows,Microsoft YaHei UI,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.50,Windows,,0,0,0,,基本XAML控件（第二部分）\N听译@4770K{\fad(100,100)}
Dialogue: 0,0:00:05.58,0:00:09.55,Windows,,0,0,0,,Hi~   我是爆伯   来自www.learnvisualstudio.net{\fad(100,100)}
Dialogue: 0,0:00:09.55,0:00:13.86,Windows,,0,0,0,,这节课我们将继续学习这个系列（基本XAML控件）{\fad(100,100)}
Dialogue: 0,0:00:13.86,0:00:18.70,Windows,,0,0,0,,正如之前学习方式那样{\fad(100,100)}
Dialogue: 0,0:00:18.70,0:00:22.00,Windows,,0,0,0,,依旧是复制一些XAML代码，讲一些控件{\fad(100,100)}
Dialogue: 0,0:00:22.00,0:00:25.48,Windows,,0,0,0,,访问控件的方法以及其他内容{\fad(100,100)}
Dialogue: 0,0:00:25.48,0:00:28.74,Windows,,0,0,0,,那么就开始吧！{\fad(100,100)}
Dialogue: 0,0:00:28.74,0:00:31.83,Windows,,0,0,0,,我创建了一个新工程叫 ControlsExample2{\fad(100,100)}
Dialogue: 0,0:00:31.83,0:00:38.00,Windows,,0,0,0,, 把自带的 Grid 替换成粘贴板的内容{\fad(100,100)}
Dialogue: 0,0:00:38.00,0:00:42.55,Windows,,0,0,0,,这里定义了数个 行定义（10个）以及两个 列定义{\fad(100,100)}
Dialogue: 0,0:00:42.55,0:00:55.43,Windows,,0,0,0,,现在腾出点空间，开始讲一个可以让用户自己选择时间和日期的控件{\fad(100,100)}
Dialogue: 0,0:00:55.43,0:00:59.60,Windows,,0,0,0,,所以第一个我想让你留心的控件叫做 时间选择器（TimePicker）{\fad(100,100)}
Dialogue: 0,0:00:59.60,0:01:06.68,Windows,,0,0,0,,它可以让用户选择一个时间（小时、分钟）给应用{\fad(100,100)}
Dialogue: 0,0:01:06.68,0:01:09.65,Windows,,0,0,0,,比如说，用户想设置在 9:30 pm 发出提醒{\fad(100,100)}
Dialogue: 0,0:01:09.65,0:01:14.19,Windows,,0,0,0,,用这个控件可以非常方便的使用触摸或者鼠标点击即可完成时间的选择{\fad(100,100)}
Dialogue: 0,0:01:14.19,0:01:19.32,Windows,,0,0,0,,那么最有趣的属性应该就是 时钟标识（ClockIdentifier）了{\fad(100,100)}
Dialogue: 0,0:01:19.32,0:01:22.43,Windows,,0,0,0,,这里有两个可选属性{\fad(100,100)}
Dialogue: 0,0:01:22.43,0:01:26.06,Windows,,0,0,0,,第一个：12小时制 可以让用户选择上午还是下午{\fad(100,100)}
Dialogue: 0,0:01:26.06,0:01:30.77,Windows,,0,0,0,,第二个：24小时制 在美国被广泛适用于军用时间\N（美国人儿普遍习惯用12小时制，如果经常看美剧可能对8/7c类似字眼中看出端倪）{\fad(100,100)}
Dialogue: 0,0:01:30.77,0:01:35.44,Windows,,0,0,0,,我这里选择 12小时制 然后测试一下程序{\fad(100,100)}
Dialogue: 0,0:01:37.81,0:01:41.81,Windows,,0,0,0,,可以看到方框内被选中的是 4:07 PM{\fad(100,100)}
Dialogue: 0,0:01:41.81,0:01:47.19,Windows,,0,0,0,,当我点击控件本身的时候会弹出一个列表{\fad(100,100)}
Dialogue: 0,0:01:47.19,0:01:51.52,Windows,,0,0,0,,在手机或者电脑上的版本看上去都很好{\fad(100,100)}
Dialogue: 0,0:01:51.52,0:01:55.56,Windows,,0,0,0,,这里可以自由选择时间和上午下午{\fad(100,100)}
Dialogue: 0,0:01:55.56,0:02:00.76,Windows,,0,0,0,,选择 ✔ 确认 ✖ 取消{\fad(100,100)}
Dialogue: 0,0:02:00.76,0:02:06.61,Windows,,0,0,0,,可以看到我所选的时间显示在控件中，效果拔群(￣▽￣)"{\fad(100,100)}
Dialogue: 0,0:02:06.61,0:02:11.11,Windows,,0,0,0,,下面要讲的主要关于日期{\fad(100,100)}
Dialogue: 0,0:02:11.11,0:02:17.35,Windows,,0,0,0,,其实是两个控件，第一个叫 日历选择器（CalendarDatePicker）{\fad(100,100)}
Dialogue: 0,0:02:17.35,0:02:21.72,Windows,,0,0,0,,看到 Picker 这个词你应该能想象出来会有一个列表弹出，也就是说{\fad(100,100)}
Dialogue: 0,0:02:21.72,0:02:26.53,Windows,,0,0,0,,也就是说，一开始不会看到完整的列表{\fad(100,100)}
Dialogue: 0,0:02:26.53,0:02:30.73,Windows,,0,0,0,,你只能看到一小部分的内容，然后点击才会把列表展开{\fad(100,100)}
Dialogue: 0,0:02:30.74,0:02:33.43,Windows,,0,0,0,,如果你需要的是这种样式，就选择 CalendarDatePicker 吧！{\fad(100,100)}
Dialogue: 0,0:02:33.43,0:02:39.84,Windows,,0,0,0,,那么我们测试一下程序，待会再讲解相关属性{\fad(100,100)}
Dialogue: 0,0:02:39.84,0:02:46.04,Windows,,0,0,0,,你可以看到显示的是 “select a date”（中文版显示“选择日期”） 以及右边还有一个日历的图标{\fad(100,100)}
Dialogue: 0,0:02:46.04,0:02:53.22,Windows,,0,0,0,,点击图标你可以看到今天的日期已经被默认选中{\fad(100,100)}
Dialogue: 0,0:02:53.22,0:02:58.26,Windows,,0,0,0,,我可以按月份来翻页 可以按我所需选择日期{\fad(100,100)}
Dialogue: 0,0:02:58.26,0:03:03.70,Windows,,0,0,0,,然后会在 CalendarDatePicker 的可视区域内显示所选日期{\fad(100,100)}
Dialogue: 0,0:03:03.70,0:03:10.57,Windows,,0,0,0,,来看一下这个（啊正好被挡住了，我去关掉。。。{\fad(100,100)}
Dialogue: 0,0:03:10.57,0:03:18.20,Windows,,0,0,0,,看右边的属性栏，有很多有趣的内容{\fad(100,100)}
Dialogue: 0,0:03:18.20,0:03:23.92,Windows,,0,0,0,,例如可以选择日历的样式，在美国默认被设置为GregorianCalendar（公历年）\N（其实中国也是）{\fad(100,100)}
Dialogue: 0,0:03:23.92,0:03:33.56,Windows,,0,0,0,,里面有很多种是亚洲国家的日历样式，还有 希伯来历（HebrewCalendar）以及其他的\N{\fs40}（校对君：希伯来历几乎是不用阿拉伯数字来表示的，另外其他的日历,大部分都是纪年法不同\N(￣▽￣)"    等等。。。。居然没有阴历！差评++）{\fad(100,100)}
Dialogue: 0,0:03:33.56,0:03:39.66,Windows,,0,0,0,,今日高亮？！很有趣哟~ 默认选中，这个依程序需要设定吧{\fad(100,100)}
Dialogue: 0,0:03:39.66,0:03:45.97,Windows,,0,0,0,,改变占位子符文字（PlaceholderText）为 choose a date 待会运行可以看到效果{\fad(100,100)}
Dialogue: 0,0:03:45.97,0:03:54.01,Windows,,0,0,0,,还有其他的一些有趣的属性，但我觉这些中的大部分就。。。\N（没明说，从说话语气感觉不是常用的）{\fad(100,100)}
Dialogue: 0,0:03:54.01,0:04:02.50,Windows,,0,0,0,, 日期选择器（CalendarDatePicker） 就讲到这，另一个日期控件叫 日期查看（CalendarView）{\fad(100,100)}
Dialogue: 0,0:04:02.50,0:04:09.76,Windows,,0,0,0,,当你看到 View 这个词 应该就知道了在XAML里是显示所有的时间的{\fad(100,100)}
Dialogue: 0,0:04:09.76,0:04:19.20,Windows,,0,0,0,,在本例中，我们有一个CalendarView控件，还有一个SelectedDatesChanged的事件处理（EventHandler）\N我们先继续，创建EventHandler{\fad(100,100)}
Dialogue: 0,0:04:19.20,0:04:26.91,Windows,,0,0,0,,创建是通过鼠标光标放到事件的那个单词，按下F12就可以打开定义位置，然后应该好了\N我们先回来，稍后再添加代码{\fad(100,100)}
Dialogue: 0,0:04:26.91,0:04:33.49,Windows,,0,0,0,,在这个日历中里你可以看到我们是选择多个，而不是仅仅一个\N让我们瞅瞅还有哪些其他的模式{\fad(100,100)}
Dialogue: 0,0:04:33.49,0:04:42.23,Windows,,0,0,0,,三种模式为：不选择日期（None）、选择单个日期（Single） 和 选择多个日期（Multiple）\N这里选择 Multiple 多选模式,，我们跑下程序看看{\fad(100,100)}
Dialogue: 0,0:04:44.80,0:04:50.87,Windows,,0,0,0,,所以今天的日期被默认高亮，我可以一个一个选择{\fad(100,100)}
Dialogue: 0,0:04:50.87,0:04:54.87,Windows,,0,0,0,,每次选择日期都会被高亮显示{\fad(100,100)}
Dialogue: 0,0:04:54.87,0:05:00.91,Windows,,0,0,0,,同时注意下这个控件占据了这个程序的诺大的空间\N（和CalendarDatePicker比较下）{\fad(100,100)}
Dialogue: 0,0:05:03.00,0:05:07.49,Windows,,0,0,0,,来处理一下 SelectedDatesChanged 事件{\fad(100,100)}
Dialogue: 0,0:05:07.49,0:05:13.16,Windows,,0,0,0,,这里我加了一个 文本框 叫 CalendarViewResultTextBlock{\fad(100,100)}
Dialogue: 0,0:05:13.16,0:05:19.06,Windows,,0,0,0,,我想要加入的是可以把所有所选日期显示出来{\fad(100,100)}
Dialogue: 0,0:05:19.06,0:05:25.64,Windows,,0,0,0,,为了获取那些被选的日期，就要进入 .cs 文件内的 SelectedDatesChange 事件{\fad(100,100)}
Dialogue: 0,0:05:25.64,0:05:29.71,Windows,,0,0,0,,我会复制一些代码然后解释一下内容{\fad(100,100)}
Dialogue: 0,0:05:31.78,0:05:38.25,Windows,,0,0,0,,乍一看也许你可能会觉得：净TM扯淡 (ノ=Д=)ノ┻━┻   但是我会好好解释一下{\fad(100,100)}
Dialogue: 0,0:05:38.25,0:05:40.02,Windows,,0,0,0,,把这个窗口打到冷宫{\fad(100,100)}
Dialogue: 0,0:05:40.02,0:05:46.49,Windows,,0,0,0,,我想获取SelectedDates列表，sender是 CalendarView类型的{\fad(100,100)}
Dialogue: 0,0:05:46.49,0:05:51.90,Windows,,0,0,0,,所以我们想要那个Calendar 控件返回所有的被选中的日期{\fad(100,100)}
Dialogue: 0,0:05:51.90,0:06:02.64,Windows,,0,0,0,,接着我们要 Select 标签，以确保所选的日期映射为“月/日”格式输出{\fad(100,100)}
Dialogue: 0,0:06:02.64,0:06:06.91,Windows,,0,0,0,,所以这里的Select语句是一个映射语句和字符串链接构成的{\fad(100,100)}
Dialogue: 0,0:06:06.91,0:06:18.22,Windows,,0,0,0,,当我们从日历里选择日期后， SelectedDates 就把数据按 月/日 排列成一个字符串{\fad(100,100)}
Dialogue: 0,0:06:18.22,0:06:27.17,Windows,,0,0,0,,再然后把这些字符串放进一个数组里，所以我在最后调用了ToArray()\N那么现在就有了一个叫 selectedDates 的字符串数组{\fad(100,100)}
Dialogue: 0,0:06:27.17,0:06:33.84,Windows,,0,0,0,,之所以放进数组里，是因为这样可以使用 string.Join 使得输出两组数据之间可以加入一个 逗号{\fad(100,100)}
Dialogue: 0,0:06:33.84,0:06:42.01,Windows,,0,0,0,,效果待会就能看到了，这时候就可以直接输出到文本框里了{\fad(100,100)}
Dialogue: 0,0:06:42.01,0:06:43.21,Windows,,0,0,0,,来看看效果如何{\fad(100,100)}
Dialogue: 0,0:06:45.18,0:06:48.19,Windows,,0,0,0,,我来选几个日期{\fad(100,100)}
Dialogue: 0,0:06:48.19,0:06:58.40,Windows,,0,0,0,,当我选择多个之后可以注意到是按照 月/日排列，并且在两组之间用逗号隔开{\fad(100,100)}
Dialogue: 0,0:06:58.40,0:07:03.23,Windows,,0,0,0,,希望这几行代码可以帮助你理解使用 日期的多项选择{\fad(100,100)}
Dialogue: 0,0:07:03.23,0:07:08.61,Windows,,0,0,0,,那么日期和时间的控件就讲到这，谈下一话题{\fad(100,100)}
Dialogue: 0,0:07:08.61,0:07:14.41,Windows,,0,0,0,,弹出控件 （Flyout Control），有两种弹出按钮{\fad(100,100)}
Dialogue: 0,0:07:14.41,0:07:19.62,Windows,,0,0,0,,第一种只能弹出一个简单的消息盒子{\fad(100,100)}
Dialogue: 0,0:07:19.62,0:07:37.07,Windows,,0,0,0,,你想想。。。啊先让我把弹出按钮的点击事件InnerFlyoutButton_Click写一下\N（怎么切换建立的过程就不翻译了，前面讲了）{\fad(100,100)}
Dialogue: 0,0:07:37.07,0:07:44.00,Windows,,0,0,0,,你会发现很多按钮已经自带了 Flyout（弹出） 属性{\fad(100,100)}
Dialogue: 0,0:07:44.00,0:07:50.52,Windows,,0,0,0,,事实上要放入的也是一个Flyout或一个Flyout Menu(弹出菜单)，待会你可以看到演示{\fad(100,100)}
Dialogue: 0,0:07:50.52,0:07:55.00,Windows,,0,0,0,,在 Flyout 内可以添加任何控件{\fad(100,100)}
Dialogue: 0,0:07:55.00,0:08:04.90,Windows,,0,0,0,,这次我加入了StackPanel，其中包含文本框和按钮\N 以及一句话，用来显示在我即将创建的小对话框里{\fad(100,100)}
Dialogue: 0,0:08:04.90,0:08:09.90,Windows,,0,0,0,,我的目的就是让某人按下那个"OK"按钮后会隐藏有那句话的弹出框{\fad(100,100)}
Dialogue: 0,0:08:09.90,0:08:15.24,Windows,,0,0,0,,然后把鼠标放在对应时事件名上按下F12{\fad(100,100)}
Dialogue: 0,0:08:15.24,0:08:19.20,Windows,,0,0,0,,加几行代码，用来隐藏 弹出框{\fad(100,100)}
Dialogue: 0,0:08:19.20,0:08:23.18,Windows,,0,0,0,,这样就可以点击 "OK"按钮 然后就可以隐藏 弹出框{\fad(100,100)}
Dialogue: 0,0:08:23.18,0:08:28.82,Windows,,0,0,0,,也许你会很疑惑：这都是什么鬼？ 唔。。。看一下样例就懂了{\fad(100,100)}
Dialogue: 0,0:08:28.82,0:08:34.29,Windows,,0,0,0,,这是我制作的 弹出按钮，其实它可以使其他的控件，但这里就用了"Flyout"按钮{\fad(100,100)}
Dialogue: 0,0:08:34.29,0:08:43.13,Windows,,0,0,0,,当我点下去就能看到我写的一小句话弹了出来\N爆伯 I Love You too~{\fad(100,100)}
Dialogue: 0,0:08:43.13,0:08:45.00,Windows,,0,0,0,,再点击 "OK"按钮 弹出框就隐藏了{\fad(100,100)}
Dialogue: 0,0:08:45.00,0:08:50.04,Windows,,0,0,0,,好了这是一种弹出框，现在来讲一讲 弹出菜单（Flyout Menu）{\fad(100,100)}
Dialogue: 0,0:08:50.04,0:09:03.72,Windows,,0,0,0,,也许你在 Windows 10里或者 Windows 10 Mobile上见过{\fad(100,100)}
Dialogue: 0,0:09:03.72,0:09:11.56,Windows,,0,0,0,,当你给一个给定控件加入上下文菜单（Contextual Menu），你会发现它非常的实用{\fad(100,100)}
Dialogue: 0,0:09:11.56,0:09:22.77,Windows,,0,0,0,,本例中，我只用一个 Button，但是你可以领会很多不同的控件\N都有一个Flyout属性，这是一种复杂属性，可以加入MenuFlyout\N{\fad(100,100)}
Dialogue: 0,0:09:22.77,0:09:31.72,Windows,,0,0,0,,也可以设置放置的位置，本例中是放到底部，但还可以设置为 上 左 右 甚至是 全屏{\fad(100,100)}
Dialogue: 0,0:09:31.72,0:09:39.99,Windows,,0,0,0,,这里我选择 底部 如果可以的话 点击之后弹出应该会在按钮下方显示{\fad(100,100)}
Dialogue: 0,0:09:39.99,0:09:44.80,Windows,,0,0,0,,随后我们来创建一系列的Flyout或MenuFlyoutItems弹出元素{\fad(100,100)}
Dialogue: 0,0:09:44.80,0:09:49.20,Windows,,0,0,0,,每一个元素都有一个 点击事件 {\fad(100,100)}
Dialogue: 0,0:09:49.20,0:09:52.60,Windows,,0,0,0,,但我稍后再来做这个事件{\fad(100,100)}
Dialogue: 0,0:09:52.60,0:10:00.98,Windows,,0,0,0,,这个是 弹出菜单分离器（MenuFlyoutSeparators） 可以将上下文菜单分成多个部分\fad(100,100)}
Dialogue: 0,0:10:00.98,0:10:10.15,Windows,,0,0,0,,这里创建了 MenuFlyoutSubItem（弹出菜单子元素）这样可以创建个有层次的菜单\N{\fs40}（校对君：爆伯的MenuFlyoutSubItem直接放下一级的菜单元素的话，运行是没有问题的，但是无法预览！！！\N建议使用MenuFlyoutSubItem的Items属性，把下一级的菜单元素写到这个属性里，目测VS bug）{\fad(100,100)}
Dialogue: 0,0:10:10.15,0:10:15.19,Windows,,0,0,0,,所以在 Item 3 里点击就能出现 Item 4 和 Item 5 {\fad(100,100)}
Dialogue: 0,0:10:15.19,0:10:21.80,Windows,,0,0,0,,而 Item 5 又包含另外的子元素 Item 6 和 Item 7{\fad(100,100)}
Dialogue: 0,0:10:21.80,0:10:27.94,Windows,,0,0,0,,这里还有一个ToggleMenuFlyoutItem（切换弹出菜单元素） 的 Item 8{\fad(100,100)}
Dialogue: 0,0:10:27.94,0:10:37.35,Windows,,0,0,0,,这个非常有用，可以用来显示是否被选择，被选在左侧会显示出一个✔{\fad(100,100)}
Dialogue: 0,0:10:37.35,0:10:40.52,Windows,,0,0,0,,那就开始测试一下程序{\fad(100,100)}
Dialogue: 0,0:10:42.82,0:10:47.39,Windows,,0,0,0,,不幸的是不能直接看到弹出按钮{\fad(100,100)}
Dialogue: 0,0:10:47.39,0:10:54.80,Windows,,0,0,0,,虽然我是设置成了弹出到下方，但是由于没有足够的空间显示就从上方弹出了{\fad(100,100)}
Dialogue: 0,0:10:54.80,0:11:00.57,Windows,,0,0,0,,可以看到有两个 元素被分开了，Item 3 还包含子级菜单{\fad(100,100)}
Dialogue: 0,0:11:00.57,0:11:04.28,Windows,,0,0,0,,在 Item 5 还有更进一步的子级菜单{\fad(100,100)}
Dialogue: 0,0:11:04.28,0:11:10.78,Windows,,0,0,0,,Item 8 被我选中后再次点进弹出菜单可以看到有一个✔标记在旁边{\fad(100,100)}
Dialogue: 0,0:11:10.78,0:11:13.32,Windows,,0,0,0,,再次选中 然后 去掉{\fad(100,100)}
Dialogue: 0,0:11:13.32,0:11:16.99,Windows,,0,0,0,,这个控件对前后文菜单很有用{\fad(100,100)}
Dialogue: 0,0:11:16.99,0:11:26.43,Windows,,0,0,0,,再强调下虽然在这个例子里我用Button做的 但实际上有很多支持 Flyout属性的控件{\fad(100,100)}
Dialogue: 0,0:11:26.43,0:11:36.21,Windows,,0,0,0,,都可以像这样加入上下文菜单或者一个弹出框，作为你对控件点击或者某种方式互动的响应的结果{\fad(100,100)}
Dialogue: 0,0:11:36.61,0:11:41.51,Windows,,0,0,0,,下一个控件是 建议列表（AutoSuggestBox）{\fad(100,100)}
Dialogue: 0,0:11:41.51,0:11:47.75,Windows,,0,0,0,,如果在含有搜索特性的应用中，这个控件将非常有用{\fad(100,100)}
Dialogue: 0,0:11:47.75,0:11:50.76,Windows,,0,0,0,,就像上次你看到的在 汉堡风格导航栏(作业) 上的运用{\fad(100,100)}
Dialogue: 0,0:11:50.76,0:12:00.36,Windows,,0,0,0,,又是这里，编译应用程序，把鼠标光标移到TextChanged的EventHandler{\fad(100,100)}
Dialogue: 0,0:12:00.36,0:12:06.37,Windows,,0,0,0,,按下 F12 创建对应事件，然后返回 MainPage.xaml{\fad(100,100)}
Dialogue: 0,0:12:06.37,0:12:12.48,Windows,,0,0,0,,可以看到有一些很有趣的属性{\fad(100,100)}
Dialogue: 0,0:12:12.48,0:12:17.32,Windows,,0,0,0,,PlaceHolderText(占位字符) 我可以设置为显示 Search 或者 Find Something{\fad(100,100)}
Dialogue: 0,0:12:17.32,0:12:23.15,Windows,,0,0,0,,或者别的类似的东西  这样就会显得与众不同{\fad(100,100)}
Dialogue: 0,0:12:23.15,0:12:25.86,Windows,,0,0,0,,也可以设置 查询图标（QueryIcon）{\fad(100,100)}
Dialogue: 0,0:12:25.86,0:12:37.14,Windows,,0,0,0,,这里有非常多的图标可以供选择，这里还是回去用 Find 图标吧{\fad(100,100)}
Dialogue: 0,0:12:37.14,0:12:39.80,Windows,,0,0,0,,来测试一下{\fad(100,100)}
Dialogue: 0,0:12:39.80,0:12:45.94,Windows,,0,0,0,,说实在的，我们目前做的只是我们要实现的一部分（又要调整窗口。。。{\fad(100,100)}
Dialogue: 0,0:12:46.68,0:12:50.52,Windows,,0,0,0,,我输入一些东西然后什么都没有发生。。。。{\fad(100,100)}
Dialogue: 0,0:12:50.52,0:12:57.39,Windows,,0,0,0,,你会想太无聊了(￣、￣)，下面来讲如此无聊的原因{\fad(100,100)}
Dialogue: 0,0:12:57.39,0:13:01.36,Windows,,0,0,0,,因为没有去筛选结果{\fad(100,100)}
Dialogue: 0,0:13:01.36,0:13:03.36,Windows,,0,0,0,,所以来处理一下后台代码{\fad(100,100)}
Dialogue: 0,0:13:03.36,0:13:12.27,Windows,,0,0,0,,我要复制一个新的字符串数组 叫做 SelectionItems{\fad(100,100)}
Dialogue: 0,0:13:12.27,0:13:23.31,Windows,,0,0,0,,这里只是一串名字 开头字母不同 有些是F Fr Fr  有些是T Ta To （碎碎念。。{\fad(100,100)}
Dialogue: 0,0:13:23.31,0:13:31.12,Windows,,0,0,0,,接下俩我们看看AutoSuggestBox是怎样随着我们输入文本变化而缩小选择的范围\N{\fad(100,100)}
Dialogue: 0,0:13:31.12,0:13:38.26,Windows,,0,0,0,,当然这样还不能使它有自动判断的功能，我来复制一些代码进来{\fad(100,100)}
Dialogue: 0,0:13:38.26,0:13:45.80,Windows,,0,0,0,,sender 是 AutoSuggestBox 放在了第 48 行{\fad(100,100)}
Dialogue: 0,0:13:45.80,0:13:52.01,Windows,,0,0,0,,在第 49 行是对那个字符串数组用一个Where子句{\fad(100,100)}
Dialogue: 0,0:13:52.01,0:13:54.68,Windows,,0,0,0,,就是之前键入的 名为selectionItems的字符串数组 {\fad(100,100)}
Dialogue: 0,0:13:54.68,0:14:03.86,Windows,,0,0,0,,通过键入AutoSuggestBox的内容与字符数组内各个元素的前几个字母匹配来筛选{\fad(100,100)}
Dialogue: 0,0:14:03.86,0:14:12.33,Windows,,0,0,0,,然后调用ToArray，然后用这个筛选过的数组传递进 ItemSource 中{\fad(100,100)}
Dialogue: 0,0:14:12.33,0:14:20.54,Windows,,0,0,0,,这样 就可以看到一个弹出菜单 其中的内容都符合条件被筛选出来的\N程序跑起来~~~{\fad(100,100)}
Dialogue: 0,0:14:23.34,0:14:29.75,Windows,,0,0,0,,这次我输入一个 F ，当我这么做的时候，就看到它立刻给我了一堆选项{\fad(100,100)}
Dialogue: 0,0:14:29.75,0:14:34.05,Windows,,0,0,0,,可以用键盘中的下箭头在下方选择{\fad(100,100)}
Dialogue: 0,0:14:34.05,0:14:38.09,Windows,,0,0,0,,当我选择一个，其他的就都被删除掉了{\fad(100,100)}
Dialogue: 0,0:14:38.09,0:14:40.96,Windows,,0,0,0,,我来试试 T {\fad(100,100)}
Dialogue: 0,0:14:40.96,0:14:51.60,Windows,,0,0,0,,Ta...Tan...Tany...然后用下箭头选中我需要的内容{\fad(100,100)}
Dialogue: 0,0:14:51.60,0:14:59.04,Windows,,0,0,0,,所以AutoSuggestBox非常实用，尤其是在在有搜索功能的应用里{\fad(100,100)}
Dialogue: 0,0:15:01.01,0:15:05.25,Windows,,0,0,0,,下一个要讲的是 滑块控件（Slider Control）{\fad(100,100)}
Dialogue: 0,0:15:05.25,0:15:10.69,Windows,,0,0,0,,Slider 你应该在 Windows 10 中经常见到{\fad(100,100)}
Dialogue: 0,0:15:10.69,0:15:13.89,Windows,,0,0,0,,它可以让用户做出选择（数值上的）{\fad(100,100)}
Dialogue: 0,0:15:13.89,0:15:19.63,Windows,,0,0,0,,这里我设置最大值为 100 最小值为 0 {\fad(100,100)}
Dialogue: 0,0:15:19.63,0:15:24.90,Windows,,0,0,0,,测试一下，你能看到一个小的滑块在那里{\fad(100,100)}
Dialogue: 0,0:15:24.90,0:15:27.41,Windows,,0,0,0,,在滑块上面还有数字显示{\fad(100,100)}
Dialogue: 0,0:15:27.41,0:15:38.65,Windows,,0,0,0,,其实我们可以控制滑块的增量和控制这个顶部的数值标签的显示\N 你会发现这个控件在 Windows 10 非常常见，所以我们把它也放到我们程序中{\fad(100,100)}      
Dialogue: 0,0:15:38.65,0:15:42.32,Windows,,0,0,0,,下一个呢... ...{\fad(100,100)}
Dialogue: 0,0:15:42.32,0:15:48.26,Windows,,0,0,0,,是... 让我把代码复制一下{\fad(100,100)}
Dialogue: 0,0:15:52.00,0:15:53.86,Windows,,0,0,0,,嗯... 进度条（ProgressBar） {\fad(100,100)}
Dialogue: 0,0:15:53.86,0:15:58.54,Windows,,0,0,0,,进度条可以在程序进行时间较长的运行时给用户一个反馈（让用户知道并没有卡死）{\fad(100,100)}
Dialogue: 0,0:15:58.54,0:16:09.11,Windows,,0,0,0,,在这个实例中我可以设置一个Value为 57，但是Maximum为100\N而这个值也就固定在57了（也就是说，这个进度条目前不会跑）{\fad(100,100)}
Dialogue: 0,0:16:09.11,0:16:12.35,Windows,,0,0,0,,试一下效果{\fad(100,100)}
Dialogue: 0,0:16:14.92,0:16:24.90,Windows,,0,0,0,,可以看到显示是已经跑到了 57%   这样设置一个静态值的语句其实很无聊\N(￣、￣)用你说{\fad(100,100)}
Dialogue: 0,0:16:24.90,0:16:32.27,Windows,,0,0,0,,理想情况下，你可能想在运行时通过后台的操代码去设置它。{\fad(100,100)}
Dialogue: 0,0:16:32.27,0:16:37.98,Windows,,0,0,0,,下面我来展示一些实用的功能，先让我用一下粘贴大法，稍后再解释一下原理{\fad(100,100)}
Dialogue: 0,0:16:37.98,0:16:44.68,Windows,,0,0,0,,我把 “Value=57” 删掉，替换为这行奇怪的语句{\fad(100,100)}
Dialogue: 0,0:16:44.68,0:16:48.09,Windows,,0,0,0,,运行一下程序然后解释这有什么用处{\fad(100,100)}
Dialogue: 0,0:16:48.09,0:16:57.66,Windows,,0,0,0,,其实我做的是一个{\b1}纽带{\b0}，把进度条数值和滑块数值连接在一起{\fad(100,100)}
Dialogue: 0,0:16:57.66,0:17:05.90,Windows,,0,0,0,,所以你可以看到我在移动 滑块 的时候 进度条 也在同样的移动{\fad(100,100)}
Dialogue: 0,0:17:05.90,0:17:09.04,Windows,,0,0,0,,所以我把这两个值绑定在了一起，即数据绑定（Data binding）{\fad(100,100)}
Dialogue: 0,0:17:09.04,0:17:16.38,Windows,,0,0,0,,这是绑定语句在 Windows 10 的 UWP 环境之中有一个新版语法{\fad(100,100)}
Dialogue: 0,0:17:16.38,0:17:20.05,Windows,,0,0,0,,这个内容会在后续课程细讲\N(￣▽￣)"急需学习可参考：《深入浅出UWP》的第7集（老版语法）和第8集（新版语法）{\fad(100,100)}
Dialogue: 0,0:17:20.05,0:17:45.78,Windows,,0,0,0,,（意译下）这里数据的绑定是单向的（Mode为Oneway）：这里进度条的值绑定了滑块的值\N所以 滑块始终能对自己的属性（Value）做修改，而进度条只是有权读取 但无权修改{\fad(100,100)}
Dialogue: 0,0:17:45.78,0:17:53.38,Windows,,0,0,0,,当然还有别的模式，这会在后续的课程里谈到，这只是在XAML中的一种数据绑定方式{\fad(100,100)}
Dialogue: 0,0:17:53.38,0:17:59.62,Windows,,0,0,0,,这是一个非常强大的功能{\fad(100,100)}
Dialogue: 0,0:17:59.62,0:18:04.13,Windows,,0,0,0,,那么最后讲一讲强迫症患者最讨厌的—— 进度圈（ProgressRing）{\fad(100,100)}
Dialogue: 0,0:18:04.13,0:18:12.97,Windows,,0,0,0,,这是另一类展示进度的控件，虽然它不会给用户具体的进度{\fad(100,100)}
Dialogue: 0,0:18:12.97,0:18:20.71,Windows,,0,0,0,,只是单单显示有东西正在运行{\fad(100,100)}
Dialogue: 0,0:18:20.71,0:18:25.71,Windows,,0,0,0,,他就是一个圆环 转啊转啊转.....{\fad(100,100)}
Dialogue: 0,0:18:25.71,0:18:32.49,Windows,,0,0,0,,直到让它停止，所以有方法可以设置让它开始转和结束{\fad(100,100)}
Dialogue: 0,0:18:32.49,0:18:36.46,Windows,,0,0,0,,就是这行的 IsActive 的值（true/false）{\fad(100,100)}
Dialogue: 0,0:18:39.43,0:18:44.43,Windows,,0,0,0,,好了，希望你能明白 这些控件在制作应用的时候是非常实用的{\fad(100,100)}
Dialogue: 0,0:18:44.43,0:18:55.55,Windows,,0,0,0,,当你需要日期、上下文菜单和弹出框，来通知用户或者要求输入{\fad(100,100)}
Dialogue: 0,0:18:55.55,0:19:04.22,Windows,,0,0,0,,还有 自动建议列表 这个在汉堡式风格的导航栏里非常有用的功能{\fad(100,100)}
Dialogue: 0,0:19:04.22,0:19:12.73,Windows,,0,0,0,,以及 滑块 会在Win10中很常见，尤其是在设置界面{\fad(100,100)}
Dialogue: 0,0:19:12.73,0:19:16.50,Windows,,0,0,0,,最后就是 进度条 和 进度圈 {\fad(100,100)}
Dialogue: 0,0:19:16.50,0:19:26.51,Windows,,0,0,0,,OK！我们已经学了一些控件了，这样可以制作更多功能强大的应用了\N(￣▽￣)"噫！能制作个支付宝不？{\fad(100,100)}
Dialogue: 0,0:19:26.51,0:19:31.95,Windows,,0,0,0,,让我们继续学习，那下一节课再见 ^_^\N（大家可以下载XAML UI Controls这款UWP来深化控件知识，商店搜不到，需要请百度）{\fad(100,100)}
Dialogue: 0,0:19:31.95,0:20:32.95,Windows,,0,0,0,,微软大法好~{\fad(100,100)}
