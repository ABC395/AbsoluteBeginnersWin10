1
00:00:04,949 --> 00:00:09,948
<v ->Okay, so next up, we want to get the data and deserialize</v>

2
00:00:10,180 --> 00:00:13,270
it into our classes in our model.

3
00:00:14,481 --> 00:00:16,695
However, to do that, we're going to need to

4
00:00:16,696 --> 00:00:19,034
make a call out to Marvel, and to do that,

5
00:00:19,035 --> 00:00:21,889
we're going to need to figure out how to make a MD5 Hash,

6
00:00:21,890 --> 00:00:24,949
and I'm not going to lie to you, I have no idea.

7
00:00:24,950 --> 00:00:27,608
I wouldn't have been able to figure this out had not

8
00:00:27,609 --> 00:00:29,628
somebody posted some code online.

9
00:00:29,629 --> 00:00:31,869
That's the beauty of learning software

10
00:00:31,870 --> 00:00:36,568
development in 2015, 16 as opposed to learning

11
00:00:36,569 --> 00:00:38,520
it back when I did before the internet,

12
00:00:38,521 --> 00:00:41,331
if you can even imagine such a thing.

13
00:00:41,332 --> 00:00:43,871
Okay, but at any rate, I could show you where I found

14
00:00:43,872 --> 00:00:47,211
the answer and if you want some more information about it,

15
00:00:47,212 --> 00:00:51,091
I'd be happy to point you to there.

16
00:00:51,092 --> 00:00:54,651
So let's get started by outlining what it is

17
00:00:54,652 --> 00:00:57,590
that we need to do in our GetCharacterList().

18
00:00:57,591 --> 00:01:02,590
We're going to need to assemble the URL that we want to call

19
00:01:03,412 --> 00:01:06,221
and part of that's going to be making a call

20
00:01:06,222 --> 00:01:11,217
to get the MD5 Hash

21
00:01:11,218 --> 00:01:14,767
and then we're going to make a call out

22
00:01:14,768 --> 00:01:18,250
to Marvel and we're going to get back a response

23
00:01:18,251 --> 00:01:21,340
and we're going to need to get that response

24
00:01:21,341 --> 00:01:25,332
into a string, so response to string

25
00:01:25,333 --> 00:01:29,796
and that string will represent json, and then,

26
00:01:29,797 --> 00:01:32,876
we want to deserialize that, right?

27
00:01:32,877 --> 00:01:36,436
And if you recall the way that we deserialize data

28
00:01:38,027 --> 00:01:42,775
that JSON data is to use the 

29
00:01:42,776 --> 00:01:46,016
DataContractJsonSerializer, right?

30
00:01:47,107 --> 00:01:49,775
Alright, so that's going to be a little bit tricky

31
00:01:49,776 --> 00:01:52,234
and we're just going to need to work our way through it.

32
00:01:52,746 --> 00:01:56,564
So, assembling the URL will be pretty easy.

33
00:01:56,565 --> 00:01:59,485
We're going to come back here to their interactive

34
00:02:00,936 --> 00:02:05,113
API documentation and we're going to

35
00:02:05,114 --> 00:02:09,509
re-run the sort of query that we expect

36
00:02:09,510 --> 00:02:13,495
to do, like we want to limit to 10

37
00:02:13,496 --> 00:02:16,695
and we'll just give a random offset of 100, right?

38
00:02:16,696 --> 00:02:19,073
And we'll click try out and that should give us

39
00:02:20,114 --> 00:02:24,876
the request URL format that we need to work with.

40
00:02:28,508 --> 00:02:31,287
And what we want is this request URL.

41
00:02:31,288 --> 00:02:34,067
I'm just going to highlight it and copy it and then go back

42
00:02:34,068 --> 00:02:38,968
here and we're going to create a string URL

43
00:02:40,047 --> 00:02:42,126
equals String.Format()

44
00:02:42,127 --> 00:02:46,920
and then we will paste in that long URL.

45
00:02:46,921 --> 00:02:51,920
Now, this is a good time for me to make some more room here.

46
00:02:52,551 --> 00:02:56,711
Alright, what we're going is we're going to hardcode it to 10.

47
00:02:56,712 --> 00:03:00,211
If you wanted to, you can make and replace that value

48
00:03:00,212 --> 00:03:04,111
to grab 15, 20, 100, whatever you wanted.

49
00:03:04,112 --> 00:03:08,070
We are going to, however, change the offset.

50
00:03:08,071 --> 00:03:10,890
We're going to change the API key as well,

51
00:03:10,891 --> 00:03:14,701
and then we will append on the end of this

52
00:03:14,702 --> 00:03:18,100
the hash as well, when we get to that point.

53
00:03:18,992 --> 00:03:21,511
Alright, so, the first thing we'll need to do

54
00:03:21,512 --> 00:03:24,677
is to create an instance of Random,

55
00:03:28,979 --> 00:03:33,978
and we're going to get a new offset.

56
00:03:34,439 --> 00:03:37,659
Now I happen to know there are 1,500 characters.

57
00:03:37,660 --> 00:03:39,619
I'm going to hardcode it now, but I probably should put

58
00:03:39,620 --> 00:03:41,819
this in a constant at some point.

59
00:03:41,820 --> 00:03:46,819
So let's call this var offset

60
00:03:47,109 --> 00:03:51,878
equals random.Next and I want to give

61
00:03:52,959 --> 00:03:57,958
the max value of 1,500.

62
00:03:59,648 --> 00:04:02,904
And once I have that offset value,

63
00:04:02,905 --> 00:04:06,385
if I can provide that there.

64
00:04:06,386 --> 00:04:09,085
The next thing that I'm going to need to do is provide

65
00:04:09,086 --> 00:04:13,325
the API key and so what I'm going to do for that

66
00:04:13,326 --> 00:04:16,565
is actually create a couple of private constants.

67
00:04:16,566 --> 00:04:21,565
private const string PrivateKey

68
00:04:21,756 --> 00:04:26,602
equals and then private const

69
00:04:27,393 --> 00:04:31,352
string PublicKey equals.

70
00:04:31,353 --> 00:04:35,775
Alright. Here, I'm also just going to create one for this.

71
00:04:35,776 --> 00:04:40,775
private const int MaxCharacters

72
00:04:42,982 --> 00:04:46,930
equals 1,500, and we'll just do MaxCharacters.

73
00:04:49,501 --> 00:04:53,600
Alright, and then we'll put the public key here.

74
00:04:54,941 --> 00:04:57,080
Alright and then the next thing we're going to need to do

75
00:04:57,081 --> 00:04:59,960
is actually populate that private public key.

76
00:05:00,971 --> 00:05:04,720
This is where we get up close and personal with my

77
00:05:04,721 --> 00:05:08,140
personal information, however I'm going to remove my

78
00:05:08,141 --> 00:05:11,340
account once I finish recording this series.

79
00:05:11,341 --> 00:05:14,180
So, this key will not work. Get your own.

80
00:05:14,181 --> 00:05:15,721
Don't try to copy mine.

81
00:05:15,722 --> 00:05:19,359
Put the public key in the public key spot

82
00:05:19,360 --> 00:05:24,359
and we'll put the private key in the private key spot.

83
00:05:28,779 --> 00:05:30,818
And the next thing we're going to need to do

84
00:05:30,819 --> 00:05:35,818
is actually get the MD5 Hash and so here's what I do know

85
00:05:36,892 --> 00:05:40,991
what I can do is, I'm going to need to

86
00:05:42,002 --> 00:05:44,739
create a private static method that'll

87
00:05:44,740 --> 00:05:49,619
return a string called CreateHash() and what this will do,

88
00:05:49,620 --> 00:05:54,018
let's, let's

89
00:05:55,109 --> 00:05:59,113
do var toBeHashed equals

90
00:06:00,234 --> 00:06:04,077
we'll need a Timestamp and we're going to need a private key

91
00:06:05,678 --> 00:06:07,527
and we're going to need the public key.

92
00:06:08,685 --> 00:06:11,404
We're going to concatenate those three things together.

93
00:06:11,405 --> 00:06:15,704
So for a Timestamp, if you take a look at the documentation

94
00:06:15,705 --> 00:06:20,084
in that How To area under Authorization,

95
00:06:20,085 --> 00:06:24,344
it says that for the Timestamp you can use any long string

96
00:06:24,345 --> 00:06:27,624
which can change on a request by request basis.

97
00:06:27,625 --> 00:06:29,564
So you don't have to get crazy with this.

98
00:06:29,565 --> 00:06:32,404
I'm going to use DateTime.Now.Ticks,

99
00:06:32,405 --> 00:06:34,384
which should give us a pretty unique string of characters

100
00:06:34,385 --> 00:06:37,164
representing how many milliseconds

101
00:06:37,165 --> 00:06:39,804
since a certain date in the past.

102
00:06:39,805 --> 00:06:41,644
So we'll call var timestamp equals

103
00:06:41,645 --> 00:06:46,644
DateTime.Now.Ticks.ToString()

104
00:06:48,144 --> 00:06:50,153
and that should work, okay.

105
00:06:50,804 --> 00:06:52,223
The next step what I need to do

106
00:06:52,224 --> 00:06:54,403
is actually get the computed hash.

107
00:06:54,404 --> 00:06:58,243
Now, this is where I had no idea how to do this

108
00:06:58,244 --> 00:07:03,243
had it not been for somebody on the glorious internets

109
00:07:03,664 --> 00:07:06,003
who already figured this out and was kind enough to

110
00:07:06,004 --> 00:07:09,762
post it in response to a question on Stack Overflow.

111
00:07:09,763 --> 00:07:12,149
So I give you the URL where you can see where

112
00:07:12,150 --> 00:07:14,148
this was originally sourced from.

113
00:07:14,149 --> 00:07:17,868
I basically spent about three days trying to learn

114
00:07:17,869 --> 00:07:20,968
how to create my own hash and I learned a lot,

115
00:07:20,969 --> 00:07:23,688
but ultimately, at the end, I was unsuccessful of actually

116
00:07:23,689 --> 00:07:27,288
creating one that worked, so I just stole five lines of code

117
00:07:27,289 --> 00:07:30,608
that this kind soul posted out on the internet.

118
00:07:30,609 --> 00:07:33,068
I'm just going to make sure all the references are added

119
00:07:33,069 --> 00:07:38,068
with using statements here and what I'd recommend

120
00:07:38,109 --> 00:07:41,303
you do if you really want to learn how all this works,

121
00:07:41,304 --> 00:07:46,268
There's probably some good content out on 

122
00:07:48,979 --> 00:07:53,174
MicrosoftVirtualAcademy.com about security.

123
00:07:53,175 --> 00:07:54,475
Probably some good books out there.

124
00:07:54,476 --> 00:07:56,795
Obviously go and look at each of these objects

125
00:07:56,796 --> 00:08:00,675
and each of these methods out on MSDN to learn

126
00:08:00,676 --> 00:08:02,415
a little bit more about what they do and how they work,

127
00:08:02,416 --> 00:08:05,435
but at the end of the day, all I really care about is

128
00:08:05,436 --> 00:08:09,243
I want to pass in a value to be computed as a MD5 Hash

129
00:08:09,244 --> 00:08:12,423
and what I get back is a MD5 hash, alright, so.

130
00:08:14,274 --> 00:08:18,893
var hashedMessage equals 

131
00:08:19,754 --> 00:08:23,180
computeMD5() and I'm going to pass in the to be

132
00:08:23,181 --> 00:08:25,598
hashed and then I'm going to return

133
00:08:25,599 --> 00:08:30,058
the hashed message, like so, okay?

134
00:08:30,059 --> 00:08:35,058
So, here we're going to get that hash.

135
00:08:35,139 --> 00:08:39,747
So, var hash equals

136
00:08:40,488 --> 00:08:42,583
CreateHash

137
00:08:44,294 --> 00:08:47,300
and what I want to do is

138
00:08:50,611 --> 00:08:54,570
append to that existing URL so

139
00:08:54,571 --> 00:08:58,749
the hashed value and the, yeah,

140
00:08:58,750 --> 00:09:00,490
just the hashed value and the time stamp,

141
00:09:00,491 --> 00:09:02,350
because it should have everything else it needs.

142
00:09:02,351 --> 00:09:06,210
So, I'm going to go string--

143
00:09:07,061 --> 00:09:07,930
I could-- guess I could

144
00:09:07,931 --> 00:09:09,075
do this a number of different ways.

145
00:09:09,076 --> 00:09:10,675
Let's just go ahead and do this all in one shot.

146
00:09:10,676 --> 00:09:12,575
Actually, I changed my mind.

147
00:09:12,576 --> 00:09:17,183
Alright, we'll do that first, and then we'll create the URL.

148
00:09:17,184 --> 00:09:19,403
At the very end of this URL, I'm going to have to add in

149
00:09:19,404 --> 00:09:24,043
a timestamp equals and we'll substitute that in,

150
00:09:24,044 --> 00:09:29,035
and then also the hash itself equals, alright.

151
00:09:32,246 --> 00:09:35,137
And so, I guess I need to pass in the

152
00:09:35,138 --> 00:09:38,027
timestamp in order to get at it.

153
00:09:38,638 --> 00:09:43,257
Unfortunately, so, I need to change this just a little bit.

154
00:09:43,258 --> 00:09:45,587
String timestamp,

155
00:09:46,798 --> 00:09:48,477
and then I'll pass that in.

156
00:09:50,558 --> 00:09:54,577
But I'll have access to it here,

157
00:09:57,828 --> 00:10:00,286
and then I'll be able to pass it in here.

158
00:10:01,197 --> 00:10:03,526
Timestamp, great. Okay.

159
00:10:05,137 --> 00:10:08,565
Alright, next up I'm going to use the

160
00:10:11,496 --> 00:10:12,813
HttpClient

161
00:10:16,504 --> 00:10:19,860
called http and I need add a using statement for it,

162
00:10:19,861 --> 00:10:24,299
so I'm adding using System.Net.Http

163
00:10:24,300 --> 00:10:27,819
equals new HttpClient,

164
00:10:27,820 --> 00:10:32,069
and that'll allow us to do this,

165
00:10:32,070 --> 00:10:36,579
http.GetAsync() passing in the requestURI,

166
00:10:36,580 --> 00:10:40,277
so give it the URL, and what I should get back

167
00:10:40,278 --> 00:10:43,320
from that and it's a waitable.

168
00:10:43,321 --> 00:10:47,987
What I should get back from it is a response

169
00:10:47,988 --> 00:10:52,536
and that response will be of type

170
00:10:52,537 --> 00:10:54,726
HttpResponseMessage.

171
00:10:54,727 --> 00:10:55,975
I notice you get the red squiggly.

172
00:10:55,976 --> 00:10:57,955
That's because I have to go through this little dance here

173
00:10:57,956 --> 00:11:01,235
and add the async keyword and

174
00:11:01,236 --> 00:11:03,059
I think that's all I need to do right now,

175
00:11:03,060 --> 00:11:04,719
go back to that in a minute.

176
00:11:04,720 --> 00:11:06,078
Alright, so here we go.

177
00:11:06,079 --> 00:11:09,379
We got the response and now with that response

178
00:11:09,380 --> 00:11:12,736
what I need to do is read it into a string

179
00:11:12,737 --> 00:11:16,723
so var jsonMessage equals

180
00:11:16,724 --> 00:11:20,573
response.Content, whoops, Content

181
00:11:20,574 --> 00:11:25,573
.ReadAsStringAsync(), that'll give me back

182
00:11:26,212 --> 00:11:28,325
just the json message now.

183
00:11:28,326 --> 00:11:31,065
I have it in hand, and since this is in async,

184
00:11:31,066 --> 00:11:33,536
I'm going to have to make it awaitable.

185
00:11:35,067 --> 00:11:39,808
Now I need to take that JSON and I need to

186
00:11:39,809 --> 00:11:43,329
deserialize it into my classes and

187
00:11:43,330 --> 00:11:44,868
to do this I'm going to use the

188
00:11:44,869 --> 00:11:49,868
DataContractJsonSerializer,

189
00:11:50,320 --> 00:11:52,922
right, and we should already have

190
00:11:52,923 --> 00:11:54,261
that referenced in our project.

191
00:11:54,262 --> 00:11:56,242
I'm just going to hit control period and add the

192
00:11:56,243 --> 00:12:01,242
using System.Runtime.Serialization.Json namespace.

193
00:12:02,472 --> 00:12:05,651
That should get it recognized there,

194
00:12:06,952 --> 00:12:08,252
and I'm going to create a serializer

195
00:12:09,503 --> 00:12:13,328
which is really just a new DataContractJsonSerializer,

196
00:12:13,329 --> 00:12:17,863
and specifically the type is going to be

197
00:12:17,864 --> 00:12:19,802
this character data wrapper.

198
00:12:24,054 --> 00:12:26,921
CharacterDataWrapper.

199
00:12:26,922 --> 00:12:27,481
Now why isn't it seeing it?

200
00:12:27,482 --> 00:12:31,500
Because I haven't added the using statement for models.

201
00:12:31,501 --> 00:12:36,160
So using HeroExplorer.Models should resolve that reference.

202
00:12:38,371 --> 00:12:42,328
And then I need a MemoryStream, so, whoops.

203
00:12:43,479 --> 00:12:46,387
ms for Memory Streams, so MemoryStream.

204
00:12:48,968 --> 00:12:51,188
Let's make sure we add the using statements for that,

205
00:12:51,189 --> 00:12:56,188
System.IO and the idea here is that we're going to pile

206
00:12:56,669 --> 00:12:59,847
a bunch of stuff in a memory stream and the memory stream

207
00:12:59,848 --> 00:13:03,947
will sit there holding onto stuff and then we'll give it

208
00:13:03,948 --> 00:13:06,629
to the serializer, the serializer will suck all the stuff

209
00:13:06,630 --> 00:13:10,088
out of that straw and it will deserialize it and

210
00:13:10,089 --> 00:13:15,048
give it back to us as an object graph

211
00:13:16,619 --> 00:13:19,148
beginning at the root with CharacterDataWrapper.

212
00:13:19,149 --> 00:13:22,107
So we have to start out with

213
00:13:22,108 --> 00:13:26,645
Encoding.UTF8,

214
00:13:26,646 --> 00:13:30,767
which is what we would expect that JSON to be in,

215
00:13:30,768 --> 00:13:33,847
and then we're going to say, "Get the bytes out and

216
00:13:36,128 --> 00:13:38,036
"basically just take that string

217
00:13:38,037 --> 00:13:40,776
"that we got here, that json message and then turn it

218
00:13:40,777 --> 00:13:44,276
"into an array of bytes based on the UTF8 encoding

219
00:13:44,277 --> 00:13:46,277
"and then put that all up in a memory stream."

220
00:13:46,278 --> 00:13:50,306
And this should be new memory stream, like so.

221
00:13:51,576 --> 00:13:54,655
Alrighty, and then, if we've done everything right,

222
00:13:54,656 --> 00:13:59,215
which is a big if, we're going to read the object

223
00:13:59,216 --> 00:14:00,915
that's sitting there in that memory stream

224
00:14:02,066 --> 00:14:06,684
and we're going to read it into a

225
00:14:09,815 --> 00:14:14,814
var result and what we'll do,

226
00:14:15,402 --> 00:14:19,662
here is go, what should be brought back to us is

227
00:14:19,663 --> 00:14:24,662
a CharacterDataWrapper object, if we did that right.

228
00:14:26,443 --> 00:14:28,932
Okay, and that.

229
00:14:29,661 --> 00:14:32,320
Now, we probably, in order to get this to work,

230
00:14:32,321 --> 00:14:35,279
what we're going to need to do is actually return

231
00:14:36,560 --> 00:14:41,559
a task of CharacterDataWrapper and so

232
00:14:41,560 --> 00:14:44,780
we'll want to return the result here.

233
00:14:47,831 --> 00:14:50,058
And why is everybody not happy,

234
00:14:50,059 --> 00:14:52,857
oh because yeah, you're in the void, right.

235
00:14:52,858 --> 00:14:55,318
Everything looks good, everybody happy? Good.

236
00:14:55,319 --> 00:14:57,338
Build the solution.

237
00:15:05,239 --> 00:15:06,753
Okay, great. That worked.

238
00:15:07,584 --> 00:15:10,893
The next thing that we're going to need to do is now,

239
00:15:11,904 --> 00:15:16,693
let's see, in our MainPage.xaml,

240
00:15:16,694 --> 00:15:19,753
I'm just going to add a button and when we click it,

241
00:15:19,754 --> 00:15:21,153
we'll kick off this whole process.

242
00:15:21,154 --> 00:15:23,793
I just want to see if it's bringing data back.

243
00:15:23,794 --> 00:15:26,673
Once we get data, and we get it deserialized,

244
00:15:26,674 --> 00:15:28,873
then we can move on with the user interface,

245
00:15:28,874 --> 00:15:30,553
but in the meantime, all I really want to do

246
00:15:30,554 --> 00:15:35,553
is just to make sure that we can

247
00:15:38,434 --> 00:15:40,043
get that far.

248
00:15:42,523 --> 00:15:47,522
And so we want to make a call into the MarvelFacade. --

249
00:15:48,463 --> 00:15:52,392
whoops, why don't I see...

250
00:15:52,743 --> 00:15:57,742
Oh, because I wanted this to be static. Alright.

251
00:16:00,034 --> 00:16:01,242
I wanted it static so I didn't have to

252
00:16:01,243 --> 00:16:02,802
create an instance of MarvelFacade.

253
00:16:02,803 --> 00:16:03,763
I mean, all of this is really doing is

254
00:16:03,764 --> 00:16:05,802
bringing me back something it doesn't,

255
00:16:05,803 --> 00:16:07,822
I don't need it to have a reference to it.

256
00:16:07,823 --> 00:16:09,482
It doesn't have any state, you know.

257
00:16:10,203 --> 00:16:12,731
Alright, and so that should work there.

258
00:16:12,732 --> 00:16:17,731
var, let's call it "data" equals that.

259
00:16:18,079 --> 00:16:19,947
That's all I really need to do.

260
00:16:21,258 --> 00:16:24,617
So let me put a breakpoint at a spot where I know,

261
00:16:25,758 --> 00:16:29,106
whoops, spot where I'm concerned about.

262
00:16:29,107 --> 00:16:31,886
I'm pretty confident everything will work.

263
00:16:31,887 --> 00:16:34,245
I'm a little concerned about this right here

264
00:16:35,466 --> 00:16:40,074
and I can't explain why. (laughs)

265
00:16:40,075 --> 00:16:42,943
Let's just see if this will work.

266
00:16:46,914 --> 00:16:50,741
If we do hit a problem, it's probably a mismatch

267
00:16:50,742 --> 00:16:52,962
between the JSON that's being returned

268
00:16:52,963 --> 00:16:56,320
for the items that we want to work with.

269
00:16:56,321 --> 00:16:59,131
Oh, I got a tiny button here, but this should work.

270
00:16:59,941 --> 00:17:03,569
I'm mismatched between the data types and the jsons.

271
00:17:03,570 --> 00:17:04,809
So I'm going to have to, you know,

272
00:17:04,810 --> 00:17:06,790
put my thinking cap on and figure that part out.

273
00:17:06,791 --> 00:17:09,079
We haven't hit the breakpoint just yet.

274
00:17:11,970 --> 00:17:13,149
And we haven't hit an exception,

275
00:17:15,010 --> 00:17:17,018
so it's really thinking about this.

276
00:17:25,089 --> 00:17:27,999
Okay, so far so good. Let's take a look at that URL.

277
00:17:30,090 --> 00:17:32,547
Can't see it off to the right hand side of the screen,

278
00:17:32,548 --> 00:17:37,547
but it looks legit, looks legit.

279
00:17:38,028 --> 00:17:40,346
Alright, so let's keep going here and see what happens.

280
00:17:43,338 --> 00:17:45,645
So it made it on request, we got it back,

281
00:17:46,736 --> 00:17:48,705
and now we're going to create our serializer

282
00:17:48,706 --> 00:17:51,725
in our memory stream, and here's where I'm nervous.

283
00:17:51,726 --> 00:17:56,725
And hey, it actually worked. Oh yeah.

284
00:17:59,105 --> 00:18:01,902
Lists 10 results. Let's drill into one of these guys.

285
00:18:01,903 --> 00:18:03,882
"Frankenstein's Monster".

286
00:18:03,883 --> 00:18:05,822
Here, I want you to see what I'm going to do next.

287
00:18:07,503 --> 00:18:09,270
I'm very happy about this. Okay.

288
00:18:09,271 --> 00:18:12,970
So, great. We got data back from the Marvel API and

289
00:18:12,971 --> 00:18:16,230
I'm so excited about that that it worked on the first try.

290
00:18:16,231 --> 00:18:20,210
Okay, so, we're going to piggy back up here in the next lesson

291
00:18:20,211 --> 00:18:22,510
and then we should be able to bind to that data and

292
00:18:22,511 --> 00:18:24,010
start showing stuff on screen.

293
00:18:24,011 --> 00:18:25,150
That's going to be exciting.

294
00:18:25,151 --> 00:18:27,591
See you in the next lesson. Thanks.  

