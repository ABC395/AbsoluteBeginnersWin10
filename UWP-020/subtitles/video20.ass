[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1894
PlayResY: 1082

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: uwp20XamlControlsPart1_high.mp4
Video File: uwp20XamlControlsPart1_high.mp4
Video AR Mode: 4
Video AR Value: 1.752334
Video Zoom Percent: 0.625000
Video Position: 38

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: windows,Microsoft YaHei UI,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:04.92,windows,,0,0,0,,基本XAML控件（第一部分）\N听译@4770K{\fad(100,100)}
Dialogue: 0,0:00:04.92,0:00:12.02,windows,,0,0,0,,Hi~   我是爆伯   来自www.learnvisualstudio.net{\fad(100,100)}
Dialogue: 0,0:00:12.02,0:00:17.66,windows,,0,0,0,,这节课我们将学习一些之前尚未涉及到的基本 {\b1}输入控件 (input controls){\b0} 的用法
Dialogue: 0,0:00:17.66,0:00:20.22,windows,,0,0,0,,未来我们将使用到这些控件{\fad(100,100)}
Dialogue: 0,0:00:20.22,0:00:24.44,windows,,0,0,0,,同时，我想在最后做一次所有控件的复习{\fad(100,100)}
Dialogue: 0,0:00:24.44,0:00:34.77,windows,,0,0,0,,这个系列将包含7个部分，你可以看到我创建了一个新工程（控件示例第一部分）{\fad(100,100)}
Dialogue: 0,0:00:34.78,0:00:38.00,windows,,0,0,0,,那么我们从头开始{\fad(100,100)}
Dialogue: 0,0:00:38.78,0:00:47.00,windows,,0,0,0,,把桌面上这个图片（我会把它放到给你们的文件夹里）拖放到 {\b1}资源 (Asset){\b0} 文件夹里{\fad(100,100)}
Dialogue: 0,0:00:47.08,0:00:50.00,windows,,0,0,0,,你们会看到它出现在了这里{\fad(100,100)}
Dialogue: 0,0:00:50.00,0:00:53.00,windows,,0,0,0,,好了，我们过一会才会用到它{\fad(100,100)}
Dialogue: 0,0:00:53.00,0:00:58.74,windows,,0,0,0,,由于本节课涉及的代码很多，所以大部分我将使用复制大法{\fad(100,100)}
Dialogue: 0,0:00:58.74,0:01:02.10,windows,,0,0,0,,每一个控件我都将只分三点介绍{\fad(100,100)}
Dialogue: 0,0:01:02.10,0:01:05.11,windows,,0,0,0,,第一：如何将控件{\b1}显示{\b0}在屏幕上{\fad(100,100)}
Dialogue: 0,0:01:05.11,0:01:14.65,windows,,0,0,0,,第二：如何处理主要 {\b1}事件{\b0}  例如选择或点击{\fad(100,100)}
Dialogue: 0,0:01:14.65,0:01:26.16,windows,,0,0,0,,第三：如何{\b1}检索{\b0}所控制的值，无论何种类型、性质{\fad(100,100)}
Dialogue: 0,0:01:26.16,0:01:32.04,windows,,0,0,0,,那么我们首先介绍第一种输入控件，就是这个 {\b1}复选框 (checkbox){\b0}{\fad(100,100)}
Dialogue: 0,0:01:32.04,0:01:35.04,windows,,0,0,0,,没错，它比任何控件都要简单{\fad(100,100)}
Dialogue: 0,0:01:35.04,0:01:38.00,windows,,0,0,0,,正如你所见，我们创建（复制）了一个新的 {\b1}复选框 (checkbox){\b0}{\fad(100,100)}
Dialogue: 0,0:01:38.00,0:01:52.06,windows,,0,0,0,,然后我在方框的右边设置了内容以显示是否被勾选（效果看后面演示）{\fad(100,100)}
Dialogue: 0,0:01:52.06,0:01:56.00,windows,,0,0,0,,这样我们就有了一个可以处理 {\b1}点击事件 (tap event){\b0} 的标签{\fad(100,100)}
Dialogue: 0,0:01:56.00,0:02:06.27,windows,,0,0,0,,我们来写一下事件，我只想在复选框之间的后面 显示那个标签{\fad(100,100)}
Dialogue: 0,0:02:06.27,0:02:19.85,windows,,0,0,0,,但是还有一个需要注意的是，我想让标签多次显示而不是显示一次就消失{\fad(100,100)}
Dialogue: 0,0:02:19.85,0:02:26.42,windows,,0,0,0,,所以你可以看到勾选然后取消勾选再勾选标签还可以显示{\fad(100,100)}
Dialogue: 0,0:02:26.42,0:02:30.50,windows,,0,0,0,,那么我们开始下一个内容{\fad(100,100)}
Dialogue: 0,0:02:30.50,0:02:33.67,windows,,0,0,0,, {\b1}单选按钮 (radio button){\b0} 他看上去和 {\b1}复选框 (checkbox){\b0} 很相似{\fad(100,100)}
Dialogue: 0,0:02:33.67,0:02:42.07,windows,,0,0,0,,但是 它允许你加入多个变量，变量可以组成 {\b1}组名称 (group names){\b0}{\fad(100,100)}
Dialogue: 0,0:02:42.07,0:02:48.31,windows,,0,0,0,,这样就可以把所有单选按钮归为同一组 甚至组成两组单选按钮{\fad(100,100)}
Dialogue: 0,0:02:48.31,0:02:53.12,windows,,0,0,0,,使每一组都有唯一的选择{\fad(100,100)}
Dialogue: 0,0:02:53.12,0:03:01.09,windows,,0,0,0,,和之前的复选框一样，我们依旧设置了一个标签在右侧{\fad(100,100)}
Dialogue: 0,0:03:01.09,0:03:11.07,windows,,0,0,0,, {\b1}单选按钮 (radio button){\b0} 在字面上和 {\b1}复选框 (checkbox){\b0} 相比很奇怪\N我猜可能是因为按钮的形状是圆的有关（很有道理的样子）{\fad(100,100)}
Dialogue: 0,0:03:11.07,0:03:21.45,windows,,0,0,0,,另一件我们需要处理的是检索它的标签，我们现在就去做{\fad(100,100)}
Dialogue: 0,0:03:21.45,0:03:37.90,windows,,0,0,0,,这段代码设置单选按钮的文本内容和之前的一样显示yes或者no{\fad(100,100)}
Dialogue: 0,0:03:37.90,0:03:55.28,windows,,0,0,0,,我们来测试一下，一切正常，这样你就可以添加你想要的单选按钮了\N不过通常情况下四到五个就已经够多了{\fad(100,100)}
Dialogue: 0,0:03:55.28,0:03:59.78,windows,,0,0,0,,如果你想加入更多的，我想你可以试试别的控件{\fad(100,100)}
Dialogue: 0,0:03:59.78,0:04:05.99,windows,,0,0,0,,那么我们开始下一个内容： {\b1}组合框 (comb box){\b0}{\fad(100,100)}
Dialogue: 0,0:04:05.99,0:04:10.40,windows,,0,0,0,,组合框将允许你创建数个项目{\fad(100,100)}
Dialogue: 0,0:04:10.40,0:04:19.00,windows,,0,0,0,,（代码对齐ing）
Dialogue: 0,0:04:19.00,0:04:29.00,windows,,0,0,0,,好了，这段代码将处理用户在组合框里的选择{\fad(100,100)}
Dialogue: 0,0:04:29.00,0:04:34.82,windows,,0,0,0,,并且将选择的内容显示在文本标签里{\fad(100,100)}
Dialogue: 0,0:04:34.82,0:04:40.06,windows,,0,0,0,,我们现在制作了数个不同下拉列表式组合框项目{\fad(100,100)}
Dialogue: 0,0:04:40.06,0:04:42.89,windows,,0,0,0,,我也许想说这一定是一个 {\b1}选择行为 (select event){\b0}{\fad(100,100)}
Dialogue: 0,0:04:42.89,0:04:49.60,windows,,0,0,0,,事实上并不是，为了证明这一点我把它移到最后一行来（待会演示即可明白）{\fad(100,100)}
Dialogue: 0,0:04:49.60,0:05:00.68,windows,,0,0,0,,然后处理一下SelectionChanged事件，我来复制一下代码，这里我将用一个小把戏{\fad(100,100)}
Dialogue: 0,0:05:00.68,0:05:08.42,windows,,0,0,0,,我用一个sender来传递值
Dialogue: 0,0:05:08.42,0:05:23.40,windows,,0,0,0,,以便指向组合框本身，然后检索到用户从组合框里所选择的那个项目{\fad(100,100)}
Dialogue: 0,0:05:23.40,0:05:28.24,windows,,0,0,0,,（这句没听懂Orz 召唤陈老师）{\fad(100,100)}
Dialogue: 0,0:05:28.24,0:05:35.95,windows,,0,0,0,,只有这样才能获取所选择的内容并且在后面显示出来{\fad(100,100)}
Dialogue: 0,0:05:35.95,0:05:40.65,windows,,0,0,0,,我们来测试一下
Dialogue: 0,0:05:40.65,0:05:46.09,windows,,0,0,0,,这里你可以看到 sixth 是默认选项，因为我们之前把 IsSelected 放到了这里{\fad(100,100)}
Dialogue: 0,0:05:46.09,0:05:54.80,windows,,0,0,0,,但当我更换了选择，后面的标签显示了我所选的内容，这就可以获取组合框内的被选选项{\fad(100,100)}
Dialogue: 0,0:05:54.80,0:06:03.51,windows,,0,0,0,,你可以像做单选按钮那样制作出来一个长的列表 ：){\fad(100,100)}
Dialogue: 0,0:06:03.51,0:06:09.18,windows,,0,0,0,,当然有些时候需要让用户更清楚该选什么{\fad(100,100)}
Dialogue: 0,0:06:09.18,0:06:13.12,windows,,0,0,0,,那最好使用 {\b1}列表框 (list box){\b0} 来替代{\fad(100,100)}
Dialogue: 0,0:06:13.12,0:06:19.79,windows,,0,0,0,,注意，列表框将是我们今后学习 {\b1}汉堡菜单 (Hambuger navigation){\b0} 制作中重要的控件\N注意，列表框将是我们今后学习 {\b1}汉堡菜单 (Hambuger navigation){\b0} 制作中重要的控件\N注意，列表框将是我们今后学习 {\b1}汉堡菜单 (Hambuger navigation){\b0} 制作中重要的控件{\fad(100,100)}
Dialogue: 0,0:06:19.79,0:06:25.43,windows,,0,0,0,,虽然有很多方法可以制作这个在 windows10 设计中比较流行的汉堡菜单{\fad(100,100)}
Dialogue: 0,0:06:25.43,0:06:31.54,windows,,0,0,0,,但我选择使用列表框来制作，我将在后面的课程解释原因{\fad(100,100)}
Dialogue: 0,0:06:31.54,0:06:34.77,windows,,0,0,0,,嗯，这是我们之间的约定  {\b1}(•̀ᴗ•́)و ̑̑  {\b0}{\fad(100,100)}
Dialogue: 0,0:06:34.77,0:06:39.78,windows,,0,0,0,,言归正传，我们来处理一下{\fad(100,100)}
Dialogue: 0,0:06:39.78,0:06:51.40,windows,,0,0,0,,列表框与众（单选按钮、组合框）不同的是：列表框可以选择多项内容{\fad(100,100)}
Dialogue: 0,0:06:51.40,0:07:01.60,windows,,0,0,0,,看一下这里 SelectionMode 的值被我从 Single 改成 Multiple，这样就可以多选了{\fad(100,100)}
Dialogue: 0,0:07:01.60,0:07:09.17,windows,,0,0,0,,利用（没听懂的一个词）检索列表中的所有选项{\fad(100,100)}
Dialogue: 0,0:07:09.17,0:07:14.71,windows,,0,0,0,,然后检索到 IsSelected 所在的位置{\fad(100,100)}
Dialogue: 0,0:07:14.71,0:07:20.95,windows,,0,0,0,,然后标签获取被选择内容，并把它们按序排列{\fad(100,100)}
Dialogue: 0,0:07:20.95,0:07:30.53,windows,,0,0,0,,然后用一个名称为 Join 的字符串把他们一并输出在后面{\fad(100,100)}
Dialogue: 0,0:07:30.53,0:07:36.43,windows,,0,0,0,,那我来测试一下你们就知道是怎么一回事了{\fad(100,100)}
Dialogue: 0,0:07:36.43,0:07:44.21,windows,,0,0,0,,选择 First, Second, Third 再去掉 Second, First 然后再加上 Second{\fad(100,100)}
Dialogue: 0,0:07:44.21,0:07:46.51,windows,,0,0,0,,这样你就明白原理了{\fad(100,100)}
Dialogue: 0,0:07:46.51,0:07:55.55,windows,,0,0,0,,后面我们可能会学习到把模式切换为Single{\fad(100,100)}
Dialogue: 0,0:07:55.55,0:08:02.66,windows,,0,0,0,,这里有一个特性我很喜欢，列表框可以将用户选择的选项保持高亮{\fad(100,100)}
Dialogue: 0,0:08:02.66,0:08:11.37,windows,,0,0,0,,正如我们所熟知的汉堡菜单那样，例如 win10 内置的财经和运动这两个应用{\fad(100,100)}
Dialogue: 0,0:08:11.37,0:08:15.74,windows,,0,0,0,,很快我们在后面的课程就会再提到列表框{\fad(100,100)}
Dialogue: 0,0:08:15.74,0:08:21.75,windows,,0,0,0,,现在我们来看一下 {\b1}图像控制 (imagine control){\b0}{\fad(100,100)}
Dialogue: 0,0:08:21.75,0:08:24.65,windows,,0,0,0,,这是将来的练习内容{\fad(100,100)}
Dialogue: 0,0:08:24.65,0:08:32.30,windows,,0,0,0,,图像控制正如其字面所诉 就是显示图片，但是这里有一些有趣的东西需要注意{\fad(100,100)}
Dialogue: 0,0:08:32.30,0:08:41.80,windows,,0,0,0,,首先：设置来源，在这个样例中可以访问项目的根目录直接设置成 Assets/logo.png{\fad(100,100)}
Dialogue: 0,0:08:41.80,0:08:49.57,windows,,0,0,0,,当然也支持 网络图片地址 或者 app中某个图片{\fad(100,100)}
Dialogue: 0,0:08:49.57,0:08:54.35,windows,,0,0,0,,还有一点要指出的是 {\b1}拉伸 (stretch){\b0}{\fad(100,100)}
Dialogue: 0,0:08:54.35,0:08:58.82,windows,,0,0,0,,它有几种选项，这里将一一演示讲解{\fad(100,100)}
Dialogue: 0,0:08:58.82,0:09:07.66,windows,,0,0,0,,首先是设置成 None 意思是没有做任何拉伸处理{\fad(100,100)}
Dialogue: 0,0:09:07.66,0:09:11.23,windows,,0,0,0,,按图片素材本身的大小输出，所以你看得出来非常大{\fad(100,100)}
Dialogue: 0,0:09:11.23,0:09:25.34,windows,,0,0,0,,然后我们改成 Fill 看看会怎样{\fad(100,100)}
Dialogue: 0,0:09:25.34,0:09:34.69,windows,,0,0,0,,这样看来 图片被拉伸 250% 长 50% 宽，尽可能把空间充满（爆伯卖萌中）{\fad(100,100)}
Dialogue: 0,0:09:34.69,0:09:39.82,windows,,0,0,0,,把图片拉长得很夸张 {\b1}(┙>∧<)┙へ┻┻{\b0}，但是确实把空间给填满了{\fad(100,100)}
Dialogue: 0,0:09:39.82,0:09:44.83,windows,,0,0,0,,下一个是 Uniform{\fad(100,100)}
Dialogue: 0,0:09:44.83,0:09:58.64,windows,,0,0,0,,很显然 这会把图片按原比例缩放到一个正好的大小（长或者宽达到边界的缩放比）所以有很多空白{\fad(100,100)}
Dialogue: 0,0:09:58.64,0:10:02.25,windows,,0,0,0,,UniformToFill 是最后一个{\fad(100,100)}
Dialogue: 0,0:10:02.25,0:10:15.26,windows,,0,0,0,,在这个案例中会和 None 差不多 待会我们来看一下
Dialogue: 0,0:10:15.26,0:10:18.63,windows,,0,0,0,,再强调一下 在这个案例中会和 None 没什么区别{\fad(100,100)}
Dialogue: 0,0:10:18.63,0:10:29.14,windows,,0,0,0,,但是如果你的 边界设置、图片大小 和我这里不同，你就会发现它们之间的不同{\fad(100,100)}
Dialogue: 0,0:10:29.14,0:10:35.85,windows,,0,0,0,,好了，我们开始下一个控件： {\b1}切换按钮 (ToggleButton){\b0}{\fad(100,100)}
Dialogue: 0,0:10:35.85,0:10:43.45,windows,,0,0,0,,切换按钮是一个静态的按钮，所以你可以 打开 或者 关闭{\fad(100,100)}
Dialogue: 0,0:10:43.45,0:10:52.26,windows,,0,0,0,,当然也有方法做成三级按钮：null、1、0{\fad(100,100)}
Dialogue: 0,0:10:52.26,0:10:59.87,windows,,0,0,0,,这里我就是设置成三级按钮，我们来处理一下 MyToggleButton_Click 事件{\fad(100,100)}
Dialogue: 0,0:10:59.87,0:11:11.25,windows,,0,0,0,,这样就可以显示按钮  是否被按下( null )  或者是  真( 1 )  还是  假( 0 ){\fad(100,100)}
Dialogue: 0,0:11:11.25,0:11:17.16,windows,,0,0,0,,测试一下看看{\fad(100,100)}
Dialogue: 0,0:11:17.16,0:11:30.80,windows,,0,0,0,,点击一下变成了 真( 1 ) 再点击一下变成了 空( null ) 再点一下变成了 假( 0 ){\fad(100,100)}
Dialogue: 0,0:11:30.80,0:11:34.71,windows,,0,0,0,,如果是默认的二级按钮就只能在   真   假   之间切换{\fad(100,100)}
Dialogue: 0,0:11:34.71,0:11:42.28,windows,,0,0,0,,然后就是本课最后一个控件 {\b1}拨动开关 (toggle switch){\b0}{\fad(100,100)}
Dialogue: 0,0:11:42.28,0:11:55.63,windows,,0,0,0,,拨动开关让我们在两种状态中做出选择 可以在 win10 设置中经常看到{\fad(100,100)}
Dialogue: 0,0:11:55.63,0:12:08.54,windows,,0,0,0,,这里我做的是改变标签显示的内容，当你拨动开关的时候会发生变化{\fad(100,100)}
Dialogue: 0,0:12:08.54,0:12:15.65,windows,,0,0,0,,当然你也可以设置别的事件，但这样可以很方便地演示{\fad(100,100)}
Dialogue: 0,0:12:15.65,0:12:19.12,windows,,0,0,0,,那就再运行一次喽~{\fad(100,100)}
Dialogue: 0,0:12:19.12,0:12:29.56,windows,,0,0,0,,off ←  → on\N这里我制作的很简单，你可以自己制作一些复杂的{\fad(100,100)}
Dialogue: 0,0:12:29.56,0:12:33.60,windows,,0,0,0,,到这里，本节课内容都介绍完了{\fad(100,100)}
Dialogue: 0,0:12:33.60,0:12:38.04,windows,,0,0,0,,希望你可以掌握这里介绍的所有控件{\fad(100,100)}
Dialogue: 0,0:12:38.04,0:12:50.21,windows,,0,0,0,,如何显示\N如何处理事件\N如何设置特殊控制{\fad(100,100)}
Dialogue: 0,0:12:50.21,0:12:55.59,windows,,0,0,0,,以及如何检索在控制下的变化{\fad(100,100)}
Dialogue: 0,0:12:55.59,0:13:00.39,windows,,0,0,0,,好了，继续加油，我们下一节课见{\fad(100,100)}
Dialogue: 0,0:13:00.39,0:13:05.96,windows,,0,0,0,,微软大法好~{\fad(100,0)}
