[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: uwp43CheatSheet_high.mp4
Video File: uwp43CheatSheet_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 209
Active Line: 204
Video Position: 19340

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Microsoft YaHei UI,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.62,0:00:03.62,Default,,0,0,0,,翻译： 陈继民 审核：章程
Dialogue: 0,0:00:03.62,0:00:06.73,Default,,0,0,0,,<v ->大家好，这里是www.learnvisualstudio.net的萌叔~,</v>
Dialogue: 0,0:00:06.73,0:00:09.68,Default,,0,0,0,,今天又是一次回顾我们的备忘单的时候了
Dialogue: 0,0:00:09.68,0:00:12.93,Default,,0,0,0,,让我们从第37课开始
Dialogue: 0,0:00:12.93,0:00:15.30,Default,,0,0,0,,我们开始讲到利用视觉管理器
Dialogue: 0,0:00:15.31,0:00:18.64,Default,,0,0,0,,去创建自适应触发器
Dialogue: 0,0:00:18.64,0:00:22.49,Default,,0,0,0,,我们说过视觉管理器会利用
Dialogue: 0,0:00:22.49,0:00:26.59,Default,,0,0,0,,触发器去重置我们
Dialogue: 0,0:00:26.59,0:00:30.39,Default,,0,0,0,,在XAML中各元素的状态
Dialogue: 0,0:00:30.39,0:00:33.80,Default,,0,0,0,,同时允许我们去修改它们的属性
Dialogue: 0,0:00:33.80,0:00:36.52,Default,,0,0,0,,基于当前屏幕的尺寸
Dialogue: 0,0:00:36.52,0:00:40.83,Default,,0,0,0,,这里我会给各位一个备忘单，让你可以复制粘贴
Dialogue: 0,0:00:40.83,0:00:43.22,Default,,0,0,0,,当你需要使用到视觉管理器的时候
Dialogue: 0,0:00:43.22,0:00:45.84,Default,,0,0,0,,是的，你可以摆脱自适应触发器
Dialogue: 0,0:00:45.84,0:00:47.55,Default,,0,0,0,,你可以重新命名VisualStates,
Dialogue: 0,0:00:47.55,0:00:51.38,Default,,0,0,0,,如果你想也可以改变这些设置
Dialogue: 0,0:00:51.38,0:00:52.95,Default,,0,0,0,,只为了让它顺利工作
Dialogue: 0,0:00:52.95,0:00:54.37,Default,,0,0,0,,大概就是这样了
Dialogue: 0,0:00:54.37,0:00:58.16,Default,,0,0,0,,你可以在这里有一个好的开头
Dialogue: 0,0:00:58.16,0:01:01.17,Default,,0,0,0,,请记住我们创建了一个VisualStateGroup
Dialogue: 0,0:01:01.17,0:01:03.28,Default,,0,0,0,,这里面会包含一个或多个VisualStates
Dialogue: 0,0:01:03.29,0:01:04.99,Default,,0,0,0,,我们可以给VisualStates起任何你想要的名字
Dialogue: 0,0:01:04.99,0:01:07.81,Default,,0,0,0,,我们可以把触发器设置为任何一个尺寸
Dialogue: 0,0:01:07.81,0:01:10.98,Default,,0,0,0,,我们想要的高度和宽度
Dialogue: 0,0:01:10.99,0:01:13.42,Default,,0,0,0,,为了我们特别的应用
Dialogue: 0,0:01:13.42,0:01:16.29,Default,,0,0,0,,我想我已经说过很多次了
Dialogue: 0,0:01:16.29,0:01:21.29,Default,,0,0,0,,我并不知道有哪个特别的断点(break point)
Dialogue: 0,0:01:22.66,0:01:26.08,Default,,0,0,0,,（view port sizes） 我们在任何一个应用中都需要用到 //注:这里应该是说没有特定的触发器尺寸
Dialogue: 0,0:01:26.08,0:01:28.60,Default,,0,0,0,,全部取决于你
Dialogue: 0,0:01:28.60,0:01:29.81,Default,,0,0,0,,以及你对应用的需求
Dialogue: 0,0:01:29.81,0:01:32.09,Default,,0,0,0,,所以你可以自由的修改触发器
Dialogue: 0,0:01:32.09,0:01:34.82,Default,,0,0,0,,以及每个VisualState的设置
Dialogue: 0,0:01:34.82,0:01:37.28,Default,,0,0,0,,这里你可以看到两个VisualStates:，“Narrow” 还有 “Wide”
Dialogue: 0,0:01:37.28,0:01:40.89,Default,,0,0,0,,当尺寸小于600px时
Dialogue: 0,0:01:40.89,0:01:44.33,Default,,0,0,0,,会触发这些设置
Dialogue: 0,0:01:44.33,0:01:47.61,Default,,0,0,0,,当尺寸超过600px会触发这些设置，Ok？
Dialogue: 0,0:01:47.61,0:01:51.85,Default,,0,0,0,,一个挺简单的概念，只需要扩展这些
Dialogue: 0,0:01:51.86,0:01:54.07,Default,,0,0,0,,就可以改变你的应用了
Dialogue: 0,0:01:54.07,0:01:58.68,Default,,0,0,0,,通过添加更多的设置
Dialogue: 0,0:01:58.68,0:02:01.33,Default,,0,0,0,,基于你对你的应用布局上的需求
Dialogue: 0,0:02:01.33,0:02:04.32,Default,,0,0,0,,好，在下一个视频中
Dialogue: 0,0:02:04.32,0:02:06.86,Default,,0,0,0,,在课程38, 我所做的只是展示给你们
Dialogue: 0,0:02:06.86,0:02:11.86,Default,,0,0,0,,一些我在别人博客中“偷”来的技术
Dialogue: 0,0:02:12.38,0:02:15.12,Default,,0,0,0,,Wintellect的Jeff Prosise的博文
Dialogue: 0,0:02:15.13,0:02:18.21,Default,,0,0,0,,这个列子允许我们创建自适应触发器
Dialogue: 0,0:02:18.21,0:02:23.21,Default,,0,0,0,,通过监听屏幕尺寸的改变然后设置
Dialogue: 0,0:02:23.32,0:02:26.54,Default,,0,0,0,,Grid.Row和Grid.Column的值
Dialogue: 0,0:02:26.54,0:02:30.05,Default,,0,0,0,,在一个包含所有的控件的StackPanels中
Dialogue: 0,0:02:30.05,0:02:32.51,Default,,0,0,0,,将它们从一个宽布局
Dialogue: 0,0:02:32.51,0:02:35.48,Default,,0,0,0,,变成一个需要滚动视图的窄布局
Dialogue: 0,0:02:35.48,0:02:40.48,Default,,0,0,0,,如果你想要复习或者重新做一遍这个Demo
Dialogue: 0,0:02:40.79,0:02:43.65,Default,,0,0,0,,我想这是一个好机会去真正掌握它
Dialogue: 0,0:02:43.65,0:02:47.52,Default,,0,0,0,,我们所以这不是必要的 ， 完全的
Dialogue: 0,0:02:47.52,0:02:50.18,Default,,0,0,0,,不同的方式去完成它
Dialogue: 0,0:02:50.18,0:02:52.95,Default,,0,0,0,,但是你也可以去创建设备特定试图（device specific views）
Dialogue: 0,0:02:52.95,0:02:57.95,Default,,0,0,0,,区别于创建自适应触发器
Dialogue: 0,0:02:58.07,0:03:02.39,Default,,0,0,0,,这个会允许你针对特定的设备创建特定的布局
Dialogue: 0,0:03:02.39,0:03:04.09,Default,,0,0,0,,在这次的例子中我们会创建两个文件夹
Dialogue: 0,0:03:04.09,0:03:08.75,Default,,0,0,0,,在我们的项目根目录下
Dialogue: 0,0:03:08.75,0:03:12.00,Default,,0,0,0,,一个我们会命名为DeviceFamily-Mobile.
Dialogue: 0,0:03:12.00,0:03:15.87,Default,,0,0,0,,另外一个会命名为DeviceFamily-Desktop.
Dialogue: 0,0:03:15.87,0:03:18.27,Default,,0,0,0,,然后我们可以添加一系列的页面文件
Dialogue: 0,0:03:18.27,0:03:23.27,Default,,0,0,0,,在运行的时候，它会判断当前是什么设备
Dialogue: 0,0:03:24.05,0:03:27.58,Default,,0,0,0,,然后恰当的载入对应的页面文件
Dialogue: 0,0:03:27.58,0:03:31.18,Default,,0,0,0,,你也可以把页面文件放在根目录下
Dialogue: 0,0:03:31.18,0:03:35.88,Default,,0,0,0,,然后扩展它们对应的后缀名（对应不同的设备）
Dialogue: 0,0:03:35.88,0:03:40.88,Default,,0,0,0,,.DeviceFamily-Mobile.xaml或者DeviceFamily-Desktop.xaml
Dialogue: 0,0:03:41.58,0:03:43.28,Default,,0,0,0,,这可能会帮到你
Dialogue: 0,0:03:43.29,0:03:44.76,Default,,0,0,0,,当你有一到两个页面文件
Dialogue: 0,0:03:44.76,0:03:46.63,Default,,0,0,0,,然后你又不想创建那么多文件夹去放置它们
Dialogue: 0,0:03:46.63,0:03:51.63,Default,,0,0,0,,然后我会给各位一些资源
Dialogue: 0,0:03:51.89,0:03:56.08,Default,,0,0,0,,在这个网址里有关于上面所说的这些更详细的内容
Dialogue: 0,0:03:56.08,0:03:59.82,Default,,0,0,0,,OK！下一个我们要讲到的是数据绑定
Dialogue: 0,0:03:59.82,0:04:04.82,Default,,0,0,0,,我说过基础的数据绑定
Dialogue: 0,0:04:05.26,0:04:10.06,Default,,0,0,0,,会允许你绑定一系列的数据, 所以一系列的POCO（Plain Old Clr Objects）
Dialogue: 0,0:04:10.06,0:04:15.06,Default,,0,0,0,,会知道如何去呈现内容
Dialogue: 0,0:04:19.55,0:04:22.34,Default,,0,0,0,,现在我会展示一下GridView 和ListView控制
Dialogue: 0,0:04:22.34,0:04:27.18,Default,,0,0,0,,组合框也可以这样使用
Dialogue: 0,0:04:27.18,0:04:28.55,Default,,0,0,0,,还有其他的一些控件
Dialogue: 0,0:04:28.55,0:04:31.52,Default,,0,0,0,,我先来粘贴一些代码
Dialogue: 0,0:04:31.52,0:04:35.52,Default,,0,0,0,,这里我需要一些XAML的代码
Dialogue: 0,0:04:35.52,0:04:39.83,Default,,0,0,0,,首先我会添加一个命名空间“data“
Dialogue: 0,0:04:39.83,0:04:42.69,Default,,0,0,0,,指向一个在项目中叫做Models的子文件夹
Dialogue: 0,0:04:42.69,0:04:45.45,Default,,0,0,0,,我会放置一些类文件在里面
Dialogue: 0,0:04:45.45,0:04:50.45,Default,,0,0,0,,可以被项目进行引用
Dialogue: 0,0:04:50.53,0:04:53.34,Default,,0,0,0,,然后你可以看见我已经创建了一个GridView
Dialogue: 0,0:04:53.35,0:04:55.50,Default,,0,0,0,,并且也已经设置了ItemTemplate
Dialogue: 0,0:04:55.50,0:04:58.89,Default,,0,0,0,,等于一个叫BookDataTemplate的StaticResource
Dialogue: 0,0:04:58.89,0:05:02.30,Default,,0,0,0,,在Book集合中每个Book的实例对象
Dialogue: 0,0:05:02.30,0:05:05.25,Default,,0,0,0,,会使用这些数据模板呈现内容
Dialogue: 0,0:05:05.25,0:05:07.98,Default,,0,0,0,,在这个Page.Resources里面
Dialogue: 0,0:05:07.98,0:05:08.99,Default,,0,0,0,,在这个StackPanel里面
Dialogue: 0,0:05:08.99,0:05:10.89,Default,,0,0,0,,有一张图像和两个文本框
Dialogue: 0,0:05:10.89,0:05:13.42,Default,,0,0,0,,你可以看见我引用了不同的属性
Dialogue: 0,0:05:13.42,0:05:17.07,Default,,0,0,0,,或者是一个POCO对象, 在这个例子中是书的实例对象
Dialogue: 0,0:05:17.07,0:05:21.91,Default,,0,0,0,,为了将这些属性绑定到
Dialogue: 0,0:05:21.91,0:05:25.04,Default,,0,0,0,,对应的XAML控制上
Dialogue: 0,0:05:25.05,0:05:26.49,Default,,0,0,0,,在这个例子中是一个图像控制
Dialogue: 0,0:05:26.49,0:05:28.92,Default,,0,0,0,,我想要给这些图像一个对应的路径
Dialogue: 0,0:05:28.92,0:05:30.52,Default,,0,0,0,,设置它们的路径为了取得文件
Dialogue: 0,0:05:30.52,0:05:33.06,Default,,0,0,0,,对于文本框，我想要抓取一些数据
Dialogue: 0,0:05:33.06,0:05:34.79,Default,,0,0,0,,在这个例子中就是标题和作者
Dialogue: 0,0:05:34.80,0:05:38.09,Default,,0,0,0,,然后我把它们设置为文本框的文本属性
Dialogue: 0,0:05:38.10,0:05:38.85,Default,,0,0,0,,Okay.
Dialogue: 0,0:05:38.85,0:05:40.33,Default,,0,0,0,,还有一件事就是
Dialogue: 0,0:05:40.33,0:05:41.56,Default,,0,0,0,,我想要指出
Dialogue: 0,0:05:41.56,0:05:43.63,Default,,0,0,0,,在代码背后你所需要做的工作
Dialogue: 0,0:05:43.64,0:05:47.19,Default,,0,0,0,,我想要展示两点给各位
Dialogue: 0,0:05:47.19,0:05:49.48,Default,,0,0,0,,首先是我如何
Dialogue: 0,0:05:49.48,0:05:51.89,Default,,0,0,0,,得到一组Book集合
Dialogue: 0,0:05:51.89,0:05:55.47,Default,,0,0,0,,我在项目中创建了一个叫做BookManager的类
Dialogue: 0,0:05:55.47,0:05:56.84,Default,,0,0,0,,就像我们看见的那样 
Dialogue: 0,0:05:56.84,0:06:03.74,Default,,0,0,0,,它负责在Book集合中返回Book的实例
Dialogue: 0,0:06:04.04,0:06:08.67,Default,,0,0,0,,同时也把它们设置为这个类中的一个属性
Dialogue: 0,0:06:08.67,0:06:12.62,Default,,0,0,0,,所以我可以在XAML中对它进行绑定
Dialogue: 0,0:06:12.62,0:06:14.52,Default,,0,0,0,,还有一件事，你应该记得
Dialogue: 0,0:06:14.52,0:06:16.88,Default,,0,0,0,,在GridView中，我尝试去控制
Dialogue: 0,0:06:16.88,0:06:19.52,Default,,0,0,0,,一个特定的控件的单击事件
Dialogue: 0,0:06:19.52,0:06:21.79,Default,,0,0,0,,所以当有人单击的时候，我希望可以控制这个事件
Dialogue: 0,0:06:21.79,0:06:25.35,Default,,0,0,0,,首先我需要将单击事件激活（IsItemClickEnabled=”True“）
Dialogue: 0,0:06:25.35,0:06:30.12,Default,,0,0,0,,然后添加一个ItemClick的处理器
Dialogue: 0,0:06:30.12,0:06:32.96,Default,,0,0,0,,这里实际上我已经控制了一个单击事件
Dialogue: 0,0:06:32.96,0:06:36.24,Default,,0,0,0,,这些需要使用这个传进来的事件参数（ItemEventClickArgs）
Dialogue: 0,0:06:36.24,0:06:38.28,Default,,0,0,0,,从而得到单击的对象
Dialogue: 0,0:06:38.28,0:06:40.66,Default,,0,0,0,,然后将它转成Book类型
Dialogue: 0,0:06:40.66,0:06:42.58,Default,,0,0,0,,所以我现在有了一个Book类型的对象
Dialogue: 0,0:06:42.58,0:06:44.75,Default,,0,0,0,,这样就可以得到我想要的属性了
Dialogue: 0,0:06:44.75,0:06:46.62,Default,,0,0,0,,然后顺利工作！
Dialogue: 0,0:06:46.63,0:06:49.22,Default,,0,0,0,,最后，额，其实不是最后一点(-｡-;)
Dialogue: 0,0:06:49.22,0:06:51.84,Default,,0,0,0,,让我们先来谈谈这个简单的一点
Dialogue: 0,0:06:51.84,0:06:55.02,Default,,0,0,0,,我说过一个Book集合很好
Dialogue: 0,0:06:55.02,0:06:57.12,Default,,0,0,0,,但如果你的 List 的内容在之后会有改动 
Dialogue: 0,0:06:57.12,0:06:59.11,Default,,0,0,0,,你需要使用
Dialogue: 0,0:06:59.11,0:06:59.94,Default,,0,0,0,,另外一种类型的集合
Dialogue: 0,0:06:59.94,0:07:03.00,Default,,0,0,0,,你需要使用ObservableCollection, okay.
Dialogue: 0,0:07:03.00,0:07:07.83,Default,,0,0,0,,最后，我们说到了
Dialogue: 0,0:07:07.83,0:07:09.56,Default,,0,0,0,,一些方法去把这些整合到一起
Dialogue: 0,0:07:09.56,0:07:12.49,Default,,0,0,0,,举个例子，如果你打算使用这些项目模板
Dialogue: 0,0:07:12.49,0:07:17.29,Default,,0,0,0,,在你的应用中,比如  GridView, ListView, ComboBox,
Dialogue: 0,0:07:17.29,0:07:20.62,Default,,0,0,0,,无论是哪种控件 ,另外你还打算
Dialogue: 0,0:07:20.62,0:07:25.16,Default,,0,0,0,,修改在数据模板中的这些控件的尺寸
Dialogue: 0,0:07:25.16,0:07:28.97,Default,,0,0,0,,然后你不仅需要在页面中去定义它
Dialogue: 0,0:07:28.97,0:07:32.11,Default,,0,0,0,,还需要把数据模板连接到用户的控制上
Dialogue: 0,0:07:32.12,0:07:34.21,Default,,0,0,0,,然后再用户控制中你可以创建
Dialogue: 0,0:07:34.21,0:07:37.13,Default,,0,0,0,,一个视觉管理器，里面包含多种状态
Dialogue: 0,0:07:37.13,0:07:39.16,Default,,0,0,0,,还有触发器和其他的东西
Dialogue: 0,0:07:39.16,0:07:42.96,Default,,0,0,0,,我想我已经展示完了~，大概就是五个步骤
Dialogue: 0,0:07:42.96,0:07:47.04,Default,,0,0,0,,让我先把这些复制过来
Dialogue: 0,0:07:47.04,0:07:48.52,Default,,0,0,0,,Okay！第一步就是
Dialogue: 0,0:07:48.52,0:07:50.64,Default,,0,0,0,,你需要在你的项目中创建一个用户控制（User Control）
Dialogue: 0,0:07:50.64,0:07:51.86,Default,,0,0,0,,然后给他命名一个好的名字
Dialogue: 0,0:07:51.87,0:07:53.66,Default,,0,0,0,,然后你需要剪切
Dialogue: 0,0:07:53.66,0:07:56.56,Default,,0,0,0,,一些数据模板内的内容，比如你的MainPage.xaml
Dialogue: 0,0:07:56.56,0:07:58.57,Default,,0,0,0,,然后粘贴到你的用户控制中
Dialogue: 0,0:07:58.57,0:08:00.56,Default,,0,0,0,,然后你需要引用你的用户控制
Dialogue: 0,0:08:00.56,0:08:02.78,Default,,0,0,0,,从你的数据模板中
Dialogue: 0,0:08:02.78,0:08:05.16,Default,,0,0,0,,这样无论你从数据模板中删除什么也不会有影响
Dialogue: 0,0:08:05.17,0:08:08.78,Default,,0,0,0,,现在就可以进行替代
Dialogue: 0,0:08:08.78,0:08:10.63,Default,,0,0,0,,用你创建的用户控制中的名称
Dialogue: 0,0:08:10.63,0:08:14.68,Default,,0,0,0,,在这个例子中，我会将用户控制（User Control）命名为ContactTemplate,
Dialogue: 0,0:08:14.68,0:08:17.06,Default,,0,0,0,,所以现在我想要引用它
Dialogue: 0,0:08:17.06,0:08:20.03,Default,,0,0,0,,同时我还把这些属性引用进来
Dialogue: 0,0:08:20.03,0:08:22.88,Default,,0,0,0,,我不确定你需要使用它们，但是你可以引用它们
Dialogue: 0,0:08:22.88,0:08:24.34,Default,,0,0,0,,以防万一你需要确保
Dialogue: 0,0:08:24.34,0:08:27.66,Default,,0,0,0,,你的控制延伸到了整个可用区域
Dialogue: 0,0:08:27.66,0:08:31.14,Default,,0,0,0,,然后下一步就是在用户控制中我们需要
Dialogue: 0,0:08:31.14,0:08:33.80,Default,,0,0,0,,将所有x:Bind的状态进行修改
Dialogue: 0,0:08:33.80,0:08:35.35,Default,,0,0,0,,改为你之前已经创建了的
Dialogue: 0,0:08:35.35,0:08:40.35,Default,,0,0,0,,你需要添加为对象.属性（ Object.Property）标记
Dialogue: 0,0:08:40.35,0:08:43.26,Default,,0,0,0,,所以假设你现在正在使用一个Contact类
Dialogue: 0,0:08:43.26,0:08:47.01,Default,,0,0,0,,或者Book类，那么你需要添加Contact 或者Book 点
Dialogue: 0,0:08:47.01,0:08:48.47,Default,,0,0,0,,然后接上对应的属性名
Dialogue: 0,0:08:48.47,0:08:50.74,Default,,0,0,0,,对应你已经绑定了得属性
Dialogue: 0,0:08:50.75,0:08:52.24,Default,,0,0,0,,最后一件事你需要做的就是
Dialogue: 0,0:08:52.24,0:08:55.75,Default,,0,0,0,,回到用户控制代码后面
Dialogue: 0,0:08:55.75,0:09:00.11,Default,,0,0,0,,去创建一个公共属性
Dialogue: 0,0:09:00.11,0:09:01.87,Default,,0,0,0,,可以从用户控制中进行引用
Dialogue: 0,0:09:01.88,0:09:05.33,Default,,0,0,0,,比如一个 POCO 的实例对象
Dialogue: 0,0:09:05.33,0:09:10.15,Default,,0,0,0,,所以在这个例子中就是一个Contact类型的Contact属性
Dialogue: 0,0:09:10.15,0:09:12.17,Default,,0,0,0,,从已经创建的Models文件夹
Dialogue: 0,0:09:12.17,0:09:15.09,Default,,0,0,0,,你会返回数据内容
Dialogue: 0,0:09:15.10,0:09:16.95,Default,,0,0,0,,数据内容会
Dialogue: 0,0:09:16.95,0:09:20.23,Default,,0,0,0,,会从 MainPage.xaml传递到你的用户控制中
Dialogue: 0,0:09:20.23,0:09:22.25,Default,,0,0,0,,同时提供数据内容
Dialogue: 0,0:09:22.25,0:09:24.09,Default,,0,0,0,,那些可以被真实利用的
Dialogue: 0,0:09:24.09,0:09:27.22,Default,,0,0,0,,这些属性无论是什么类型都会传递进来
Dialogue: 0,0:09:27.22,0:09:29.43,Default,,0,0,0,,比如在这个例子中就是Contact类型
Dialogue: 0,0:09:29.43,0:09:31.71,Default,,0,0,0,,或者是Book类型, 取决于你的POCO对象是什么
Dialogue: 0,0:09:31.72,0:09:36.72,Default,,0,0,0,,最后，在用户控制的构造函数中
Dialogue: 0,0:09:37.08,0:09:39.11,Default,,0,0,0,,你需要添加这样一行代码
Dialogue: 0,0:09:39.11,0:09:43.94,Default,,0,0,0,,这实质上会控制DataContextChanged事件
Dialogue: 0,0:09:43.94,0:09:47.45,Default,,0,0,0,,对于用户控制，同时它会调用
Dialogue: 0,0:09:47.45,0:09:49.40,Default,,0,0,0,,一个lamda表达式去调用
Dialogue: 0,0:09:49.40,0:09:51.84,Default,,0,0,0,,Bindings.Update, 它会说
Dialogue: 0,0:09:51.84,0:09:54.14,Default,,0,0,0,,"嘿！刷新一下你自己！然后就能得到数据了"
Dialogue: 0,0:09:54.15,0:09:56.02,Default,,0,0,0,,Okay, 你可以使用全部这些东西
Dialogue: 0,0:09:56.02,0:10:00.15,Default,,0,0,0,,这大部分东西实际上，我把它们叫做
Dialogue: 0,0:10:00.15,0:10:03.48,Default,,0,0,0,,样板代码（boiler plate code）, 这是一个好理由
Dialogue: 0,0:10:03.48,0:10:04.95,Default,,0,0,0,,去拥有这样一个备忘单
Dialogue: 0,0:10:04.95,0:10:06.22,Default,,0,0,0,,所以当你有需要的时候可以复制你想要的代码
Dialogue: 0,0:10:06.22,0:10:07.36,Default,,0,0,0,,然后粘贴到你的项目中
Dialogue: 0,0:10:07.36,0:10:09.53,Default,,0,0,0,,然后加以修改
Dialogue: 0,0:10:09.53,0:10:12.12,Default,,0,0,0,,Okay, 就是上面这些了
Dialogue: 0,0:10:12.12,0:10:15.31,Default,,0,0,0,,大概有六节课程这样
Dialogue: 0,0:10:15.31,0:10:18.35,Default,,0,0,0,,很好用，而且也不是太难的东西吧？
Dialogue: 0,0:10:18.35,0:10:19.99,Default,,0,0,0,,我已经将它们进行细化
Dialogue: 0,0:10:19.99,0:10:24.71,Default,,0,0,0,,你很快会在挑战中用到这些概念
Dialogue: 0,0:10:24.71,0:10:25.81,Default,,0,0,0,,真的是一个大挑战哦！
Dialogue: 0,0:10:25.82,0:10:28.24,Default,,0,0,0,,可能会最少花费你几个小时的时间
Dialogue: 0,0:10:28.24,0:10:29.32,Default,,0,0,0,,去完成它
Dialogue: 0,0:10:29.32,0:10:32.69,Default,,0,0,0,,你没有理由不去尝试这个挑战
Dialogue: 0,0:10:32.69,0:10:35.67,Default,,0,0,0,,你需要一个真实的挑战去促使你思考
Dialogue: 0,0:10:35.68,0:10:38.38,Default,,0,0,0,,去巩固这些概念，Okay
Dialogue: 0,0:10:38.38,0:10:41.42,Default,,0,0,0,,我们会在下一个课程中提到
Dialogue: 0,0:10:41.42,0:10:42.75,Default,,0,0,0,,在下一个挑战~
Dialogue: 0,0:10:42.75,0:10:44.47,Default,,0,0,0,,谢谢
