[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: uwp39AdaptiveLayoutForDeviceFamilies_high.mp4
Video File: uwp39AdaptiveLayoutForDeviceFamilies_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Scroll Position: 58
Active Line: 61
Video Position: 11190

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Microsoft YaHei,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,自适应布局与设备具体视图
Dialogue: 0,0:00:05.00,0:00:09.50,Default,,0,0,0,,大家好呀，我还是你们的老朋友bob tabor
Dialogue: 0,0:00:09.60,0:00:13.28,Default,,0,0,0,,我们之前讲了怎样运用自适应触发器（adaptive trigger）
Dialogue: 0,0:00:13.44,0:00:20.50,Default,,0,0,0,,和视觉状态管理器（visual state manager）来改变当前视窗大小下的布局
Dialogue: 0,0:00:20.68,0:00:34.44,Default,,0,0,0,,并且我们还将它们进行创新在app中进行大型的改动
Dialogue: 0,0:00:34.44,0:00:36.44,Default,,0,0,0,,还通过基于不同布局中的特定触发器
Dialogue: 0,0:00:36.44,0:00:46.16,Default,,0,0,0,,将一系列的stackpanel放入格框中的不同元件
Dialogue: 0,0:00:46.16,0:00:52.88,Default,,0,0,0,,还有xxx的改变，而且还很不错哟
Dialogue: 0,0:00:52.88,0:00:58.78,Default,,0,0,0,,在这节课中我们要介绍另一种技巧：
Dialogue: 0,0:00:58.78,0:01:05.32,Default,,0,0,0,,创建适用于特定设备类型的app专用视图
Dialogue: 0,0:01:05.32,0:01:17.05,Default,,0,0,0,,并且当程序运行时，将会根据当前运行设备的类型选择特定试图，也被称为“设备相关试图”
Dialogue: 0,0:01:17.05,0:01:19.05,Default,,0,0,0,,这个技巧其实很简单
Dialogue: 0,0:01:19.05,0:01:23.88,Default,,0,0,0,,巨硬把它弄得很简单以便大家用，\N不过也有一些高级技巧
Dialogue: 0,0:01:23.88,0:01:31.71,Default,,0,0,0,,待会我会展示一篇讲相关话题的文章
Dialogue: 0,0:01:31.71,0:01:35.28,Default,,0,0,0,,不过先来看一下我做好的小样
Dialogue: 0,0:01:35.28,0:01:42.77,Default,,0,0,0,,就像你们看到的这样，这里只有一个非常基础简单的app在桌面运行
Dialogue: 0,0:01:42.77,0:01:45.94,Default,,0,0,0,,文字为"Hello Desktop Device SpecificView"
Dialogue: 0,0:01:45.94,0:01:51.00,Default,,0,0,0,,背景为蓝色，字号也比较大
Dialogue: 0,0:01:51.05,0:02:00.40,Default,,0,0,0,,当需要更换运行设备时，选择其中一个移动设备模拟器\N并调试app，然后再来run一下程序看看
Dialogue: 0,0:02:02.40,0:02:14.08,Default,,0,0,0,,可以看到现在背景是红色，文本变为了“Hello Mobile DeviceSpecificView" 并且字号也变小了
Dialogue: 0,0:02:14.08,0:02:18.60,Default,,0,0,0,,大概看一下的话，你可能会觉得这些并没有什么区别
Dialogue: 0,0:02:18.82,0:02:24.08,Default,,0,0,0,,至于结果而言，用我们之前所学的技巧来看， 这样说也没有错
Dialogue: 0,0:02:24.08,0:02:33.65,Default,,0,0,0,,但是，注意看里面的执行命令（Implementation），记住这是我为了讲解\N例子所可以创建的最简单的了
Dialogue: 0,0:02:33.88,0:02:36.68,Default,,0,0,0,,你可以做出比这个更复杂的
Dialogue: 0,0:02:36.94,0:02:45.60,Default,,0,0,0,,在这里我在项目中又创建了两个新的文件夹，\N一个叫DeviceFamily-Desktop，另一个是 DeviceFamily-Mobile 
Dialogue: 0,0:02:45.60,0:02:56.00,Default,,0,0,0,,通过创建这些文件夹，任何我添加进去的页面都可以在app运行的时候被使用
Dialogue: 0,0:02:56.00,0:02:59.20,Default,,0,0,0,,可以看到我创建了两个MainPage.xaml
Dialogue: 0,0:02:59.20,0:03:06.97,Default,,0,0,0,,在第一个desktop的文件夹中，我添加了背景为蓝色的Grid
Dialogue: 0,0:03:06.97,0:03:11.11,Default,,0,0,0,,还有内容与字号都不同的文本框
Dialogue: 0,0:03:11.11,0:03:20.40,Default,,0,0,0,,你可能会觉得“啊，这个看起来比用视觉状态管理器(VisualStateManager)\N和自适应触发器(AdaptiveTriggers)清楚多了”，没错就是这样哒！
Dialogue: 0,0:03:20.40,0:03:28.11,Default,,0,0,0,,我觉得这也是一个很好的福利，尤其是你要根据设备来大规模的调整布局的时候
Dialogue: 0,0:03:28.11,0:03:33.60,Default,,0,0,0,,这里是Mobile文件夹里的MainPage.xaml，也就是所谓的第二个
Dialogue: 0,0:03:33.74,0:03:37.48,Default,,0,0,0,,我们先来看一眼，这里我把背景设为了红色
Dialogue: 0,0:03:37.48,0:03:41.68,Default,,0,0,0,,文本框里的内容和字号也变了
Dialogue: 0,0:03:41.68,0:03:45.77,Default,,0,0,0,,没有视觉状态管理器，也没有自适应触发器，很简单吧
Dialogue: 0,0:03:45.77,0:03:59.42,Default,,0,0,0,,你可以根据对于使用设备（桌面端或手机端）\N的预测使用完全不同的控件布局
Dialogue: 0,0:03:59.42,0:04:08.62,Default,,0,0,0,,虽然这里我创建的这个简易的例子没有用到视觉状态管理器和自适应触发器
Dialogue: 0,0:04:08.62,0:04:12.40,Default,,0,0,0,,你可能还是想在app中用到他们
Dialogue: 0,0:04:12.40,0:04:16.94,Default,,0,0,0,,毕竟有很多种屏幕分辨率，就算在同一种设备中
Dialogue: 0,0:04:16.94,0:04:27.45,Default,,0,0,0,,所以要记得，这两种方法虽然有一部分可以互相替代，\N但并不是完全一样的，你可以将它们结合起来应用
Dialogue: 0,0:04:27.45,0:04:38.11,Default,,0,0,0,,比如你在1080p手机上显示的功能
Dialogue: 0,0:04:38.11,0:04:43.02,Default,,0,0,0,,和在1080p的桌面显示的功能也许就不同，你get了嘛
Dialogue: 0,0:04:43.02,0:04:46.65,Default,,0,0,0,,因为当你拿着实体设备的时候，就像我拿的这个
Dialogue: 0,0:04:46.65,0:04:56.77,Default,,0,0,0,,大拇指会放在下面，所以你可能就要根据多数用户的习惯这一点来改变布局
Dialogue: 0,0:04:56.77,0:05:05.88,Default,,0,0,0,,所以就可能会将上半部分只作显示用，\N而在下面多添加一些控件用来输入或者选择
Dialogue: 0,0:05:05.88,0:05:12.08,Default,,0,0,0,,而在桌面端时，因为有鼠标所以能在整个屏幕上滑动，\N很多东西的位置就变得相对无所谓了
Dialogue: 0,0:05:12.22,0:05:17.60,Default,,0,0,0,,所以要记住，他们不是完全独立的，你可以将它们结合并使用
Dialogue: 0,0:05:17.60,0:05:26.74,Default,,0,0,0,,啊我之前说过要提供一个学习这个技巧的好资源，让我先把URL放出来 
Dialogue: 0,0:05:26.74,0:05:32.60,Default,,0,0,0,,这篇文章的作者是Igor Ralic
Dialogue: 0,0:05:32.60,0:05:39.14,Default,,0,0,0,,在这里我们来看一下，因为这个例子其实还可以更上两层楼（误）
Dialogue: 0,0:05:39.14,0:05:48.00,Default,,0,0,0,,首先，我们只说到了利用这两个文件夹\N(DeviceFamily.Mobile和DeviceFamily.Desktop)
Dialogue: 0,0:05:48.00,0:05:52.65,Default,,0,0,0,,但是你还可以将所有东西放在根文件夹里
Dialogue: 0,0:05:52.65,0:06:04.85,Default,,0,0,0,,然后将DeviceFamily.Mobile.xaml 或者\NDeviceFamily.Desktop.xaml附上，效果是一样的
Dialogue: 0,0:06:04.85,0:06:13.40,Default,,0,0,0,,如果你有连个相同名字的文件夹，或者有一个像上面那样更改了命名
Dialogue: 0,0:06:13.40,0:06:19.48,Default,,0,0,0,,并且你有一个包含"MainPage.xaml"的"DeviceFamily-Mobile"文件夹
Dialogue: 0,0:06:19.60,0:06:24.51,Default,,0,0,0,,你可以来看一看这个文章，也就是我说的高级方案
Dialogue: 0,0:06:24.51,0:06:36.14,Default,,0,0,0,,这里面他讲了如何用初始化的ComponentEvenHandler\N在运行时来选择MainPage的版本
Dialogue: 0,0:06:36.31,0:06:40.31,Default,,0,0,0,,如果你感兴趣就一定要自己去看哟
Dialogue: 0,0:06:40.31,0:06:49.37,Default,,0,0,0,,希望这些你都懂啦然后也对你有所帮助，这样你又有了一种自适应布局的工具
Dialogue: 0,0:06:49.57,0:06:55.88,Default,,0,0,0,,而且它还可以和之前学的视觉状态管理器和自适应触发器相结合
Dialogue: 0,0:06:55.94,0:07:01.91,Default,,0,0,0,,今天的课就是这样啦，下一节课见！
Dialogue: 0,0:07:01.91,0:07:03.91,Default,,0,0,0,,巨硬大法好！
