1
00:00:00,000 --> 00:00:04,950
XAML主题
翻译：Kinroad 校对：？？？

2
00:00:04,950 --> 00:00:08,900
嗨, 我是 Bob Tabor 来自 www.learnvisualstudio.net

3
00:00:09,250 --> 00:00:10,950
目前我们只了解了样式绑定

4
00:00:10,950 --> 00:00:13,320
使用绑定语法如

5
00:00:13,320 --> 00:00:16,120
花括号（静态资源）

6
00:00:16,120 --> 00:00:18,750
然后是一些样式名称

7
00:00:18,750 --> 00:00:22,720
我们之前提到过的这种绑定方式

8
00:00:22,720 --> 00:00:25,550
这种静态资源绑定

9
00:00:25,550 --> 00:00:28,150
只在app首次运行时进行一次

10
00:00:28,150 --> 00:00:30,920
因此它是静态资源，它不会变了

11
00:00:30,920 --> 00:00:33,340
在app的生命周期里

12
00:00:33,790 --> 00:00:39,070
还有些声明非静态绑定方法的例子

13
00:00:39,350 --> 00:00:44,750
比如，有个主题资源，类似于静态资源，

14
00:00:44,750 --> 00:00:49,980
但资源在主题改变时被赋值

15
00:00:49,980 --> 00:00:51,750
所以你觉得什么是主题呢？

16
00:00:51,750 --> 00:00:58,710
主题是一个由终端用户在操作系统层选择的颜色集合

17
00:00:58,710 --> 00:01:02,150
所以在Windows10桌面端你可以打开

18
00:01:02,150 --> 00:01:05,120
设置->个性化

19
00:01:05,120 --> 00:01:08,450
这里可以选择一个背景色

20
00:01:08,450 --> 00:01:13,420
我想还可以有个强调色

21
00:01:13,420 --> 00:01:17,150
在这个例子里我选了黑色作为背景色

22
00:01:17,150 --> 00:01:19,340
然后蓝色作强调色

23
00:01:20,590 --> 00:01:24,890
你还可以随时随意定制手机和Xbox One

24
00:01:24,890 --> 00:01:27,250
通过选择背景和强调色

25
00:01:27,250 --> 00:01:29,850
它们有不同的设置

26
00:01:29,850 --> 00:01:31,810
但总的来说终端用户可以

27
00:01:31,810 --> 00:01:34,420
在所有Windows10设备上对颜色进行个性化定制

28
00:01:34,420 --> 00:01:38,050
当然开发者也可以

29
00:01:38,050 --> 00:01:41,920
你可以选择在你app里利用这些颜色选择

30
00:01:41,920 --> 00:01:46,690
那么你的app就可以符合用户的喜好

31
00:01:46,690 --> 00:01:49,190
这不是必须的，但你最好这样做

32
00:01:49,190 --> 00:01:52,650
除非你带着特定的品牌目标

33
00:01:52,650 --> 00:01:56,820
所以有一组颜色允许你...

34
00:01:56,820 --> 00:01:59,190
准确地说是有一组样式允许你

35
00:01:59,190 --> 00:02:03,340
利用用户选择的那些颜色

36
00:02:03,790 --> 00:02:08,320
找到定义这些样式的资源字典

37
00:02:08,320 --> 00:02:09,790
这有点难办

38
00:02:09,790 --> 00:02:11,940
这也是这节课的主题

39
00:02:12,450 --> 00:02:14,882
我们来看看这个...先把这个关掉

40
00:02:14,882 --> 00:02:17,720
打开MainPage.xaml

41
00:02:17,720 --> 00:02:20,760
在我命名为ThemeResources的新项目下

42
00:02:24,010 --> 00:02:26,050
如果你看一眼这个Grid

43
00:02:26,050 --> 00:02:30,480
在你创建一个全新的空白模板app时

44
00:02:30,480 --> 00:02:34,350
你会看到Grid利用了一个主题资源

45
00:02:34,350 --> 00:02:39,120
叫做ApplicationPageBackgroundThemeBrush

46
00:02:39,120 --> 00:02:42,200
好了，现在如果你把鼠标放在这个词的位置

47
00:02:42,200 --> 00:02:45,490
（ApplicationPageBackgroundThemeBrush）

48
00:02:45,490 --> 00:02:47,910
然后按F12

49
00:02:47,910 --> 00:02:50,890
会预览打开这个叫做generic.xaml的文件

50
00:02:50,890 --> 00:02:52,720
如果把鼠标停在上面...

51
00:02:52,720 --> 00:02:54,950
啊哦...我还是双击它吧

52
00:02:54,950 --> 00:02:56,300
这样可以么【怀疑脸

53
00:02:56,690 --> 00:02:58,850
好了，如果我把鼠标停在上面

54
00:02:58,850 --> 00:03:01,790
可以看到这个文件的完整路径

55
00:03:01,790 --> 00:03:06,290
在我这个系统上是在这儿

56
00:03:06,290 --> 00:03:15,220
Program Files (x86)\Windows Kits\10\DesignTime\CommonConfiguration\ Neutral\UAP (version number)\Generic\generic.xaml

57
00:03:15,370 --> 00:03:19,520
OK，然后你看这儿

58
00:03:19,520 --> 00:03:21,820
这里用一个关键词定义了个SolidColorBrush

59
00:03:21,820 --> 00:03:24,890
这个关键词被自动用在网格里

60
00:03:24,890 --> 00:03:27,320
然后设置它的颜色

61
00:03:27,320 --> 00:03:30,840
白色，就是FFFFFF

62
00:03:33,240 --> 00:03:35,650
这节课我主要准备讲

63
00:03:35,650 --> 00:03:40,720
或者说讨论 定义为主题资源的颜色

64
00:03:40,720 --> 00:03:42,920
当然，还可以有不同的定义类型

65
00:03:42,920 --> 00:03:46,990
在这个xaml文件里，包括字体

66
00:03:46,990 --> 00:03:50,020
粗细、字号、宽窄

67
00:03:50,020 --> 00:03:58,150
这里面甚至还定义了样式、表现形式和布局

68
00:03:58,150 --> 00:04:00,390
（为所有XAML控件提供）

69
00:04:00,390 --> 00:04:03,090
所以如果你想知道为什么这个用这种方式定义样式

70
00:04:03,090 --> 00:04:05,420
或者，为什么它是以这种方式这样表现的

71
00:04:05,420 --> 00:04:08,920
你可以在这个XAML文件查看

72
00:04:08,920 --> 00:04:10,950
可以重复我之前的方法来获得

73
00:04:10,950 --> 00:04:13,640
你可以看到这是个超长的文件

74
00:04:14,250 --> 00:04:17,800
有14,000多行代码

75
00:04:18,290 --> 00:04:19,790
即使粗略看完、搞清楚这些代码在干嘛

76
00:04:19,790 --> 00:04:22,640
都要花一整天时间

77
00:04:23,250 --> 00:04:25,550
但无论如何，你利用这些样式的方法是

78
00:04:25,550 --> 00:04:29,620
在你自己的样式中进行内部引用

79
00:04:29,620 --> 00:04:32,350
那么现在，我们来

80
00:04:32,350 --> 00:04:35,990
在这里为页面创建一个小的资源字典

81
00:04:35,990 --> 00:04:40,200
页面-资源

82
00:04:42,290 --> 00:04:44,020
这里面我想创建

83
00:04:44,020 --> 00:04:47,740
一个叫做AccentBrush的SolidColorBrush

84
00:04:54,210 --> 00:04:58,140
然后设置颜色为...

85
00:04:59,150 --> 00:05:04,150
叫做SystemAccentColor的一个主题资源

86
00:05:09,410 --> 00:05:11,120
好了，那么这个SystemAccentColor

87
00:05:11,120 --> 00:05:14,520
为获取用户选择的强调色提供入口

88
00:05:14,520 --> 00:05:18,750
那我来添加一个...举个栗子

89
00:05:18,750 --> 00:05:23,750
这里添加一个矩形然后设置宽度=100

90
00:05:24,010 --> 00:05:29,010
然后高度=100

91
00:05:30,420 --> 00:05:34,770
然后再设置填充等于系统资源...

92
00:05:36,550 --> 00:05:40,850
更应该说是等于叫做AccentBrush的

93
00:05:40,850 --> 00:05:43,260
静态资源

94
00:05:45,390 --> 00:05:48,290
来看一眼设计器

95
00:05:48,290 --> 00:05:50,320
可以看到它选择了

96
00:05:50,320 --> 00:05:52,490
与Visual Studio标签内颜色一样的蓝色

97
00:05:52,490 --> 00:05:54,910
因为Visual Studio正在

98
00:05:54,910 --> 00:05:57,900
把这种蓝色用在选中的标签上

99
00:05:58,420 --> 00:06:00,520
同样，也用在最下面状态栏

100
00:06:00,520 --> 00:06:03,600
和其他一些地方

101
00:06:04,520 --> 00:06:06,890
你可以看到我如何用主题资源

102
00:06:06,890 --> 00:06:10,050
定义一个静态资源

103
00:06:10,050 --> 00:06:11,550
但我也可以直接用到

104
00:06:11,550 --> 00:06:13,290
主题资源

105
00:06:13,290 --> 00:06:17,640
那我直接复制这段到这儿作为替代

106
00:06:21,010 --> 00:06:22,170
像这样...

107
00:06:23,120 --> 00:06:24,770
好啦，啥都没改变

108
00:06:25,850 --> 00:06:27,950
这就是获取强调色的方法

109
00:06:27,950 --> 00:06:31,840
那像这种一般窗口的颜色怎么办呢？

110
00:06:32,520 --> 00:06:35,250
为了获取它的颜色...我先把这些复制了

111
00:06:35,250 --> 00:06:39,570
然后把这里改成50，50

112
00:06:40,020 --> 00:06:43,520
如果想要获取这种亮色

113
00:06:43,520 --> 00:06:48,050
像这样用SystemColorWindowColor

114
00:06:48,050 --> 00:06:53,050
然后内部就会有一个亮色区域代替这个蓝色框框

115
00:06:57,710 --> 00:07:01,220
这个匹配了亮色

116
00:07:01,220 --> 00:07:03,330
窗口的其他部分也一样

117
00:07:04,290 --> 00:07:05,820
我们等会来看看

118
00:07:05,820 --> 00:07:08,290
在选中主题下的运行效果

119
00:07:08,290 --> 00:07:10,882
但现在，我们...

120
00:07:10,882 --> 00:07:12,650
这个暂时先放一放...

121
00:07:12,650 --> 00:07:14,450
如果你想要包含这些主题的整个列表

122
00:07:14,450 --> 00:07:19,150
到这个XAML主题资源里面看

123
00:07:19,150 --> 00:07:21,710
等我放个地址

124
00:07:21,710 --> 00:07:24,830
↑ ↑ ↑ 地址参上 ↑ ↑ ↑

125
00:07:25,290 --> 00:07:27,290
你可以访问这个网页

126
00:07:27,290 --> 00:07:32,290
它有这些不同主题笔刷的列表

127
00:07:33,800 --> 00:07:37,040
按钮颜色的列表、还有文字啊以及杂七杂八的的东西

128
00:07:37,450 --> 00:07:39,590
你最好这个页面上花些功夫

129
00:07:39,590 --> 00:07:41,300
才好多学点

130
00:07:42,150 --> 00:07:43,520
在WP上你要做的

131
00:07:43,520 --> 00:07:45,320
有一点点不同

132
00:07:45,320 --> 00:07:48,940
我们在模拟器上运行试试

133
00:07:52,020 --> 00:07:56,490
在Windows10手机上，用户可以同时选择

134
00:07:56,490 --> 00:08:00,310
主题色和强调色

135
00:08:00,310 --> 00:08:03,390
就像在Windows10桌面端一样

136
00:08:03,390 --> 00:08:05,250
作为开发者你需要决定

137
00:08:05,250 --> 00:08:07,220
是否采用用户选择的这些颜色

138
00:08:07,220 --> 00:08:10,190
那么在手机上，用户可以选择Dark（暗系）主题

139
00:08:10,190 --> 00:08:15,190
或者是Light（明系）主题...可以在这里看到

140
00:08:15,190 --> 00:08:18,610
这里我选了暗系主题

141
00:08:18,610 --> 00:08:20,010
那我是怎么知道的呢？

142
00:08:20,010 --> 00:08:23,050
因为手机上系统窗口颜色不是白的

143
00:08:23,050 --> 00:08:25,090
而是黑的o(^▽^)o

144
00:08:25,090 --> 00:08:26,990
我们到设置里看看

145
00:08:26,990 --> 00:08:28,600
我是不是说对了

146
00:08:29,650 --> 00:08:31,070
嗯在模拟器里...

147
00:08:35,110 --> 00:08:38,470
朝下滑...哈找到设置了

148
00:08:40,250 --> 00:08:43,870
进入个性化-颜色

149
00:08:44,250 --> 00:08:45,650
你可以选择你要的主题

150
00:08:45,650 --> 00:08:47,650
明系或者是暗系

151
00:08:47,650 --> 00:08:51,720
我把主题从暗系改成明系

152
00:08:51,720 --> 00:08:55,000
然后回到我的app里....朝下滑...

153
00:08:57,390 --> 00:08:59,520
再来看看这个主题资源app

154
00:08:59,520 --> 00:09:01,490
可以发现系统颜色

155
00:09:01,490 --> 00:09:03,740
从黑色变成了白色

156
00:09:05,490 --> 00:09:07,660
明系和暗系主题的目的是

157
00:09:07,660 --> 00:09:10,920
改变软件的外层

158
00:09:10,920 --> 00:09:12,690
也即系统调用的颜色

159
00:09:12,690 --> 00:09:15,160
作为开发者你可以选择

160
00:09:15,160 --> 00:09:19,680
利用这些颜色和每个控件

161
00:09:19,680 --> 00:09:23,190
Button，TextBox这些控件

162
00:09:23,190 --> 00:09:28,280
都已经默认有了明系暗系主题

163
00:09:29,390 --> 00:09:32,250
我想...应该用的是暗系

164
00:09:32,250 --> 00:09:34,420
作为开发者，你可以

165
00:09:34,420 --> 00:09:36,450
通过App.xaml里的设置

166
00:09:36,450 --> 00:09:38,932
改变或者说选择你喜欢的主题

167
00:09:40,410 --> 00:09:42,650
我们到这儿，App.xaml

168
00:09:42,650 --> 00:09:45,050
然后可以看到默认请求主题是明系

169
00:09:45,050 --> 00:09:47,260
那我改成暗系会怎么样呢？

170
00:09:48,620 --> 00:09:50,140
再运行一次app

171
00:09:53,590 --> 00:09:55,890
现在你可以看到

172
00:09:55,890 --> 00:09:59,180
窗口的背景色是黑色

173
00:09:59,180 --> 00:10:04,050
即使我为app手动选择了明系主题

174
00:10:04,050 --> 00:10:07,000
也是这样的颜色

175
00:10:07,420 --> 00:10:10,260
这在桌面端app也同样适用

176
00:10:11,160 --> 00:10:13,790
现在我已经把

177
00:10:13,790 --> 00:10:16,150
请求主题改成了暗系

178
00:10:16,150 --> 00:10:18,790
再在我本地机器上试试

179
00:10:18,790 --> 00:10:22,750
你想想我们上次运行这个app，它背景是白色

180
00:10:22,750 --> 00:10:26,400
但现在，运行起来是黑色背景了

181
00:10:27,650 --> 00:10:29,320
我不准备示范

182
00:10:29,320 --> 00:10:32,110
如何覆写定义在generic.xaml里样式

183
00:10:32,110 --> 00:10:36,050
但你可以到我刚刚提到的网页

184
00:10:36,050 --> 00:10:38,650
了解更多

185
00:10:38,650 --> 00:10:41,590
就是这个↑ ↑ ↑

186
00:10:41,590 --> 00:10:43,660
它可以教你怎么做

187
00:10:44,120 --> 00:10:45,810
最后，我刚才提到

188
00:10:45,810 --> 00:10:48,850
你能请求一个主题

189
00:10:48,850 --> 00:10:52,010
但我想强调的事实就是，这仅仅是一个请求

190
00:10:52,010 --> 00:10:55,070
即使它的属性叫做请求主题

191
00:10:56,690 --> 00:11:00,920
如果用户在桌面端用高对比度主题

192
00:11:00,920 --> 00:11:04,290
它就会覆盖这个请求主题

193
00:11:04,290 --> 00:11:07,650
其他你为控件创建的样式也同样会被覆盖

194
00:11:07,650 --> 00:11:10,720
高对比度主题为易用性而生

195
00:11:10,720 --> 00:11:13,782
为视觉障碍人士准备

196
00:11:13,782 --> 00:11:16,420
它的优先级高于

197
00:11:16,420 --> 00:11:19,790
你为app赋予的美观性

198
00:11:19,790 --> 00:11:24,390
嗯现在我到设置，选择...

199
00:11:24,390 --> 00:11:25,990
嗯找一找高对比度

200
00:11:25,990 --> 00:11:28,040
这里，高对比度设置

201
00:11:31,050 --> 00:11:33,950
在轻松使用下面，选择高对比度

202
00:11:33,950 --> 00:11:37,632
选择#1高对比度主题

203
00:11:38,320 --> 00:11:39,900
然后应用

204
00:11:43,260 --> 00:11:44,620
我对这个不太了解

205
00:11:44,620 --> 00:11:49,020
但系统快速重启了

206
00:11:49,020 --> 00:11:53,090
现在设置界面已经完全不一样了

207
00:11:53,090 --> 00:11:55,450
Visual Studio看起来也不一样了

208
00:11:55,450 --> 00:11:58,520
这次运行我们的app

209
00:11:58,520 --> 00:12:02,990
我们在app里定义的颜色

210
00:12:02,990 --> 00:12:06,240
基本都被主题颜色取代了

211
00:12:08,220 --> 00:12:10,450
正如我刚才说的

212
00:12:10,450 --> 00:12:12,850
主题资源会促使你的app

213
00:12:12,850 --> 00:12:15,590
与用户桌面或者说其他设备的外观保持一致

214
00:12:15,590 --> 00:12:19,950
所以最好不要有自己去定义

215
00:12:19,950 --> 00:12:24,020
颜色、字体或者其他类似东西的冲动

216
00:12:24,020 --> 00:12:27,600
除非你有不得已的原因

217
00:12:28,220 --> 00:12:29,590
一种原因是

218
00:12:29,590 --> 00:12:31,250
为了你公司的品牌化

219
00:12:31,250 --> 00:12:33,182
比如Netflix的

220
00:12:33,182 --> 00:12:35,990
标志性红色搭配白色的字

221
00:12:35,990 --> 00:12:38,640
以及特殊的字体

222
00:12:39,250 --> 00:12:41,320
此外，有很多做好的样式

223
00:12:41,320 --> 00:12:44,020
你的app可以选用

224
00:12:44,020 --> 00:12:47,390
我回到这个MainPage.xaml

225
00:12:47,390 --> 00:12:49,250
然后找找...嗯有点难找...

226
00:12:49,250 --> 00:12:51,490
那我回到这里然后

227
00:12:51,490 --> 00:12:54,770
把高对比度设置改回来

228
00:12:56,150 --> 00:12:57,440
选none

229
00:13:01,610 --> 00:13:03,660
看起来舒服多啦(￣▽￣)"

230
00:13:05,390 --> 00:13:06,540
好了

231
00:13:07,450 --> 00:13:10,370
我把这个改成StackPanel

232
00:13:11,520 --> 00:13:15,750
然后添加一个TextBlock

233
00:13:15,750 --> 00:13:20,110
文本是"My App Title"，诸如此类的

234
00:13:20,110 --> 00:13:24,320
然后把样式设置成...

235
00:13:24,320 --> 00:13:26,300
快好了...

236
00:13:27,450 --> 00:13:30,650
所以我可以把一些

237
00:13:30,650 --> 00:13:33,100
默认构造好的样式

238
00:13:35,790 --> 00:13:38,150
用在generic.xaml里

239
00:13:38,150 --> 00:13:39,840
我们在这里用...

240
00:13:40,920 --> 00:13:44,840
"StaticResource HeaderTextBlockStyle"

241
00:13:46,520 --> 00:13:51,520
然后把这个调高到66%

242
00:13:54,090 --> 00:13:56,850
我们有这个特定的字体

243
00:13:56,850 --> 00:13:59,920
应该是微软雅黑，但这个太细太轻了

244
00:13:59,920 --> 00:14:04,350
这个特定的字体在app里很常用

245
00:14:04,350 --> 00:14:07,600
那么我们同样可以借用这个字体

246
00:14:08,650 --> 00:14:10,710
如果想知道从哪

247
00:14:10,710 --> 00:14:14,620
可以找到这些样式

248
00:14:15,740 --> 00:14:18,050
比如说TextBlock

249
00:14:18,050 --> 00:14:20,640
到右边这个属性窗口

250
00:14:21,420 --> 00:14:25,350
到...杂项

251
00:14:25,350 --> 00:14:29,650
然后可以在样式下看到

252
00:14:29,650 --> 00:14:33,720
找到了这个...Windows.UI.Xaml.Style

253
00:14:33,720 --> 00:14:36,850
点击这个绿色小按钮

254
00:14:36,850 --> 00:14:39,800
可以从系统资源里选择

255
00:14:40,850 --> 00:14:43,250
我把它移开一点

256
00:14:43,250 --> 00:14:45,300
可以看得清楚些

257
00:14:49,310 --> 00:14:51,350
从其中一个系统资源里选择

258
00:14:51,350 --> 00:14:54,120
这个例子里选HeaderTextBlockStyle

259
00:14:54,120 --> 00:14:55,790
但也可以选...比如说

260
00:14:55,790 --> 00:15:00,790
SubheaderTextBlockStyle或者

261
00:15:03,650 --> 00:15:06,740
CaptionTextBlockStyle，一个更小的字体

262
00:15:08,350 --> 00:15:10,250
我最后要提出来的一点是

263
00:15:10,250 --> 00:15:13,620
如果把鼠标放在

264
00:15:13,620 --> 00:15:17,550
CaptionTextBlockStyle上然后按F12

265
00:15:18,970 --> 00:15:23,420
可以发现链接到了generic.xaml文件的

266
00:15:23,420 --> 00:15:25,540
第12,400行

267
00:15:26,050 --> 00:15:27,890
滚动到右边

268
00:15:27,890 --> 00:15:32,890
可以看到，这个样式有一个基准样式属性

269
00:15:33,190 --> 00:15:37,700
就是说这个样式是建立在BaseTextBlockStyle基础上的

270
00:15:38,520 --> 00:15:41,020
然后加了些改动

271
00:15:41,020 --> 00:15:43,420
可以在这里看到

272
00:15:43,420 --> 00:15:46,250
它就像级联样式表一样

273
00:15:46,250 --> 00:15:48,350
选一个样式，修改它

274
00:15:48,350 --> 00:15:51,300
为它添加更多的改动

275
00:15:51,720 --> 00:15:54,210
现在如果我们想看看这个BaseTextBlockStyle

276
00:15:54,210 --> 00:15:56,320
按F12，啊噢-｡-;

277
00:15:56,320 --> 00:15:58,750
不能导航到定义位置

278
00:15:58,750 --> 00:16:02,350
那就复制这个

279
00:16:02,350 --> 00:16:04,170
用查找工具

280
00:16:05,820 --> 00:16:07,890
可以看到BaseTextBlockStyle是在这里定义的

281
00:16:07,890 --> 00:16:11,590
它没有...

282
00:16:11,590 --> 00:16:13,900
它没有基于其他任何东西

283
00:16:14,550 --> 00:16:16,750
TargetType="TextBlock"

284
00:16:16,750 --> 00:16:19,150
然后这里设置了字体族、字体粗细、字体大小

285
00:16:19,150 --> 00:16:22,850
字体修整，换行，线性叠加策略

286
00:16:22,850 --> 00:16:25,650
文本行边界...所有这些东西

287
00:16:25,650 --> 00:16:29,220
有很多我们刚才

288
00:16:29,220 --> 00:16:31,320
在属性窗口看到的属性

289
00:16:31,320 --> 00:16:36,320
都基于这个BaseTextBlockStyle

290
00:16:37,810 --> 00:16:41,290
我们可以在自己的样式里利用基准样式

291
00:16:41,290 --> 00:16:43,650
同样，到app的样式里

292
00:16:43,650 --> 00:16:45,500
获取这个级联样式表

293
00:16:47,990 --> 00:16:50,150
好了，来概括一下

294
00:16:50,150 --> 00:16:52,490
这节课最重要的就是

295
00:16:52,490 --> 00:16:55,050
可以在app里利用主题资源

296
00:16:55,050 --> 00:16:57,750
来实现与用户终端上

297
00:16:57,750 --> 00:17:01,940
其他app一致的样式

298
00:17:02,850 --> 00:17:04,250
我觉得是时候复习一下了

299
00:17:04,250 --> 00:17:05,750
我们下节课见

300
00:17:05,750 --> 00:17:08,020
那时候再说更多东西

301
00:17:08,020 --> 00:17:09,300
谢谢~*★,°*:.☆\(￣▽￣)/$:*.°★*

